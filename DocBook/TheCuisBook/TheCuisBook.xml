<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
  <!ENTITY tex "TeX">
  <!ENTITY latex "LaTeX">
]>
<book id="TheCuisBook.xml" lang="fr">
<!-- %**start of header -->
<title>The Cuis-Smalltalk Book</title>
<!-- Prefered settings -->
<!-- Remove ugly black rectangle -->
<!-- @afourwide -->
<!-- @afourlatex -->
<!-- 7x9.25 inches 17.8x23.5 cm -->

<!-- Macro definitions -->






<!-- Todo note, with an index entry to group them all -->

<!-- comment, with an index entry to group them all -->


<!-- Smalltalk code in a text flow -->

<!-- for the printed manual, use arrow symbols for the returned value -->
<!-- and the assignment -->

<!-- for the html manual use := and ^ symbol, so the user can copy and -->
<!-- paste Smalltalk directly in Cuis -->
<!-- up arrow, return symbol -->
<!-- left arrow, assignment -->

<!-- label of a button, string keyed in a text field -->
<!-- Smalltalk example -->

<!-- Smalltalk example with caption -->

<!-- Exercise with caption -->

<!-- Figure with caption -->

<!-- Figure with caption and extension -->

<!-- Iconic button -->


<!-- Highlighted Note -->
<bookinfo><legalnotice><para>This book is for Cuis-Smalltalk (6.0#5608 or later), a free and modern
implementation of the Smalltalk language and environment.
</para>
<para>Copyright &#169; 2020, 2021, 2022, 2023, 2024 H. Fernandes with K. Dickey &amp; J. Vuletich


Thanks to Matt Armstrong, Ezequiel Birman, Michael Khol, Szabolcs
Komáromi, David Lewis, John McGarey, Mariano Montone, Ricardo Pacheco,
Barry Perryman, Tommy Pettersson, Bernhard Pieber, Mauro Rizzi,
Stephen Smith &amp; Ignacio Sniechowski for the reviews of the book,
suggestions and borrowed texts. Your help is very valuable.


</para>
<para>Compilation : June 20, 2024
</para>
<para>Documentation source: <ulink url="https://github.com/Cuis-Smalltalk/TheCuisBook">https://github.com/Cuis-Smalltalk/TheCuisBook</ulink> 
</para>
<para>The contents of this book are protected under Creative Commons
Attribution-ShareAlike 4.0 International.
</para>
<para><emphasis>You are free to:</emphasis>


<emphasis role="bold">Share</emphasis> &#8211; copy and redistribute the material in any medium or
format


<emphasis role="bold">Adapt</emphasis> &#8211; remix, transform, and build upon the material for any
purpose, even commercially.
</para>
<para><emphasis>Under the following terms:</emphasis>


<emphasis role="bold">Attribution.</emphasis> You must give appropriate credit, provide a link to
the license, and indicate if changes were made. You may do so in any
reasonable manner, but not in any way that suggests the licensor
endorses you or your use.


<emphasis role="bold">Share Alike.</emphasis> If you remix, transform, or build upon the material,
you must distribute your contributions under the same license as the
original.
</para>
<para>Complete license: <ulink url="https://creativecommons.org/licenses/by-sa/4.0/legalcode">https://creativecommons.org/licenses/by-sa/4.0/legalcode</ulink>
</para>
</legalnotice></bookinfo><!-- %**end of header -->


 
 
 


<blockquote><attribution>Alan Kay</attribution>
<para>I like it... It&#8217;s nice and clean and simple and pretty. Nice stuff!
</para></blockquote>



<blockquote><attribution>Alan Kay</attribution>
<para>I like it... It&#8217;s nice and clean and simple and pretty. Nice stuff!
</para></blockquote>



<para>Cuis is a free Smalltalk-80 environment with a specific set of goals:
being simple and powerful. It is also portable to any platform, fast
and efficient.


</para>
<para>You are reading the Cuis Book!
</para>
<chapter label="" id="Top">
<title>The Cuis Book</title>

<para>This book is for Cuis-Smalltalk (6.0#5608 or later), a free and modern
implementation of the Smalltalk language and environment.
</para>
<para>Copyright &#169; 2020, 2021, 2022, 2023, 2024 H. Fernandes with K. Dickey &amp; J. Vuletich


Thanks to Matt Armstrong, Ezequiel Birman, Michael Khol, Szabolcs
Komáromi, David Lewis, John McGarey, Mariano Montone, Ricardo Pacheco,
Barry Perryman, Tommy Pettersson, Bernhard Pieber, Mauro Rizzi,
Stephen Smith &amp; Ignacio Sniechowski for the reviews of the book,
suggestions and borrowed texts. Your help is very valuable.


</para>
<para>Compilation : June 20, 2024
</para>
<para>Documentation source: <ulink url="https://github.com/Cuis-Smalltalk/TheCuisBook">https://github.com/Cuis-Smalltalk/TheCuisBook</ulink> 
</para>
<para>The contents of this book are protected under Creative Commons
Attribution-ShareAlike 4.0 International.
</para>
<para><emphasis>You are free to:</emphasis>


<emphasis role="bold">Share</emphasis> &#8211; copy and redistribute the material in any medium or
format


<emphasis role="bold">Adapt</emphasis> &#8211; remix, transform, and build upon the material for any
purpose, even commercially.
</para>
<para><emphasis>Under the following terms:</emphasis>


<emphasis role="bold">Attribution.</emphasis> You must give appropriate credit, provide a link to
the license, and indicate if changes were made. You may do so in any
reasonable manner, but not in any way that suggests the licensor
endorses you or your use.


<emphasis role="bold">Share Alike.</emphasis> If you remix, transform, or build upon the material,
you must distribute your contributions under the same license as the
original.
</para>
<para>Complete license: <ulink url="https://creativecommons.org/licenses/by-sa/4.0/legalcode">https://creativecommons.org/licenses/by-sa/4.0/legalcode</ulink>
</para>

<!-- @menu -->
<!-- * Preface:: -->
<!-- * Beginnings:: -->
<!-- * The Message Way of Life:: -->
<!-- * Class - Model of Communicating Entities:: -->
<!-- * The Collection Way of Life:: -->
<!-- * Control Flow Messaging:: -->
<!-- * Visual with Morph:: -->
<!-- * The Fundamentals of Morph:: -->
<!-- * Events:: -->
<!-- * Code Management:: -->
<!-- * Debug and Exception Handling:: -->
<!-- * Sharing Cuis:: -->
<!-- * Documents Copyright:: -->
<!-- * Summary of Syntax:: -->
<!-- * The Exercises:: -->
<!-- * Solutions to the Exercises:: -->
<!-- * The Examples:: -->
<!-- * The Figures:: -->
<!-- * Spacewar! Source Code:: -->
<!-- * Indexes:: -->
<!-- @end menu -->


<!--================================================================ -->
<!-- Preface -->
</chapter>
<preface id="Preface">
<title>Preface</title>

<blockquote><attribution>Alan Perlis</attribution>
<para>A language that doesn&#8217;t affect the way you think about programming, is
not worth knowing.
</para></blockquote>



<!-- We should write Cuis is easily discoverable, one can learn by looking at Cuis code -->

<para>Cuis-Smalltalk &#8212;in short, Cuis&#8212; is a portable environment for doing,
building and sharing software. Like any other tool, Cuis doesn&#8217;t
require having a particular mindset or following a particular
process. However, Cuis is built with a specific view on what software
is, and what it means to build software. As a consequence, Cuis is
especially effective if these ideas resonate with you and, at least
occasionally, you let them guide your thoughts and actions.
</para>
<para>In this book, we will accompany you as you explore, discover and
learn about Cuis and Smalltalk.
</para>
<para>We don&#8217;t assume knowledge of computer programming, but if you happen
to have some experience with an Object-Oriented or Functional language
you will recognize many concepts. If you don&#8217;t have any programming
experience or you have coded in an imperative, closer to the metal
language, such as C or Assembly, many of the ideas may be new.
</para>
<para>In any case, especially during the first chapters, read this book and
follow the examples with an open mind. A new point of view on what
software development means will be an enriching experience.  For us,
programming is a thoughtful process.
</para>
<para>We understand software development as the activity of learning and
documenting knowledge for ourselves and others to use, and also to be
run on a computer. The fact that a computer can execute the software
and produce useful solutions to some problems is a consequence of the
knowledge being sound and relevant. Just making it work is not the
important part!
</para>
<para>These ideas strongly shape Cuis and the experience of using it, and
we&#8217;ll develop them further along in this book.  Amongst their most
obvious consequences are a passion for reducing unneeded complexity,
while providing a complete, live software development experience.
</para>
<para>This book is an introduction and invitation to explore Cuis.  We hope
you will join us in this journey to use it as a medium to express
ideas and thoughts, to build cool stuff, and to make Cuis even better.
</para>
<anchor id="ch00_002dimg1"/>
<inlinemediaobject><imageobject><imagedata fileref="ch00-img1.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>To make your journey with this book more enjoyable, the
<emphasis>Spacewar!</emphasis><footnote><para><ulink url="https://en.wikipedia.org/wiki/Spacewar!">https://en.wikipedia.org/wiki/Spacewar!</ulink></para></footnote>
project is its recurring theme. It is distilled into the book in code
examples, exercises and dedicated chapters. At the end of the book,
you will have written a replica of this historic video game. The final
Cuis-Smalltalk package of this game can be downloaded from the book
repository<footnote><para><ulink url="https://github.com/Cuis-Smalltalk/TheCuisBook/blob/master/Spacewar!.pck.st">https://github.com/Cuis-Smalltalk/TheCuisBook/blob/master/Spacewar!.pck.st</ulink></para></footnote>.
</para>

<bridgehead renderas="sect1">How to use the book</bridgehead>

<para>The reader can study Cuis-Smalltalk from two versions of the book:
</para>
<itemizedlist>
<listitem><para><emphasis role="bold">Online.</emphasis> With a web browser at the
 <ulink url="https://cuis-smalltalk.github.io/TheCuisBook">https://cuis-smalltalk.github.io/TheCuisBook</ulink> address. The book
 is structured in chapters and sections, displayed one at a time. It
 is a very flexible way to study the book: you can open several
 chapters and appendices on different tabs in your web browser. It
 requires you to be connected to the Internet, though.
</para>
</listitem><listitem><para><emphasis role="bold">Offline.</emphasis> In a single PDF file you download and read
 offline. It can be printed as a nice paper book. The most recent
 build can be found at <ulink url="https://github.com/Cuis-Smalltalk/TheCuisBook">https://github.com/Cuis-Smalltalk/TheCuisBook</ulink>.
</para>
</listitem></itemizedlist>
<indexterm role="cp"><primary>returned value</primary></indexterm>
<indexterm role="cp"><primary>variable</primary><secondary>assignment</secondary></indexterm><indexterm role="cp"><primary>assignment</primary><see>variable</see></indexterm>

<para>The chapters come with many examples. Some can be copied and pasted into
Cuis-Smalltalk. We encourage you to do this, and in the process modify them
to explore on your own.
</para>
<para>The code examples in the online version can be directly copied and
pasted into Cuis-Smalltalk. This is why the assignment character &#8220;&#x2190;&#8221;
you see in the developer Cuis-Smalltalk window is printed as &#8220;:=&#8221; in the
online version of the book. The same applies to the return character
&#8220;&#x2191;&#8221; printed as &#8220;^&#8221; in the online version.
</para>
<para>In the offline PDF version, the code examples are printed with the same
assignment and return characters as seen in the Cuis-Smalltalk windows. Copying
and pasting also work as expected.
</para>
<para>Other examples are code extracts which are not self-sufficient to be
executed as is. Their purpose is to expose specific facets of the Smalltalk
language.
</para>
<para>A typical example without a caption looks like:
</para>
<screen>100 factorial
</screen>
<para>The same example with a caption appears with a number and title, and
can be used as a reference elsewhere in the book:
</para>
<anchor id="exampleExample"/>
<screen>100 factorial
&#8658;  9332621544394415268169923885626670049071596826438162146859
29638952175999932299156089414639761565182862536979208272237582
51185210916864000000000000000000000000
</screen>

<para>There are also a lot of exercises. Most are very easy; they intend to give you
an opportunity to apply what you have just learned.
</para>
<para>Exercises are easily identified by the Cuis-Smalltalk mascot: <firstterm>Cuis</firstterm>,
a South American rodent!
</para>
<anchor id="exerciseExample"/>
<para><emphasis>Search the Internet: How many versions of Smalltalk are there?</emphasis>
</para>


<para>The solutions to the exercises are presented in <link linkend="Solutions-to-the-Exercises">Solutions to the
Exercises</link>.
</para>
<para>Happy reading!
<!--================================================================ -->
<!--:Part One -->
<!-- @part Part One @*The basis of @cuis{} -->
<!-- -->
</para></preface>
<chapter label="" id="Beginnings">
<title>Beginnings</title>

<blockquote><attribution>Alan Kay</attribution>
<para>The computer is simply an instrument whose music is ideas.
</para></blockquote>



<para>Before getting into the details of how to use the Cuis-Smalltalk language and
tools to build software, we need to understand the point of view,
assumptions and intentions that shape how Cuis-Smalltalk is meant to be
used. We can call this the Smalltalk philosophy of programming.
</para>

<sect1 label="" id="Historical-Context">
<title>Historical Context</title>

<para>One major idea in software is that programming is merely giving a
computer a set of instructions to solve some problem.  In this point
of view, the only value of software is to achieve a result, and therefore, a piece
of software is only as interesting as having that problem solved.
Furthermore, as programming is not interesting by itself, it
is left to a professional guild with a specialized technical knowledge of how to
write software, and the rest of the world just ignores it.
</para>
<para>Our focus is on one thread in the history of powerful ideas which give
a different lens through which to explore software development.
The historical development of these ideas differs from 
the <emphasis>just solve a problem</emphasis> view. We think this is worth
revisiting. 
</para>
<para>The first clear vision of an automated information processor to augment
our collective memory, to find and share knowledge &#8211; indeed to transform the 
data explosion into an information explosion, and then into a knowledge and 
understanding explosion &#8211; was called Memex and described in the Vannevar Bush 
essay &#8220;As We May Think&#8221; in 1945
<footnote><para><ulink url="https://en.wikipedia.org/wiki/As_We_May_Think">https://en.wikipedia.org/wiki/As_We_May_Think</ulink></para></footnote>.
Bush&#8217;s description of the possibility of developing a Memex processing system
to help individuals access, evolve and capture knowledge 
for our collective benefit
inspired many later thinkers and inventors in the development
of personal computers, networks, hypertext, search engines, and
knowledge repositories such as Wikipedia
<footnote><para>Notable early milestones in this line of
development were Ivan Sutherland&#8217;s Sketchpad (1963), the RAND tablet
(1964), and Doug Engelbart&#8217;s NLS (&quot;oN-Line System&quot;) (1968). Later
developments include Ted Nelson&#8217;s Xanadu, the Apple Macintosh, the
World Wide Web, smartphones and tablet computers.</para></footnote>.
</para>
<para>As computational machinery evolved from large, single program at a time mainframes,
into timesharing mainframes, and into minicomputers, another area of 
insight was developing with models of how humans learn 
<footnote><para>Early notables
here are J. Piaget, J. Brunner, O. K. Moore, and S. Papert.</para></footnote>.
People began to talk of <firstterm>human-computer symbiosis</firstterm>.
Alan Kay
conceived the idea that computer software and computer programming
could become a new medium for expressing thoughts and knowledge. The
ability to express ideas in this new medium would be the new
literacy. Every person should learn to read and write in this new
digital medium, and would have available their own dynamic book, a <firstterm>Dynabook</firstterm>
<footnote><para>&#8220;A personal computer for children of all ages&#8221;(1972) <ulink url="http://www.vpri.org/pdf/hc_pers_comp_for_children.pdf">http://www.vpri.org/pdf/hc_pers_comp_for_children.pdf</ulink></para></footnote>
<footnote><para>&#8220;Personal Dynamic Media&#8221;(1977) <ulink url="http://www.vpri.org/pdf/m1977001_dynamedia.pdf">http://www.vpri.org/pdf/m1977001_dynamedia.pdf</ulink></para></footnote>
to accomplish this.
</para>
<para>Very readable accounts of historic developments are Alan Kay&#8217;s papers
&#8220;The Early History of Smalltalk&#8221; <footnote><para><ulink url="http://worrydream.com/EarlyHistoryOfSmalltalk">http://worrydream.com/EarlyHistoryOfSmalltalk</ulink></para></footnote> and 
&#8220;What is a Dynabook?&#8221; <footnote><para><ulink url="http://www.vpri.org/pdf/hc_what_Is_a_dynabook.pdf">http://www.vpri.org/pdf/hc_what_Is_a_dynabook.pdf</ulink></para></footnote>
in which he notes <emphasis>The best way to predict the future is to invent it</emphasis>.
Realizing the Dynabook vision required significant advances and
mutually supporting development of
hardware and software. The original development took place at the
Xerox PARC research center in the 1970&#8217;s. The first <emphasis>interim
Dynabook</emphasis> hardware was the Xerox Alto, generally considered the first
personal computer. The software system was Smalltalk. The design of both
was guided by the objectives of making <emphasis>Personal Dynamic Media</emphasis>
and the Dynabook real. The final version of Smalltalk built at Xerox
was Smalltalk-80.
</para>
<para>Given the relatively weak capabilities of computer hardware at that
time, implementing this vision presented real challenges, and much
creativity was called for.  Today, smartphones, tablets and laptops do
have the hardware capabilities a Dynabook requires. However, the same
advance hasn&#8217;t happened for the medium of personal software. 
</para>
<para>In 1981 Dan Ingalls, one of the early Smalltalk inventors, wrote in his
article &#8220;Design Principles Behind Smalltalk&#8221;
<footnote><para><ulink url="http://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html">http://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html</ulink></para></footnote>
a number of principles that still guide us today. Among these:
</para><blockquote><para><emphasis role="bold">Personal Mastery.</emphasis> If a system is to serve the creative
spirit, it must be entirely comprehensible to a single individual.
</para>
<para><emphasis role="bold">Reactive Principle.</emphasis> Every component accessible to the user
should be able to present itself in a meaningful way for observation
and manipulation.
</para></blockquote>
<para>With the commercialization of software, the trend has been to give people
&#8220;shrink wrapped&#8221; applications which are sealed off and written
by professional software developers. One may customize an
application by changing &#8220;user settings&#8221;, but there is no way
to see into or change deep capabilities.
</para>
<para>In keeping with the ideal of personal media literacy,
we believe that everyone should have full access to the software that
runs our systems.  Understanding and exploring computer systems
requires writing software in ways that can be read and shared.
</para>
<para>The thinking change in problem solving can shift from <emphasis>What can I
do here with what I am presented?</emphasis> to asking <emphasis>What tools do I
need to be successful here?</emphasis> and then building them to be ever more
successful.
</para>
<para>This way of thinking about software systems is important to us.
</para>
<para>For this reason, Cuis is a <emphasis>kernel</emphasis> Smalltalk system which is still rather
close to Smalltalk-80. 
The Cuis-Smalltalk goal is to be a small, coherent Smalltalk
development environment that, with study, is
comprehensible to a single person.
</para>
<para>As we experiment with and evolve Cuis, this goal is carried out by removing everything
possible from the base system which is not essential, and by having a
composition strategy which allows one to write or add any features as 
needed.  As one gains understanding of the software kernel or core, one only
has to read and learn from each additional feature at a time to understand the whole.
</para>
<para>Modern, open software environments are highly complex.
Cuis is an attempt to remain oriented and able to discover
patterns without being lost in a large wealth of possibilities
which one does not completely grasp.
</para>
<para>It is said that one understands the world by building it.  Developing fluency and depth in
a new medium takes time and practice.
</para>
<para>We invite you to become fluent and look forward to sharing with us what you have built.
</para>
<para>First, however, we must start with some of the mechanics.
</para>
<para>As the saying goes &#8220;A journey of a thousand miles begins with a single step&#8221;
<footnote><para><ulink url="https://en.wikipedia.org/wiki/A_journey_of_a_thousand_miles_begins_with_a_single_step">https://en.wikipedia.org/wiki/A_journey_of_a_thousand_miles_begins_with_a_single_step</ulink></para></footnote>.
</para>
<para>Let&#8217;s step forward together.
</para></sect1>
<sect1 label="" id="Installing-and-configuring-Cuis_002dSmalltalk">
<title>Installing and configuring Cuis-Smalltalk</title>
<para>Cuis-Smalltalk is an environment and a programming language executed on an
idealized virtual computer. It is based on two major components:
the Smalltalk <firstterm>virtual machine</firstterm> conceptualizing this virtual
computer and an <firstterm>image</firstterm> representing the state of this computer.
</para>
<para>The virtual machine is an executable program running on a dedicated
host (GNU/Linux, Mac OS X, Windows, etc.). It is called the <firstterm>Open
Smalltalk Virtual Machine</firstterm>, or Squeak <acronym>VM</acronym> in short. There are
different flavors of <acronym>VM</acronym>, for various combinations of Operating
System and CPU architecture. Therefore, one <acronym>VM</acronym> compiled
for Windows on Intel architecture will not work in Linux on
ARM architecture. You need the specific <acronym>VM</acronym> compiled for
the combination of Operating System and CPU architecture
your computer is based on.
</para>
<para>The <emphasis>image</emphasis> is a regular file feeding the <acronym>VM</acronym> with all the objects
defining the state of the virtual computer. These objects are
classes, methods, instances of those classes as numbers, strings,
windows, debuggers &#8211; whatever existed when the state of the virtual
computer was saved. An <firstterm>image file</firstterm> saved on a given Operating System
and CPU architecture <emphasis role="bold">will run identically on another system</emphasis> 
requiring only a compatible <acronym>VM</acronym> to be used.
</para>
<para>The <acronym>VM</acronym> allows an image to be restarted with windows in the same locations
between different operating systems and different CPU architectures
without recompilation.  This is what <firstterm>portability</firstterm> means to us.
</para>
<para>What makes Cuis-Smalltalk special is the living entities in the image: its
class population and arrangement, how the classes inherit from each
other. The class count is typically less than 700.
</para>
<para>To get you started easily, we encourage you to install
<ulink url="https://sites.google.com/view/cuis-university/descargas">Cuis-University</ulink><footnote><para><ulink url="https://sites.google.com/view/cuis-university/descargas">https://sites.google.com/view/cuis-university/descargas</ulink></para></footnote>. Here
you will find bundles for GNU/Linux, Mac OS X and Windows on Intel
architecture. These bundles come with the dedicated <acronym>VM</acronym> and a recent
image of Cuis-Smalltalk; as well packages ready to be installed to make your
life easier when you experience the examples and exercises of the
book. By the time you read this book, Cuis-Smalltalk will likely have evolved
to a newer version.  What you learn here should, however, be
easily transferable.
</para>
<para>To get Cuis-Smalltalk running on your computer, extract the bundle and
execute the run script on Windows/Linux &#8211; <filename>run.bat</filename> or
<filename>run.sh</filename> &#8211; on OS X launch the Squeak application. Once you get
Cuis-Smalltalk running, read the information displayed on the windows. When
you are done, you can close these windows and adjust Cuis-Smalltalk to your
preferences.
</para>
<para>The Cuis University distribution should work for most common platforms,
but there are always more platform variants than we can test for.
<emphasis role="bold">If you have a problem</emphasis>, here are two sources of information.  If you
do <emphasis>not</emphasis> have a problem, you can ignore these for now.
</para><itemizedlist><listitem><para>Current installation instructions at the GitHub Cuis Repository:
<ulink url="https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev#setting-up-cuis-in-your-machine">https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev#setting-up-cuis-in-your-machine</ulink>
</para></listitem><listitem><para>Ask us on the Cuis email group
<ulink url="https://lists.cuis.st/mailman/listinfo/cuis-dev">https://lists.cuis.st/mailman/listinfo/cuis-dev</ulink>
</para></listitem></itemizedlist>
<sect2 label="">
<title>Editing your preferences</title>
<para>Once you read the information on the default windows, the next thing
you want to do is to adjust visual properties to fit your preferences
and needs. To do so, access the World menu
...Background click &#8594; <command>Preferences...</command>
then select the pin on the top right of the menu to make it
permanent. Here you have the most important options: the choice for
the <emphasis role="bold">font size</emphasis>, the <emphasis role="bold">themes</emphasis> whenever your prefer light
or dark colouring. There are other preferences you can explore by
yourself. Once you are done, do ...World menu &#8594;
<command>Save</command>... to make your preferences permanent. In this book, we
keep the default Cuis-Smalltalk theme, we suggest you do the same so your
environment reflects the book screenshots.
</para>
<anchor id="ch01_002dPreferences"/>
<inlinemediaobject><imageobject><imagedata fileref="ch01-Preferences.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


</sect2>
<sect2 label="">
<title>Fun with window placement</title>
<indexterm role="cp"><primary>tools</primary><secondary>workspace</secondary></indexterm><para>The first tool to discover is the <firstterm>Workspace</firstterm> tool. It is a kind
of text editor to key in Smalltalk code you can execute
immediately. Do ...World menu &#8594;
<command>Open...</command> &#8594; <command>Workspace</command>...
</para>
<para>Now we will ask Cuis-Smalltalk to change the window&#8217;s placement: click the blue icon
(top left) to access the window&#8217;s options menu and experiment with the white
area to place the Workspace window at the half left of the Cuis-Smalltalk
environment.
</para>
<anchor id="ch01_002dimg1a"/>
<inlinemediaobject><imageobject><imagedata fileref="ch01-img1a.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>The <command>resize...</command> option offers even more freedom to place the
window. Try the following exercise:
</para>
<anchor id="exePlacement"/>
<para><emphasis>Use the
<command>resize...</command> option to place the Workspace centered in the Cuis-Smalltalk
environment.</emphasis>
</para>


</sect2>
</sect1>
<sect1 label="" id="Writing-your-first-scripts">
<title>Writing your first scripts</title>
<para>In this section you will learn how to write simple scripts in the
Workspace to get a taste and feel for Smalltalk code. The
examples are associated with small exercises to experiment with and
accompanied with solutions in the appendix. We intentionally kept the
details of the syntax out of this section.
</para>
<para>In a Workspace, the usual <emphasis>Hello World!</emphasis> program can be written
in Smalltalk:
</para>
<anchor id="hello"/>
<screen>Transcript show: 'Hello World!'
</screen>

<indexterm role="cp"><primary>tools</primary><secondary>transcript</secondary></indexterm><para>To execute this code, select it with the mouse and over it do
...right mouse click &#8594; <command>Do it (d)</command>...
You may now see nothing happen! Indeed to see the output, you need a
<firstterm>Transcript</firstterm> window to be visible.  The <literal>Transcript</literal> is a
place where a programmer can send information to the user as we are
doing here. Do ...World menu &#8594; <command>Open...</command>
&#8594; <command>Transcript</command>... and execute the code again.
</para>
<anchor id="ch01_002dimg2"/>
<inlinemediaobject><imageobject><imagedata fileref="ch01-img2.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>The workspace code has three parts:
</para>
<itemizedlist>
<listitem><para>the string literal <literal>'Hello World!'</literal>  
</para>
</listitem><listitem><para>the message <literal>#show:</literal> with its argument <literal>'Hello World!'</literal>
</para>
</listitem><listitem><para>the class <literal>Transcript</literal> receiving the message <literal>#show:</literal> with its argument
</para>
</listitem></itemizedlist>
<indexterm role="cp"><primary>shortcut</primary><see>keyboard shortcut</see></indexterm>
<indexterm role="cp"><primary>keyboard shortcut</primary><secondary>select all code (<userinput>Ctrl-a</userinput>)</secondary></indexterm><indexterm role="cp"><primary>keyboard shortcut</primary><secondary>executing code (<userinput>Ctrl-d</userinput>)</secondary></indexterm><para>The action of printing takes place in the class
<literal>Transcript</literal>. The code execution is also invoked with keyboard
shortcuts <userinput>Ctrl-a</userinput> (<emphasis>select <emphasis role="bold">A</emphasis>ll</emphasis>) then <userinput>Ctrl-d</userinput>
(<emphasis><emphasis role="bold">D</emphasis>o it</emphasis>).
</para>
<anchor id="hello2"/>
<screen>Transcript show: 'Hello World!'.
Transcript newLine.
Transcript show: 'I am Cuising'
</screen>

<para>In this three line script, observe how the lines are separated by a
dot &#8220;.&#8221;. This dot (or period) is a line separator so it is not needed in the
third line nor in a one line script. The message <literal>#newLine</literal> has no
argument.
</para>
<indexterm role="cp"><primary>string</primary></indexterm>
<para>A <firstterm>String</firstterm> is the way text is represented in a programming
language, it is a collection of characters. We already met string with
our first script, it is enclosed in single quotes: <literal>'hello
world!'</literal>. We capitalize it with the <literal>#capitalized</literal> message:
</para>
<indexterm role="cp"><primary>string</primary><secondary><literal>capitalized</literal></secondary></indexterm><screen>Transcript show: 'hello world!' capitalized
&#8658; 'Hello world!' 
</screen>
<indexterm role="cp"><primary>string</primary><secondary><literal>asUppercase</literal></secondary></indexterm><para>To convert all the characters to capitals use the <literal>#asUppercase</literal> message:
</para>
<screen>Transcript show: 'hello world!' asUppercase
&#8658; 'HELLO WORLD!'
</screen>
<indexterm role="cp"><primary>string</primary><secondary>concatenate</secondary></indexterm><para>Two strings are concatenated with the <literal>#,</literal> message:
</para>
<anchor id="concatenateStrings"/>
<screen>Transcript show: 'Hello '&#44; 'my beloved '&#44; 'friend'
&#8658; 'Hello my beloved friend'
</screen>

<anchor id="concatenateUppercase"/>
<para><emphasis>Add a message to modify <link linkend="concatenateStrings">concatenateStrings</link> to output
&#8217;Hello MY BELOVED friends&#8217;.</emphasis>
</para>


<sect2 label="">
<title>Fun with numbers</title>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary></indexterm><indexterm role="cp"><primary>interger</primary><see>number</see></indexterm>
<indexterm role="cp"><primary>keyboard shortcut</primary><secondary>execute and print result (<userinput>Ctrl-p</userinput>)</secondary></indexterm>
<para>In your Workspace, to compute a factorial execute the example below
with <userinput>Ctrl-a</userinput> then <userinput>Ctrl-p</userinput> (<emphasis><emphasis role="bold">P</emphasis>rint it</emphasis>):
</para><screen>100 factorial
&#8658;  9332621544394415268169923885626670049071596826438162146859
29638952175999932299156089414639761565182862536979208272237582
51185210916864000000000000000000000000
</screen>
<para>Cuis-Smalltalk handles very large integer numbers without requiring a
special type declaration or method. To convince yourself try the example below:
</para><screen>10000 factorial / 9999 factorial
&#8658; 10000
</screen>
<para>If you execute and print with <userinput>Ctrl-p</userinput> the code: <literal>10000
factorial</literal>, you will see that it takes far more time to print one factorial result 
than to compute two factorials and divide them. The result is an integer
as expected, not a scaled decimal number as many computer languages
will return.
</para>
<indexterm role="cp"><primary>number</primary><secondary>rational (fraction)</secondary></indexterm><indexterm role="cp"><primary>rational (fraction)</primary><see>number</see></indexterm>
<indexterm role="cp"><primary>fraction</primary><see>number</see></indexterm>

<para>As we are discussing division, you may not get the result you expect:
</para><screen>15 / 4
&#8658; 15/4
</screen>
<para>It looks like Cuis-Smalltalk is lazy because it does not answer the decimal
number <literal>3.75</literal> as we were expecting. In fact Cuis-Smalltalk wants to
be as accurate as possible, and its answer is a rational number! After
all, a fraction is just a division we are too lazy &#8211; because it
is troublesome &#8211; to compute, Cuis-Smalltalk does just that!
</para>
<para>Try out this to understand what is happening underneath:
</para><screen>(15 / 4) + (1 / 4)
&#8658; 4
</screen>
<para>Is it not wonderful? Cuis-Smalltalk computes with rational numbers. We
started with division and addition operations on integer, and we got
an accurate result thanks to intermediate computation on rational
numbers.
</para>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
In the example, observe how the parentheses are used
although in arithmetic calculation the division is performed first. With
Cuis-Smalltalk you need to specify the order of operations with
parentheses. We will explain why later.
</para>
<anchor id="inverseSum"/>
<para><emphasis>Write the code to compute the
sum of the first four integer inverses. 4 inverted is 1/4</emphasis>
</para>


<para>Integers can be printed in different forms with the appropriate
message:
</para>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary>roman</tertiary></indexterm><indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary>as words</tertiary></indexterm><indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary>base</tertiary></indexterm><screen>2020 printStringRoman &#8658; 'MMXX' 
2020 printStringWords  &#8658; 'two thousand, twenty'
&quot;Number as the Maya did&quot;
2020 printStringBase: 20 &#8658; '510'
</screen>
<anchor id="capWordNumber"/>
<para><emphasis>Print 2020 as
words, capitalized.</emphasis>
</para>



<indexterm role="cp"><primary>number</primary><secondary>literal</secondary></indexterm><indexterm role="cp"><primary>literal</primary><secondary>number</secondary></indexterm><para>The integer and float numbers we have played with are <firstterm>Numeric
Literals</firstterm>. Literals are building blocks of the language and considered as
constant expressions.  They literally are as they appear.
</para>
<para>There are several syntax variants which denote a number:
</para>
<informaltable><tgroup cols="2"><colspec colwidth="45*"></colspec><colspec colwidth="55*"></colspec><thead><row><entry><para>Numeric literal                    </para></entry><entry><para>What it represents
   </para></entry></row></thead><tbody><row><entry><para><literal>1</literal>                       </para></entry><entry><para>integer (decimal notation)
   </para></entry></row><row><entry><para><literal>2r101</literal>                   </para></entry><entry><para>integer (binary radix)
   </para></entry></row><row><entry><para><literal>16rFF</literal>                   </para></entry><entry><para>integer (hexadecimal radix)
   </para></entry></row><row><entry><para><literal>1.5</literal>                     </para></entry><entry><para>floating point number
   </para></entry></row><row><entry><para><literal>2.4e7</literal>                   </para></entry><entry><para>floating point (exponential notation)
</para></entry></row></tbody></tgroup></informaltable>
<para>Depending on the value we need to use, we can mix these literal
representations:
</para>
<screen>16rA + 1 + 5e-1 + 6e-2
&#8658; 289/25
</screen>
</sect2>
</sect1>
<sect1 label="" id="Spacewar_0021">
<title>Spacewar!</title>
<para>The Spacewar! game was initially developed in 1962 by Steve Russell on
a DEC PDP-1 minicomputer. It is said to be the first known video game
installed on several computers and it was very popular in the
programming community in the 1960s. It was ported and rewritten
several times to different hardware architectures and complemented with
additional features. <emphasis>Computer Space</emphasis>, the first arcade video
game cabinet was a clone of Spacewar!
</para>
<anchor id="ch01_002dSpacewarPDP"/>
<inlinemediaobject><imageobject><imagedata fileref="ch01-SpacewarPDP.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Wikipedia describes very precisely this space combat simulation game:
</para>
<blockquote><attribution>Wikipedia, <ulink url="https://en.wikipedia.org/wiki/Spacewar!#Gameplay">Spacewar!</ulink></attribution>
<para>The gameplay of Spacewar! involves two monochrome spaceships called
&quot;the needle&quot; and &quot;the wedge&quot;, each controlled by a player, attempting
to shoot one another while maneuvering on a two-dimensional plane in
the gravity well of a star, set against the backdrop of a
starfield. The ships fire torpedoes, which are not affected by
the gravitational pull of the star. The ships have a limited number of
torpedoes and supply of fuel, which is used when the player fires the
ship&#8217;s thrusters. Torpedoes are fired one at a time by flipping a
toggle switch on the computer or pressing a button on the control pad,
and there is a cooldown period between launches. The ships remain in
motion even when the player is not accelerating, and rotating the
ships does not change the direction of their motion, though the ships
can rotate at a constant rate without inertia.
</para>
<para>Each player controls one of the ships and must attempt to shoot down
the other ship while avoiding a collision with the star or the
opposing ship. Flying near the star can provide a gravity assist to
the player at the risk of misjudging the trajectory and falling into
the star. If a ship moves past one edge of the screen, it reappears on
the other side in a wraparound effect.
</para></blockquote>
<para>Therefore, the protagonists of the game are:
</para>
<orderedlist numeration="arabic"><listitem><para>a <emphasis role="bold">central star</emphasis> generating a gravity field,
</para>
</listitem><listitem><para>a <emphasis role="bold">star field</emphasis> background,
</para>
</listitem><listitem><para>two <emphasis role="bold">space ships</emphasis> called <emphasis>the needle</emphasis> and <emphasis>the
 wedge</emphasis> controlled by two players.
</para>
</listitem><listitem><para><emphasis role="bold">torpedoes</emphasis> fired by the space ships.
</para>
</listitem></orderedlist>
<anchor id="ch01_002dSpacewarGameplay"/>
<inlinemediaobject><imageobject><imagedata fileref="ch01-SpacewarGameplay.png" format="PNG"></imagedata></imageobject></inlinemediaobject>



<!-- -->
</sect1>
</chapter>
<chapter label="" id="The-Message-Way-of-Life">
<title>The Message Way of Life</title>

<blockquote><attribution>Alan Kay</attribution>
<para>The key in making great and growable systems is much more to design how its
 modules communicate rather than what their internal properties and
 behaviors should be.
</para></blockquote>




<para>A Smalltalk system is a collection of entities communicating with each other
through messages. That&#8217;s all, there is nothing more.
</para>


<sect1 label="" id="Communicating-entities">
<title>Communicating entities</title>

<indexterm role="cp"><primary>message</primary><secondary>sender</secondary></indexterm><indexterm role="cp"><primary>message</primary><secondary>receiver</secondary></indexterm><indexterm role="cp"><primary>instance</primary></indexterm>
<indexterm role="cp"><primary>class</primary></indexterm>
<para>When a given entity receives a message from another entity, it
triggers a specific behavior.  The receiving entity of the message is
called the <firstterm>receiver</firstterm> and the sending entity, the <firstterm>sender</firstterm>. In
Cuis-Smalltalk terminology, an entity is called an <firstterm>instance of a class</firstterm>,
a <firstterm>class instance</firstterm>, or simply an <firstterm>instance</firstterm>.  A <firstterm>class</firstterm> is
a kind of model for an entity.
</para>
<indexterm role="cp"><primary>method</primary></indexterm>
<para>The behavior is defined internally in the receiver and it can be
triggered from any instance.
<emphasis role="bold">Behaviors are invoked only by messages sent between entities</emphasis>.
An entity may send a message to
itself. A behavior is defined in a class and is called a <firstterm>method</firstterm>.
</para>
<indexterm role="cp"><primary>garbage collection</primary></indexterm>
<para>This results in a huge cloud of entities communicating with each other
through message sending. New entities are instantiated when needed
then automatically garbage collected when no longer required. On a
fresh Cuis-Smalltalk environment, the count of class instances is more than
150000.
</para>
<indexterm role="cp"><primary>collection</primary><secondary><literal>inject:into:</literal></secondary></indexterm><anchor id="entitiesCount"/>
<screen>ProtoObject allSubclasses sum: [ :class | class allInstances size] 
&#8658; 152058
</screen>

<para>The count of classes, the models for the entities &#8211; instances of the class <literal>Class</literal> &#8211; is less than 700.
</para>
<anchor id="classesCount"/>
<screen>Smalltalk allClasses size
&#8658; 671
</screen>

<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
Because you are not using the base image but one used
to teach classes, you will likely see
a much larger number.
</para>
<para>To be honest, in our previous chapter, we skipped this important detail
on Smalltalk design. We wrote about message sending without explaining
much, we wanted you to discover this design informally.
The scripts you
read and wrote were all about entities communicating with each other
through messages.
</para>
</sect1>
<sect1 label="" id="Message-send-definitions">
<title>Message send definitions</title>
<indexterm role="cp"><primary>message</primary><secondary>send</secondary></indexterm>
<para>There are three kinds of messages in Cuis-Smalltalk:
</para>
<indexterm role="cp"><primary>message</primary><secondary>unary</secondary></indexterm>
<itemizedlist><listitem><para><emphasis role="bold">Unary messages</emphasis> take no argument.
 

 In <literal>1 factorial</literal> the message <literal>#factorial</literal> is sent to the
 object <literal>1</literal>.
</para>
<indexterm role="cp"><primary>message</primary><secondary>binary</secondary></indexterm></listitem><listitem><para><emphasis role="bold">Binary messages</emphasis> take exactly one argument.
 
 
 In <literal>1 + 2</literal> the message <literal>#+</literal> is sent to the object
 <literal>1</literal> with the argument <literal>2</literal>.
</para>
<indexterm role="cp"><primary>message</primary><secondary>keyword</secondary></indexterm></listitem><listitem><para><emphasis role="bold">Keyword messages</emphasis> take an arbitrary number of
 arguments.
 
 
 In <literal>2 raisedTo: 6 modulo: 10</literal> the message consisting of the
 message selector <literal>#raisedTo:modulo:</literal> and the arguments
 <literal>6</literal> and <literal>10</literal> is sent to the object <literal>2</literal>.
</para>
</listitem></itemizedlist>
<para>Unary message selectors consist of alphanumeric characters and start
with a lowercase letter.
</para>
<para>Binary message selectors consist of one or more characters from the
following set:
</para>
<screen>+ - / \ * ~ &lt; &gt; = @ % | &amp; ? ,
</screen>
<para>Keyword message selectors consist of a series of alphanumeric
keywords, where each keyword starts with a lower-case letter and ends
with a colon.
</para>
<indexterm role="cp"><primary>message</primary><secondary>precedence</secondary></indexterm><para>Unary messages have the highest precedence, followed by binary messages, and
finally keyword messages, so:
</para>
<screen>2 raisedTo: 1 + 3 factorial
&#8658; 128
</screen>
<para>First we send <literal>factorial</literal> to <literal>3</literal>, then we send
<literal>+ 6</literal> to <literal>1</literal>, and finally we send
<literal>raisedTo: 7</literal> to <literal>2</literal>.
</para>
<para>Precedence aside, evaluation is strictly from left to right, so
</para>
<screen>1 + 2 * 3
&#8658; 9
</screen>
<para>is not 7. Parentheses must be used to alter the order of evaluation:
</para>
<screen>1 + (2 * 3)
&#8658; 7
</screen>
<para>Parentheses can also be used to make potentially confusing code more
clear. For example, the strict left-to-right evaluation order can be
confusing when applied to mathematical expressions. In the Spacewar!
code snippet below, the parentheses make it more clear that the
addition happens first:
</para>
<anchor id="updateShipVelocity"/>
<screen>newVelocity := (ai + ag) * t + velocity
</screen>

<indexterm role="cp"><primary>message</primary><secondary>cascade</secondary></indexterm><indexterm role="cp"><primary>cascade of messages</primary></indexterm>
<para>To send multiple messages to the same receiver a <firstterm>cascade</firstterm> can be
used to state the receiver once, followed by the cascade of messages
separated by semicolons. Here is our earlier <link linkend="hello2">hello2</link> code
expressed with a cascade:
</para>
<anchor id="helloCascade"/>
<screen>Transcript
   show: 'Hello World!';
   newLine;
   show: 'I am Cuising'
</screen>

<para>Another example of a cascade from the Spacewar! game:
</para>
<anchor id="teleportShip"/>
<screen>aShip 
   velocity: 0 @ 0;
   morphPosition: randomCoordinate value @ randomCoordinate value
</screen>

<para>Observe the text here is formatted to ease code understanding. It is possible to
write the cascade of messages in one line, but it reduces the
readability of the code:
</para>
<screen>Transcript show: 'Hello World!'; newLine; show: 'I am Cuising'
</screen>
<para>The <literal>Transcript</literal> class is frequently helpful in presenting
useful information when developing an application. An alternative to
the <userinput>Ctrl-d</userinput> (<emphasis><emphasis role="bold">D</emphasis>o it</emphasis>) shortcut is <userinput>Ctrl-p</userinput>
(<emphasis><emphasis role="bold">P</emphasis>rint it</emphasis>), which executes the script and prints the result
directly in the Workspace.
</para>
<para>In the <link linkend="helloCascade">helloCascade</link>, we have requested no special result.  Selecting the
text and typing <userinput>Ctrl-p</userinput> results in the default, which is to
return the object to which a message is sent, in this case, the
<literal>Transcript</literal>.
</para>
</sect1>
<sect1 label="" id="Message-to-string-entities">
<title>Message to string entities</title>
<indexterm role="cp"><primary>string</primary><secondary>character access</secondary></indexterm><indexterm role="cp"><primary>string</primary><secondary>Unicode</secondary></indexterm><indexterm role="cp"><primary>Unicode</primary></indexterm>
<para>As previously stated, a <literal>String</literal> is a sequence of <literal>Character</literal> 
elements, and represents plain Text (without any formatting).
</para>
<para>In Cuis, as in most programming languages, <literal>String</literal> literals are a convenient syntax for creating <literal>String</literal> instances. These are some examples of <literal>String</literal> literals:
</para>
<screen>'Hello World!'.
'Accented letters: cigüeña, camión, déjà, deçà, forêt, coïncidence'.
'Non-latin (Greek) letters: Λορεμ ιπσθμ δολορ σιτ αμετ'.
</screen>
<para>The first example is an instance of <literal>String</literal>. This class is used for String literals if all Characters are in the limited <acronym>ASCII</acronym> character set. The following examples contain non-<acronym>ASCII</acronym> Characters. For these, an instance of <literal>UnicodeString</literal> is used instead.  You usually don&#8217;t need to care about this: Instances of <literal>String</literal> and <literal>UnicodeString</literal> understand the same messages, so they are interchangeable.
</para>
<para>Access to a character in a string is done with the keyword message
<literal>#at:</literal> and its index position in the string as the argument. Execute
the following examples with the <userinput>Ctrl-p</userinput> shortcut:
</para>
<screen>'Hello' at: 1 &#8658; $H
'Hello' at: 5 &#8658; $o
</screen>
<para>Observe how a character is prefixed with the &#8220;$&#8221; symbol.
</para>
<para><emphasis role="bold">Caution.</emphasis> The index indicates position, naturally starting from 1, and is valid up to the string length.
</para>
<indexterm role="cp"><primary>string</primary><secondary><literal>indexOf:</literal></secondary></indexterm><screen>'Hello' indexOf: $e
&#8658; 2
</screen>
<indexterm role="cp"><primary>string</primary><secondary><literal>at:put:</literal></secondary></indexterm><indexterm role="cp"><primary><literal>yourself</literal></primary></indexterm>
<para>To change one character, use the companion two keyword message
<literal>#at:put:</literal>. The argument must be noted as a character:
</para><screen>'Hello' at: 2 put: $a; yourself
&#8658; 'Hallo'
</screen>
<para>Observe the use of the cascade with the <literal>#yourself</literal> message.  A
cascade sends the following messages to the original receiver, so
<literal>#yourself</literal> returns the updated string.  Without the
cascade, <literal>$a</literal> is returned as the result of the <literal>#at:put:</literal>
message.
</para>
<anchor id="helloBelle"/>
<para><emphasis>Replace each character of
the string &#8217;Hello&#8217; to become &#8217;Belle&#8217;.</emphasis>
</para>


<indexterm role="cp"><primary>character</primary><secondary>ascii</secondary></indexterm><para>Characters that are part of the <acronym>ASCII</acronym> character set can be
asked for their <acronym>ASCII</acronym> code. Conversely, given an
<acronym>ASCII</acronym> code, we can ask for the corresponding
<literal>Character</literal>:
</para>
<screen>$A asciiValue
&#8658; 65
Character asciiValue: 65 + 25
&#8658; $Z
</screen>
<indexterm role="cp"><primary>character</primary><secondary>Unicode</secondary></indexterm><indexterm role="cp"><primary>Unicode</primary></indexterm>
<para>But Characters that are not part of <acronym>ASCII</acronym> don&#8217;t have an
<acronym>ASCII</acronym>. In general, it is better to use Unicode code points
instead:
</para>
<screen>$A codePoint
&#8658; 65
UnicodeCodePoint codePoint: 65 + 25
&#8658; $Z
$φ codePoint
&#8658; 966
UnicodeCodePoint codePoint: 966
&#8658; $φ
</screen>
<indexterm role="cp"><primary>string</primary><secondary><literal>shuffled</literal></secondary></indexterm><indexterm role="cp"><primary>collection</primary><secondary><literal>shuffled</literal></secondary></indexterm><para>Shuffling a string can be fun but not very useful. However,
shuffling can apply to any kind of collection, not only to a string, and it
will prove to be useful as we will see later:
</para><screen>'hello world' shuffled
&#8658; 'wod llreohl'
</screen><para>Note that the results of each shuffle are different.
</para>
<indexterm role="cp"><primary>string</primary><secondary><literal>asArray</literal></secondary></indexterm><indexterm role="cp"><primary>message</primary><secondary>composition</secondary></indexterm><para>Messages naturally compose:
</para><screen>'hello world' shuffled asArray
&#8658; #($h $d $l $ &quot;20&quot; $o $w $e $l $l $o $r) 
</screen>
<para>An <literal>Array</literal> literal starts with a hash or sharp character, <literal>$#</literal>
and parentheses surround the elements of the array.
In this case, the elements are <literal>Character</literal>s, but they can
be instances of any class.
</para>
<para>Like <literal>#shuffled</literal>, all collections answer to the message
<literal>#sorted</literal>, which answers a sorted collection.
<indexterm role="cp"><primary>string</primary><secondary><literal>sorted</literal></secondary></indexterm></para><screen>'hello world' sorted
&#8658; ' dehllloorw'
</screen>
</sect1>
<sect1 label="" id="Messages-to-number-entities">
<title>Messages to number entities</title>
<indexterm role="cp"><primary>number</primary><secondary>root</secondary></indexterm><indexterm role="cp"><primary>number</primary><secondary><literal>sqrt</literal></secondary></indexterm><indexterm role="cp"><primary>number</primary><secondary><literal>squared</literal></secondary></indexterm><indexterm role="cp"><primary>number</primary><secondary>rational (fraction)</secondary><tertiary>operations</tertiary></indexterm>
<para>Earlier, we discussed how Cuis-Smalltalk knows about rational numbers.  The
four arithmetic operations and mathematical functions are implemented
with unary and binary messages understood by the rational numbers:
</para>
<screen>(15 / 14) * (21 / 5) &#8658; 9 / 2
(15 / 14) / ( 5 / 21) &#8658; 9 /2 
(3 / 4) squared &#8658; 9 / 16
(25 / 4) sqrt &#8658; 5 / 2
</screen>
<anchor id="squaredSum"/>
<para><emphasis>Write the code to compute the
sum of the squares of the inverse of the first four integers.</emphasis>
</para>


<indexterm role="cp"><primary>number</primary><secondary>decimal division</secondary></indexterm><para>If Cuis-Smalltalk integer division returns a rational number, how do we find the
result in decimal? One option is to write a number as a floating point literal,
a <firstterm>Float</firstterm>.
This kind of literal is written with the integer
and fractional parts separated by a dot &#8220;.&#8221;:
</para><screen>15.0 / 4 &#8658; 3.75
15 / 4.0 &#8658; 3.75
</screen>
<para>Another option is to convert an integer to a float with the
<literal>#asFloat</literal> message. It is very useful when the integer is in a
variable:
</para>
<screen>15 asFloat / 4
&#8658; 3.75
</screen>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary>division</tertiary></indexterm><para>You can also ask for division with truncation to
get an integer result using 
the message <literal>#//</literal>:
</para><screen>15 // 4
&#8658; 3
</screen>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary>division reminder</tertiary></indexterm><para>The modulo remainder of the Euclidean division is computed with the message
<literal>#\\</literal>:
</para><screen>15 \\ 4
&#8658; 3
</screen>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>odd</literal></tertiary></indexterm><indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>even</literal></tertiary></indexterm><indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>isPrime</literal></tertiary></indexterm><indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>isDivisibleBy:</literal></tertiary></indexterm><para>Cuis-Smalltalk has arithmetic operations to test if an integer is odd, even,
a prime number, or divisible by another. You just send the appropriate unary or
keyword message to the number:
</para>
<anchor id="integerBasicTest"/>
<screen>25 odd &#8658; true
25 even &#8658; false
25 isPrime &#8658; false
23 isPrime &#8658; true
91 isDivisibleBy: 7 &#8658; true
117 isDivisibleBy: 7 &#8658; false
117 isDivisibleBy: 9 &#8658; true
</screen>

<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>gcd:</literal> (great common divisor)</tertiary></indexterm><indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>lcm:</literal> (least common multiple)</tertiary></indexterm><para>With specific <firstterm>keyword messages</firstterm> you can compute the Least Common
Multiple and Greatest Common Divisor. A keyword message is composed of
one or more colons &#8220;:&#8221; to insert one or more arguments:
</para>
<screen>12 lcm: 15 &#8658; 60
12 gcd: 15 &#8658; 3
</screen>
<para>In the Spacewar! game, the central star is the source of a gravity
field. According to Newton&#8217;s law of universal gravitation, any
object with a mass &#8211; a spaceship or a torpedo in the game &#8211; is
subjected to the gravitational force. We compute it as a vector to
account for both its direction and its magnitude.  The game code
snippet below shows a (simplified) mixed scalar and vector calculation
done with message sending (See <link linkend="motionEquations">motionEquations</link>):
</para>
<anchor id="gravityVector"/>
<screen>-10 * self mass * owner starMass / (position r raisedTo: 3) * position
</screen>

</sect1>
<sect1 label="" id="A-brief-introduction-to-the-system-Browser">
<title>A brief introduction to the system Browser</title>
<indexterm role="cp"><primary>tools</primary><secondary>system browser</secondary></indexterm><indexterm role="cp"><primary>browser</primary></indexterm>

<para>Smalltalk organizes instance behaviors using classes.  
A class is an object that holds a set of methods to be executed
when one of its instances receives a message
that is the name of one of these methods.
</para>
<para>The <firstterm>System Browser</firstterm>, in short, the <firstterm>Browser</firstterm>, is a tool to
rule all the classes in Cuis-Smalltalk. It is both a tool to explore the
classes (system or user ones) and to write new classes and methods.
</para>
<para>To access the tool ...World menu &#8594;
<command>Open...</command> &#8594; <command>Browser</command>...
</para>
<anchor id="ch02_002dbrowserDetailed"/>
<inlinemediaobject><imageobject><imagedata fileref="ch02-browserDetailed.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<indexterm role="cp"><primary>browser</primary><secondary>class category</secondary></indexterm><indexterm role="cp"><primary>class</primary><secondary>category</secondary></indexterm><para>At the top left are the <firstterm>class categories</firstterm>, groups of classes
sharing the same theme. A category can also be used to create a
<firstterm>Package</firstterm>, which is an organisational element to save code in a
file system.  In <link linkend="ch02_002dbrowserDetailed">ch02-browserDetailed</link>, the selected class
category is <emphasis role="bold">Kernel-Numbers</emphasis>, a group of classes we already
started using. The term <emphasis role="bold">Kernel-</emphasis> indicates it is part of
fundamental categories, but it is only a convention. See the other
categories such as <emphasis role="bold">Kernel-Text</emphasis> and <emphasis role="bold">Kernel-Chronology</emphasis>
related to text and date entities.
</para>
<indexterm role="cp"><primary>class</primary><secondary>declaration</secondary></indexterm><para>Next to the right are the classes in the selected class category. They
are nicely presented in a parent-child class hierarchy. When a class is
first selected in this pane, its declaration appears in the large pane
below, the <literal>Number</literal> class declaration is:
</para>
<screen>Magnitude subclass: #Number
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Kernel-Numbers'
</screen>
<para>A few important points in this declaration:
</para>
<itemizedlist>
<listitem><para><emphasis><literal>Number</literal></emphasis> is a subclass of <emphasis><literal>Magnitude</literal></emphasis>.
   This means
   <literal>Number</literal> is a kind of specialized <literal>Magnitude</literal>.
</para>
</listitem><listitem><para>the declaration itself is Smalltalk code, indeed the message
   <literal>#subclass:instanceVariableNames:classVariableNames:...</literal>
   was sent to <literal>Magnitude</literal> to create this class.
</para>
</listitem><listitem><para>the <literal>subclass:</literal> argument <literal>Number</literal> is prefixed
   with &#8220;#&#8221;. It is a symbol, a kind of unique string. Indeed when
   declaring the <literal>Number</literal> class, the system does not know about it
   yet, so it is named as a symbol.
</para>
</listitem><listitem><para>The <literal>instanceVariableNames:</literal> argument is a string:
   the instance variables of the class are declared by names separated
   by a space. There are none in this class definition.
</para>
</listitem></itemizedlist>
<para>A subclass inherits behaviors from its parent superclass, and so only needs
to describe what is different from its superclass.  An instance
of <literal>Number</literal> adds methods (which define behaviors) unknown to an instance
of <literal>Magnitude</literal>.  We will explore this in detail as we go forward.
</para>
<indexterm role="cp"><primary>class</primary><secondary>comment</secondary></indexterm><para>To learn about the purpose of a class, it is good practice to <emphasis role="bold">always</emphasis>
visit the class comment. Often a comment also comes with code
examples to learn how to use the object; these code snippets can be
selected and executed in place as done from a Workspace. In
<link linkend="ch02_002dbrowserDetailed">ch02-browserDetailed</link>, see the <command>comment</command> button to read or
to edit the comment of the selected class.
</para>
<indexterm role="cp"><primary>method</primary><secondary>category</secondary></indexterm><para>To the right of the class panel is the method categories panel.
A class may have many methods, so grouping
them by category helps other users orient themselves in finding related methods.
As a reference, <literal>Number</literal>
has more than 100 instance side methods implemented in
itself<footnote><para>When considering its parents, the combined method count is
more than 300.</para></footnote>. Clicking the <command>arithmetic</command> category
directly gives access to related methods in the next and last pane at
the right.
</para>
<indexterm role="cp"><primary>class</primary><secondary>category</secondary></indexterm><indexterm role="cp"><primary>keyboard shortcut</primary><secondary>find a class (<userinput>Ctrl-f</userinput>)</secondary></indexterm>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
A right click on the Class Category pane
brings up its context menu.  You can select <command>find class ..</command> or,
as the menu indicates, use <userinput>Ctrl-f</userinput> (<emphasis><emphasis role="bold">F</emphasis>ind</emphasis>), to get a
fill-in panel and type part of a class name to match.  Try it with
<literal>String</literal>.
</para>
<anchor id="stringArith"/>
<para><emphasis>How many methods are there
in the <emphasis role="bold">arithmetic</emphasis> method category of the <literal>CharacterSequence</literal>
class?</emphasis>
</para>



<indexterm role="cp"><primary>method</primary><secondary>instance method</secondary></indexterm><para>In the Browser, once a method is selected &#8211; as in
<link linkend="ch02_002dbrowserDetailed">ch02-browserDetailed</link>, <literal>abs</literal> method &#8211; the bottom part
shows its source code, ready to be explored or edited. Often,
you will find a small comment just after the method name,
surrounded by double quotes.
</para>
<para>Every object knows its own class and will respond with it when sent the message <literal>#class</literal>.
</para>
<indexterm role="cp"><primary>browser</primary><secondary>invoke from Workspace</secondary></indexterm><indexterm role="cp"><primary>keyboard shortcut</primary><secondary>browse a class (<userinput>Ctrl-b</userinput>)</secondary></indexterm><para><emphasis role="bold">Tip.</emphasis> In the workspace <userinput>Ctrl-b</userinput> (<emphasis><emphasis role="bold">B</emphasis>rowse</emphasis>)
on the class name will open a Browser on the named class:
</para>
<itemizedlist>
<listitem><para>In the Workspace, type <literal>2 class</literal> and print
   with <userinput>Ctrl-p</userinput>,
</para>
</listitem><listitem><para><literal>SmallInteger</literal> is printed and automatically highlighted as the current selection,
</para>
</listitem><listitem><para>Invoke the Browser on the selected <literal>SmallInteger</literal>
   class with <userinput>Ctrl-b</userinput>,
</para>
</listitem><listitem><para>A new Browser instance opens on the <literal>SmallInteger</literal>, ready to
   be explored.
</para>
</listitem></itemizedlist>
</sect1>
<sect1 label="" id="Spacewar_0021-models">
<title>Spacewar! models</title>

<sect2 label="">
<title>First classes</title>
<para>In the last chapter, we listed the protagonists of the game. Now, we
propose a first implementation of the game model with a set of classes
representing the involved entities:
</para>
<orderedlist numeration="arabic">
<listitem><para>the game play &#8658; <literal>SpaceWar</literal> class,
</para>
</listitem><listitem><para>a central star &#8658; <literal>CentralStar</literal> class,
</para>
</listitem><listitem><para>two space ships &#8658; <literal>SpaceShip</literal> class,
</para>
</listitem><listitem><para>torpedoes &#8658; <literal>Torpedo</literal> class.
</para>
</listitem></orderedlist>
<indexterm role="cp"><primary>browser</primary><secondary>class category (new)</secondary></indexterm><indexterm role="cp"><primary>class</primary><secondary>category (new)</secondary></indexterm><para>Before defining these classes in Cuis-Smalltalk, we want to create a
dedicated class category to group them there.
</para>
<para>In any kind of Cuis-Smalltalk window, pressing right-click on a pane will typically
bring up a menu of operations you can apply which are specific to that
pane.
</para>
<para>With the mouse pointer over the class category pane of the Browser &#8211;
the left-most one &#8211; just do:
</para>
<para>...right mouse click &#8594; <command>add item</command>... then
key in <emphasis>Spacewar!</emphasis>
</para>

<indexterm role="cp"><primary>class</primary><secondary>create (new)</secondary></indexterm><para>Once our new category is created, the Browser proposes a code template in
the method source code pane &#8211; the bottom one &#8211; to create a new class in
the <command>Spacewar!</command> category:
</para>
<screen>Object subclass: #NameOfSubclass
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>
<indexterm role="cp"><primary>keyboard shortcut</primary><secondary>save code (<userinput>Ctrl-s</userinput>)</secondary></indexterm><para>We replace the symbol <literal>#NameOfSubclass</literal> with a symbol
representing the name of the class we want to create. Let&#8217;s start with
<literal>#SpaceWar</literal>. To save our class, while over the class
declaration code do ...right mouse click &#8594;
<command>Accept</command>... Cuis-Smalltalk will ask for your initials and name
if it hasn&#8217;t before. Alternatively, you can just do <userinput>Ctrl-s</userinput> (<emphasis><emphasis role="bold">S</emphasis>ave</emphasis>).
</para>
<para>Then simply repeat the process for each of <literal>#SpaceShip</literal>,
<literal>#CentralStar</literal> and <literal>#Torpedo</literal>. If necessary, to
get another class code template, click the class category
<command>Spacewar!</command>.
</para>
<para>When done, your class category should be filled with four classes as in
<link linkend="ch02_002dspacewarClassCategory">ch02-spacewarClassCategory</link>.
</para>
<anchor id="ch02_002dspacewarClassCategory"/>
<inlinemediaobject><imageobject><imagedata fileref="ch02-spacewarClassCategory.png" format="PNG"></imagedata></imageobject></inlinemediaobject>



<anchor id="Spacewar_0021-package"/></sect2>
<sect2 label="">
<title>Spacewar! package</title>
<indexterm role="cp"><primary>package</primary><secondary>create (new)</secondary></indexterm><indexterm role="cp"><primary>package</primary><secondary>save</secondary></indexterm><indexterm role="cp"><primary>package</primary><secondary>tool</secondary></indexterm><para>Another important use case of a class category is to define a package
to save code to a file.  A package saves the code of the classes held in
a given class category and a bit more, but more on that last point
later. To create our <command>Spacewar!</command> package and save our game code
we use the Installed Packages tool.
</para>
<orderedlist numeration="arabic"><listitem><para>Open the <firstterm>Installed Packages</firstterm> tool ...World
  menu &#8594; <command>Open...</command> &#8594; <command>Installed
  Packages</command>...
</para>
</listitem><listitem><para>On the Installed Packages window, do ...click <command>new</command>
  button &#8594; Input <emphasis>Spacewar!</emphasis> &#8594; <userinput>Return</userinput>...
</para>
</listitem><listitem><para>Do ...select <command>Spacewar!</command> package &#8594;
  <command>save</command> button...
</para>
</listitem></orderedlist>
<anchor id="ch02_002dInstalledPackages"/>
<inlinemediaobject><imageobject><imagedata fileref="ch02-InstalledPackages.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<indexterm role="cp"><primary>package</primary><secondary>load</secondary><tertiary>by graphic interface</tertiary></indexterm><para>A file <filename>Spacewar!.pck.st</filename> is created alongside the Cuis-Smalltalk image
file.  To install a package in a fresh Cuis-Smalltalk
environment, use the File List tool:
</para>
<orderedlist numeration="arabic">
<listitem><para>Do ...World menu &#8594;
  <command>Open...</command> &#8594; <command>File List</command>...
</para>
</listitem><listitem><para>Search for the file <filename>Spacewar!.pck.st</filename> and click the
  <command>install package</command> button  
</para>
</listitem></orderedlist>
<para>You can also drag and drop the package file from your operating system
over to the Squeak window. Upon dropping the file over the window
Cuis-Smalltalk will ask you what you want to do with this package.  To
install it in your environment you can simply press <command>Install
package</command>.
</para>
<para>Or, you can open a Workspace, type in <literal>Feature require: 'Spacewar!'</literal>
and <userinput>Ctrl-d</userinput> <emphasis><emphasis role="bold">D</emphasis>o it</emphasis>.
</para>
<para>Now, we have created and saved the package. Whenever you start with a
fresh Cuis-Smalltalk environment, you can load the game package.
</para>
<para>The classes we defined are empty shells with neither state nor
behavior. These will be filled in and refactored in the following
chapters.
</para>
</sect2>
<sect2 label="">
<title>The Newtonian model</title>
<anchor id="newtonModel"/><para>For an enjoyable game experience, the player ships must follow
Newton&#8217;s laws of motion. Acceleration, speed and position are computed
according to these laws. The ships are subjected to two forces: the
acceleration from the gravity pull of the central star and an inner
acceleration coming from the ship engines.
</para>
<para>Later, we will learn how these equations are easily converted to
computer calculations.
</para>
<anchor id="motionEquations"/>
<inlinemediaobject><imageobject><imagedata fileref="motionEquations.png" format="PNG"></imagedata></imageobject></inlinemediaobject>

<!-- -->
</sect2>
</sect1>
</chapter>
<chapter label="" id="Class-_002d-Model-of-Communicating-Entities">
<title>Class, Model of Communicating Entities</title>

<anchor id="goldberg1"/><blockquote><attribution>Adele Goldberg</attribution>
<para>If I give you something that you can play with and extend, even a
piece of paper with a paragraph and I say it&#8217;s not written well,
rewrite it, that&#8217;s easier than giving you nothing and say make
something; you know, giving a blank sheet of paper and starting to
write.  So the lovely part that has proven true for professional
programmers as well as kids is when you start with something, an
object that does something, and then you put many objects like those
together and have them interact, and then you extend and make them
behave a little differently, you can take a very incremental approach
to learning how to control a computer system.
</para></blockquote>



<para>Cuis-Smalltalk is a pure object-oriented programming (OOP) language. All the
entities in the language: integers, floats, rational numbers, strings,
collections, blocks of code, and so forth &#8211; every instance usable as a
noun in Smalltalk &#8211; is an object.
</para>


<sect1 label="" id="Understanding-Object-Oriented-Programming">
<title>Understanding Object-Oriented Programming</title>

<para>But just what is an object?
</para>
<para>At its simplest, an object has two components:
</para>
<itemizedlist>
<listitem><para><emphasis role="bold">Internal state.</emphasis> This is embodied by variables
   known only to the object. A variable only visible within the object
   is called a <firstterm>private</firstterm> variable. As a consequence, it is impossible
   &#8211; if the object decides so &#8211; to know the internal state of the object
   from another object.
</para>
</listitem><listitem><para><emphasis role="bold">A repertoire of behaviors.</emphasis> These are the messages
   an object instance responds to. When the object
   receives a message it understands, it gets its behavior from a
   method with that name known by its class or superclass.
</para>
</listitem></itemizedlist>
<indexterm role="cp"><primary>class</primary></indexterm>
<indexterm role="cp"><primary>subclass</primary></indexterm>
<indexterm role="cp"><primary>instance</primary></indexterm>
<indexterm role="cp"><primary>selector</primary></indexterm>
<para>The method name is called a <firstterm>selector</firstterm> because it is used to select
which behavior is invoked. For example, in <literal>'hello' at: 1 put: $B</literal>,
the method invoked has the selector <literal>#at:put:</literal> and the arguments
<literal>1</literal> and <literal>$B</literal>.  All selectors are symbols.
</para>
<para>Object instances are created &#8211; <firstterm>instantiated</firstterm> &#8211;
following a model or template. This model is known as its <firstterm>Class</firstterm>.
All instances of a class share the same methods and so react in the same ways.
</para>
<para>For example, there is one class <literal>Fraction</literal> but many
fractions (1/2, 1/3, 23/17, ...) which all behave the way
we expect fractions to behave.  The class <literal>Fraction</literal>
and the classes it inherits from define this common behavior,
as we will now describe.
</para>

<indexterm role="cp"><primary>variable</primary><secondary>instance</secondary></indexterm><indexterm role="cp"><primary>instance variable</primary></indexterm>
<para>A given class declares its internal variables &#8211; states &#8211; and the
behavior by implementing the methods.  A variable is basically a named
box that can hold any object.  Each instance variable of a class gets its own
box with the common name.
</para>
<indexterm role="cp"><primary>number</primary><secondary>rational (fraction)</secondary></indexterm><para>Lets see how the <literal>Fraction</literal> class is declared:
</para>
<screen>Number subclass: #Fraction
   instanceVariableNames: 'numerator denominator'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Kernel-Numbers'
</screen>
<para>As expected there are two variables &#8211; named <firstterm>instance variables</firstterm>
&#8211; to define the <literal>numerator</literal> and <literal>denominator</literal> of
a fraction.  Each instance of fraction has its own numerator and its
own denominator.
</para>
<indexterm role="cp"><primary>superclass</primary></indexterm>
<para>From this declaration, we observe there is a hierarchy in
the class definition: <literal>Fraction</literal> is a kind of
<literal>Number</literal>. This means a fraction inherits the internal state
(variables) and behavior (methods) defined in the <literal>Number</literal>
class. <literal>Fraction</literal> is called a <firstterm>subclass</firstterm> of <literal>Number</literal>,
and so naturally we call <literal>Number</literal> a <firstterm>superclass</firstterm> of <literal>Fraction</literal>.
</para>
<indexterm role="cp"><primary>class</primary><secondary>inheritance</secondary></indexterm><para>A Class specifies the behavior of all of its instances.  It is useful
to be able to say <emphasis>this object is like that object, but with these
differences</emphasis>.  We do this in Smalltalk by having classes inherit instance
state and behavior from their parent Class.  This child, or subclass
then specifies just the instance state and behavior that is different
from its parent, retaining all the unmodified behaviours.
</para>
<para>This aspect of object-oriented programming is called
<firstterm>inheritance</firstterm>. In Cuis-Smalltalk, each class inherits from one parent
class.
</para>
<indexterm role="cp"><primary>polymorphism</primary></indexterm>

<para>In Smalltalk, we say that each object decides for itself how it
responds to a message.  This is called <firstterm>polymorphism</firstterm>.  The same
message selector may be sent to objects of different Classes.  The
<emphasis>shape</emphasis> (morph) of the computation is different depending on the
specific class of the <emphasis>many</emphasis> (poly) possible classes of the
object receiving the message.
</para>
<para>Different kinds of objects respond to the same <literal>#printString</literal>
message in different, but appropriate ways.
</para>
<!-- instance creation -->
<indexterm role="cp"><primary>instance</primary><secondary>creation</secondary></indexterm><indexterm role="cp"><primary>class</primary><secondary>method</secondary></indexterm><indexterm role="cp"><primary>method</primary><secondary>class method</secondary></indexterm><para>We have already met fractions. Those fractions are objects called
<firstterm>instance</firstterm>s of the class <literal>Fraction</literal>. To create an instance
we wrote <literal>5 / 4</literal>, the mechanism is based on message sending
and polymorphism.  Let us look into how this works.
</para>
<para>The number <literal>5</literal> is an integer receiving the message <literal>#/</literal>,
therefore looking at the method <literal>/</literal> in the <literal>Integer</literal>
class we can see how the fraction is instantiated. See part of this
method:
</para>
<screen>/ aNumber
&quot;Refer to the comment in Number / &quot;
| quoRem |
aNumber isInteger ifTrue:
../..
   ifFalse: [^ (Fraction numerator: self denominator: aNumber) reduced]].
../..
</screen>
<para>From this source code, we learn that in some situations, the method
returns a fraction, reduced. We can expect that in some other
situation, an integer is returned, for example, <literal>6 / 2</literal>.
</para>
<para>In the example, we observe the message <literal>#numerator:denominator:</literal> is
sent to the class <literal>Fraction</literal>, such a message refers to a
<firstterm>class method</firstterm> understood only by the <literal>Fraction</literal> class. It
is expected such a named method returns an instance of a
<literal>Fraction</literal>.
</para>
<para>Try this out in a workspace:
</para><screen>Fraction numerator: 24 denominator: 21
&#8658; 24/21
</screen>
<para>Observe how the resulting fraction is not reduced. Whereas it is reduced
when instantiated with the <literal>#/</literal> message:
</para>
<screen>24 / 21
&#8658; 8/7
</screen>
<para>A class method is often used to create a new instance from a class. In
<link linkend="forLoop">forLoop</link>, the message <literal>#new</literal> is sent to the class
<literal>OrderedCollection</literal> to create a new empty collection;
<emphasis><literal>new</literal></emphasis> is a class method.
</para>
<para>In <link linkend="repeatLoop">repeatLoop</link>, the <literal>#newFrom:</literal> message is sent to the class
<literal>OrderedCollection</literal> to create a new collection filled with
elements from the array given in the argument; <emphasis><literal>newFrom:</literal></emphasis> is
another class method.
</para>
<!-- instance method -->
<indexterm role="cp"><primary>instance</primary><secondary>method</secondary></indexterm><indexterm role="cp"><primary>method</primary><secondary>instance method</secondary></indexterm><indexterm role="cp"><primary>polymorphism</primary></indexterm>
<para>Now observe the hierarchy of the Number class:
</para>
<abstract><literal>Number</literal>
   <literal>Float</literal>
      <literal>BoxedFloat64</literal>
      <literal>SmallFloat64</literal>
   <literal>Fraction</literal>
   <literal>Integer</literal>
      <literal>LargePositiveInteger</literal>
         <literal>LargeNegativeInteger</literal>
      <literal>SmallInteger</literal>
</abstract>
<indexterm role="cp"><primary>number</primary><secondary><literal>squared</literal></secondary></indexterm><para><literal>Float</literal>, <literal>Integer</literal> and <literal>Fraction</literal> are direct
descendants of the <literal>Number</literal> class. We have already learned about the
<literal>#squared</literal> message sent to integer and fraction instances:
</para>
<screen>16 squared &#8658; 256
(2 / 3) squared &#8658; 4/9
</screen>
<para>As the <literal>#squared</literal> message is sent to <literal>Integer</literal> and
<literal>Fraction</literal> instances, the associated <literal>squared</literal> method is
called an <firstterm>instance method</firstterm>. This method is defined in both the
<literal>Number</literal> and <literal>Fraction</literal> classes.
</para>
<indexterm role="cp"><primary>method</primary><secondary>returned value (explicit)</secondary></indexterm><indexterm role="cp"><primary>returned value</primary></indexterm>
<para>Let&#8217;s examine this method in <literal>Number</literal>:
</para><screen>Number&gt;&gt;squared
&quot;Answer the receiver multiplied by itself.&quot;
   ^ self * self
</screen>
<para>In an instance method source code, <literal>self</literal> refers to the
object itself, here it is the value of the number. The &#x2191; (also
<literal>^</literal>) symbol indicates to <emphasis>return</emphasis> the following value
<literal>self * self</literal>.  One might pronounce ^ as &#8220;return&#8221;.
</para>
<para>Now let&#8217;s examine this same method in <literal>Fraction</literal>:
</para><screen>Fraction&gt;&gt;squared
   ^ Fraction
      numerator: numerator squared
      denominator: denominator squared
</screen>
<para>Here a new fraction is instantiated with the original instance
numerator and denominator being squared.
This alternate <literal>squared</literal> method, ensures a fraction instance is
returned.
</para>
<indexterm role="cp"><primary>method</primary><secondary>overriding</secondary></indexterm><indexterm role="cp"><primary>overriding</primary></indexterm>
<para>When the message <literal>#squared</literal> is sent to a number, different methods are
executed depending on if the number is a fraction or another kind of
number. Polymorphism means that the Class of each instance decides
how it will respond to a particular message.
Here, the <literal>Fraction</literal> class
is <firstterm>overriding</firstterm> the <literal>squared</literal> method, defined above in the
class hierarchy.  If a method is not overridden, an inherited method
is invoked to respond to the message.
</para>
<indexterm role="cp"><primary>number</primary><secondary><literal>abs</literal></secondary></indexterm><para>Still in the <literal>Number</literal> hierarchy, let&#8217;s examine another example
of polymorphism with the <literal>#abs</literal> message:
</para>
<screen>-10 abs &#8658; 10
5.3 abs &#8658; 5.3
(-5 / 3) abs &#8658; 5/3
</screen>
<para>The implementation in <literal>Number</literal> does not need much
explanation. There is the <literal>#ifTrue:ifFalse:</literal> we have not yet
discussed so far, but the code is quite self-explanatory:
</para>
<screen>Number&gt;&gt;abs
&quot;Answer a Number that is the absolute value (positive magnitude) of the 
receiver.&quot;
   self &lt; 0
      ifTrue: [^ self negated]
      ifFalse: [^ self]
</screen>
<para>This implementation will do just fine for the <literal>Number</literal>
subclasses. Nevertheless, there are several classes overriding it for
specialized or optimized cases.
</para>
<indexterm role="cp"><primary>method</primary><secondary>returned value (implicit)</secondary></indexterm><para>For example, regarding large positive integer, <literal>abs</literal> is
empty. Indeed, <emphasis role="bold">in the absence of explicitly returned value, the
default returned value is the instance itself</emphasis>, in our situation the
<literal>LargePositiveInteger</literal> instance:
</para>
<screen>LargePositiveInteger&gt;&gt;abs
</screen>
<para>The <literal>LargeNegativeInteger</literal> knows it is negative and its absolute
value is itself but with its sign reversed, that is <literal>negated</literal>:
</para>
<screen>LargeNegativeInteger&gt;&gt;abs
   ^ self negated
</screen>   
<para>These two overriding methods are more efficient as they avoid unnecessary
checks and ifTrue/ifFalse branches. Polymorphism is often used to avoid
unnecessary checks and code branches.
</para>
<indexterm role="cp"><primary>keyboard shortcut</primary><secondary>implementors of (<userinput>Ctrl-m</userinput>)</secondary></indexterm>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
If you select the text <literal>abs</literal> in a Browser or
Workspace and right-click to get the context menu, you will find an
entry <command>Implementors of it</command>.  You can select this or use
<userinput>Ctrl-m</userinput> (<emphasis>i<emphasis role="bold">M</emphasis>plementors</emphasis>) to see how various methods for
<literal>#abs</literal> use polymorphism to specialize their answer to
produce the naturally expected result.
</para>
<para>As an object instance is modeled by its class, it is possible to
ask any object its
class with the <literal>#class</literal> message. Observe carefully the class
returned in lines 2 and 3:
</para>
<anchor id="askingClass"/>
<screen>1 class &#8658; SmallInteger 
(1/3) class &#8658; Fraction 
(6/2) class &#8658; SmallInteger 
(1/3) asFloat class  &#8658; SmallFloat64 
(1.0/3) class &#8658; SmallFloat64 
'Hello' class &#8658; String 
('Hello' at: 1) class &#8658; Character
</screen>

</sect1>
<sect1 label="" id="Explore-OOP-from-the-Browser">
<title>Explore OOP from the Browser</title>
<!-- explain mini panel | instance | ? | class | -->
<para>In <link linkend="ch02_002dbrowserDetailed">ch02-browserDetailed</link> of the Browser, below the classes pane, there are three
buttons:
</para>
<itemizedlist>
<listitem><para><command>instance</command>: to access the <emphasis role="bold">instance methods</emphasis> of
   the selected class. These methods apply to each and every instance
   of the class.  Each instance reacts to these.
</para>
</listitem><listitem><para><command>?</command>: to access to documentation &#8211; comment &#8211; of the
   selected class.
</para>
</listitem><listitem><para><command>class</command>: to access the <emphasis role="bold">class methods</emphasis> of the
   selected class. These methods are only accessible from the class
   itself.  Only the class object reacts to class methods.
</para>
</listitem></itemizedlist>
<para>Below these three buttons, observe the wide text pane, which provides
contextual information on the selected item.
</para>
<para>Again, Class methods apply to the Class itself.  Instance Methods apply for 
all instances modeled by the class.  We saw above that
the class <literal>Fraction</literal>
has a method <literal>#numerator:denominator:</literal> which is used to get a new instance of
a <literal>Fraction</literal>.  There is only one <literal>Fraction</literal> class object.
Messages like <literal>#squared</literal> and <literal>#abs</literal> are sent to any <literal>Fraction</literal>
instance, of which there are many.
</para>
<para>Up to now, we have attempted to be very careful with definitions, but 
you know that when we say &#8220;a fraction&#8221; we
mean &#8220;an instance of the class <literal>Fraction</literal>&#8221;.
From here our language will be more casual.
</para>
<anchor id="floatInfo"/>
<para><emphasis>When the
<literal>Float</literal> class is selected, what is the information provided by
the text pane?</emphasis>
</para>


<para>We have spent much time here because it is important to avoid
confusion between instance methods and class
methods. Let&#8217;s consider the <literal>Float</literal> class as an example.
</para>
<indexterm role="cp"><primary>method</primary><secondary>class method</secondary></indexterm>
<para><emphasis role="bold">Class Methods.</emphasis> In <link linkend="ch03_002dfloatClassSide">ch03-floatClassSide</link> the methods listed are
class side, in the browser the <command>class</command> button is pressed to see this
list.
</para>
<anchor id="ch03_002dfloatClassSide"/>
<inlinemediaobject><imageobject><imagedata fileref="ch03-floatClassSide.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>From a Workspace, these methods are called with the message name sent
directly to the class:
</para>
<screen>Float e
&#8658; 2.718281828459045
Float epsilon
&#8658; 2.220446049250313e-16
Float fmax
&#8658; 1.7976931348623157e308
</screen>

<indexterm role="cp"><primary>keyboard shortcut</primary><secondary>code completion (<userinput>tab</userinput>)</secondary></indexterm>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
You have noticed that text typed into the Workspace is
colored and highlighted based on what you type.  We will discuss this
below when we talk about the Smalltalk language, but the idea is to be
helpful.  If you start to type a word the Cuis Workspace knows about,
you can press the <userinput>tab</userinput> key and get a set of choices for
completion of the word.  Try typing <literal>Float epsi</literal> and
pressing <userinput>tab</userinput>.  You can then press <userinput>enter</userinput> and should see
<literal>Float epsilon</literal>.  Click elsewhere on the Workspace to make
this menu go away.
</para>
<para>Nevertheless, you can not send a class message to an instance of
<literal>Float</literal>, it throws an error and opens the red debugger
window. Just close the debug window for now to ignore the result.
</para>
<screen>3.14 pi
&#8658; MessageNotUnderstood: SmallFloat64&gt;&gt;pi
Float pi e
&#8658; MessageNotUnderstood: SmallFloat64&gt;&gt;e
</screen>
<para>Often these class methods are used to access constant values as seen in
the previous example or to create a new instance:
</para>
<screen>OrderedCollection new
&#8658; Create a new empty ordered collection
Fraction numerator: 1 denominator: 3
&#8658; 1/3 &quot;a fraction instance&quot;
Float new
&#8658; 0.0
Float readFrom: '001.200'
&#8658; 1.2 
Integer primesUpTo: 20
&#8658; #(2 3 5 7 11 13 17 19) 
</screen>
<indexterm role="cp"><primary>method</primary><secondary>instance method</secondary></indexterm>
<para><emphasis role="bold">Instance methods.</emphasis> In <link linkend="ch03_002dfloatInstanceSide">ch03-floatInstanceSide</link>, the methods
listed are instance side, in the browser the <command>instance</command> button
is pressed to see this list.
</para>
<anchor id="ch03_002dfloatInstanceSide"/>
<inlinemediaobject><imageobject><imagedata fileref="ch03-floatInstanceSide.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>In a Workspace, these methods are called with the message name sent
directly to an instance:
</para>
<screen>-10.12 abs &#8658; 10.12
3.14 cos &#8658; -0.9999987317275395
-10.12 * 2 &#8658; -20.24
</screen>
<para>Instance method messages cannot be sent directly to a class, you need
to instantiate an object first:
</para>
<screen>Float cos
&#8658; MessageNotUnderstood: Float class&gt;&gt;cos
Fraction squared
&#8658; MessageNotUnderstood: Fraction class&gt;&gt;squared
OrderedCollection add: 10
&#8658; MessageNotUnderstood: OrderedCollection class&gt;&gt;add:
</screen>
<para>Of course, you can mix both class and instance methods, as long as you
send the message to the appropriate class or instance:
</para>
<screen>Float pi cos
&#8658; -1.0
Float e ln
&#8658; 1.0 
(Fraction numerator: 4 denominator: 5) squared
&#8658; 16/25
OrderedCollection new add: Float pi; add: Float e; yourself
&#8658; an OrderedCollection(3.141592653589793 2.718281828459045) 

</screen>
<para>Here is another example from Spacewar! mixing class and instance
methods. This portion of code updates the orientation of a torpedo
according to its velocity vector:
</para>
<anchor id="torpedoOrientation"/>
<screen>self rotation: (velocity y arcTan: velocity x) + Float halfPi
</screen>

<para>With this brief introduction to the system browser, you are now
equipped to explore the system classes.
</para>
</sect1>
<sect1 label="" id="Cuis-system-classes">
<title>Cuis system classes</title>
<para>As we noted above, Cuis-Smalltalk is a pure object-oriented environment. This 
means that every single entity you are dealing with is represented
as an instance of a class written in Cuis-Smalltalk itself. As a direct
consequence, Cuis-Smalltalk is mostly written in itself.  This means
the entire system is open to you to learn and play with.
</para>
<para>What we call system classes are models of fundamental objects. In
other programming languages, these would be implemented in
that language&#8217;s standard library.
</para>
<para>In a truly open system, there is no real distinction between system
classes and user classes, but it will help us to draw a boundary
around the most used objects. Let&#8217;s have a brief introduction to some
fundamental Smalltalk classes and their most important methods.
</para>
<para>In the upper left pane of the Browser, Categories of classes important
to start with are:
</para>

<itemizedlist>
<listitem><para><emphasis role="bold">Kernel-Numbers</emphasis>. Related to the different number
   representations and calculations, including mathematics functions,
   conversion, intervals, and even iterations.
</para>   
</listitem><listitem><para><emphasis role="bold">Kernel-Text</emphasis>. Related to character and string as
   collection of characters.
</para>
</listitem><listitem><para><emphasis role="bold">Collections-Abstract</emphasis>, <emphasis role="bold">Collections-Unordered</emphasis>,
   <emphasis role="bold">Collections-Sequenceable</emphasis>, <emphasis role="bold">Collections-Arrayed</emphasis>.
   Related to Array, Dictionary, Set, OrderedCollection and many more.
   This category includes common accessing, enumeration, mathematical
   functions, and sorting.
</para>
</listitem></itemizedlist>
</sect1>
<sect1 label="" id="Kernel_002dNumbers">
<title>Kernel-Numbers</title>
<indexterm role="cp"><primary>method</primary><secondary>category</secondary></indexterm>
<para>The top hierarchy <literal>Number</literal> class shows most of the behaviors
inherited by the subclasses as <literal>Float</literal>, <literal>Integer</literal> and
<literal>Fraction</literal>. The Smalltalk way to learn about a behavior is to
point the System Browser toward a top hierarchy class and explore
the method categories.
</para>
<para>Let&#8217;s suppose we want to round a float number. In <literal>Number</literal>, we
explore the <emphasis role="bold">Truncation and round off</emphasis> method category to
discover several behaviors. The next thing to do is to test these
messages in a Workspace to discover the one we are searching for:
</para>
<indexterm role="cp"><primary>number</primary><secondary><literal>roundTo:</literal></secondary></indexterm><indexterm role="cp"><primary>number</primary><secondary><literal>roundUpTo:</literal></secondary></indexterm>
<anchor id="roundingNumbers"/>
<screen>1.264 roundTo: 0.1 &#8658; 1.3 
1.264 roundTo: 0.01 &#8658; 1.26 
1.264 roundUpTo: 0.01 &#8658; 1.27
1.264 roundTo: 0.001 &#8658; 1.264
</screen>


<indexterm role="cp"><primary>loop</primary><secondary>for</secondary></indexterm><indexterm role="cp"><primary>loop</primary><secondary>for</secondary><tertiary>step</tertiary></indexterm><indexterm role="cp"><primary>for loop</primary><see>loop</see></indexterm>
<indexterm role="cp"><primary>number</primary><secondary><literal>to:do:</literal></secondary></indexterm><indexterm role="cp"><primary>number</primary><secondary><literal>to:do:by</literal></secondary></indexterm>
<para>Number is a very strange place to look for an indexed loop in a given
interval. Nevertheless, an interval is defined by start and stop
numbers. In the <literal>Number</literal> class, the method category
<emphasis role="bold">intervals</emphasis> reveals related behaviors. These methods work
polymorphically with most kinds of numbers:
</para>
<anchor id="intervalLoops"/>
<screen>1 to: 10 do: [:i | Transcript show: 1 / i; space]
&#8658; 1 (1/2) (1/3) (1/4) (1/5) (1/6) (1/7) (1/8) (1/9) (1/10)

1 to: 10 by: 2 do: [:i | Transcript show: 1 / i; space]
&#8658; 1 (1/3) (1/5) (1/7) (1/9)

1/10 to: 5/3 by: 1/2 do: [:i | Transcript show: i; space]
&#8658; (1/10) (3/5) (11/10) (8/5) (1/10) (3/5) (11/10) (8/5) 

Float pi to: 5 by: 1/3 do: [:i | Transcript show: i; space]
&#8658; 3.141592653589793 3.4749259869231266 3.80825932025646
4.141592653589793 4.474925986923126 4.808259320256459
</screen>

<indexterm role="cp"><primary>loop</primary><secondary>repeat</secondary></indexterm><indexterm role="cp"><primary>repeat</primary><see>loop</see></indexterm>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>timesRepeat:</literal></tertiary></indexterm>
<para>Now, in the <literal>Integer</literal> class, explore the method category
<command>enumerating</command>, to find <literal>timesRepeat:</literal>. When a
portion of code needs to be executed several times
<footnote><para>More strictly, to be repeated an integer number of times.</para></footnote>, without
the need for an index, the <literal>#timesRepeat:</literal> message is sent to an
integer. We already saw this variant in a previous section of this
chapter.  Throwing a 6-face die 5 times can be simulated with
an integer:
</para>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>atRandom</literal></tertiary></indexterm><anchor id="playingDice"/>
<screen>5 timesRepeat: [Transcript show: 6 atRandom; space]
&#8658; 1 2 4 6 2
</screen>

<para>Note: Expect a different result each time.
</para>
<indexterm role="cp"><primary><literal>Interval</literal></primary></indexterm>
<indexterm role="cp"><primary>number</primary><secondary>interval</secondary></indexterm><indexterm role="cp"><primary>number</primary><secondary><literal>to:</literal></secondary></indexterm><indexterm role="cp"><primary>number</primary><secondary><literal>to:by:</literal></secondary></indexterm>
<para>Intervals of numbers can be defined on their own, for future use:
</para>
<anchor id="interval"/>
<screen>1 to: 10
&#8658; (1 to: 10)

1 to: 10 by: 2
&#8658; (1 to: 9 by: 2)
</screen>

<para>Intervals work with other kinds of objects such as <literal>Character</literal>s:
</para><screen>$d to: $h
&#8658; #($d $e $f $g $h)
</screen>
<para>In fact, an interval is an object of its own. It is a sort of
collection:
</para>
<screen>(1 to: 10) class
&#8658; Interval

(1 to: 10 by: 2) squared
&#8658; #(1 9 25 49 81)

(1 to: 10) atRandom
&#8658; 4 &quot;different result each time&quot;
</screen>
<para>In Spacewar!, when a ship is destroyed it is teleported to a random
position in the square gameplay area. Intervals are handy to pick 
random coordinates. In the example below, the variable
<literal>randomCoordinate</literal> holds a block of code &#8211; called an anonymous
function in other languages. It picks a random value in the
interval consisting of the gameplay area&#8217;s left and right extents:
</para>
<anchor id="teleportShipInterval"/>
<screen>randomCoordinate := [(area left to: area right) atRandom].
aShip
   velocity: 0 @ 0;
   morphPosition: randomCoordinate value @ randomCoordinate value
</screen>


<anchor id="cosTable"/>
<para><emphasis>Compute the cosine values in
the interval [0 ; 2PI]&#44; each 1/10. Output the result in the transcript.</emphasis>
</para>


<!-- Integer bits representation and manipulation -->
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary>base</tertiary></indexterm><para>Integer numbers are represented in different bases when prefixed with
the base and &#8220;r&#8221;. The <command>r</command> stands for radix, the base root by
which the following number is interpreted.
When executing and printing <userinput>Ctrl-p</userinput> on such a
number, it is immediately printed in the decimal base:
</para>
<anchor id="integerBase"/>
<screen>2r1111 &#8658; 15
16rF &#8658; 15
8r17 &#8658; 15
20rF &#8658; 15
10r15 &#8658; 15
</screen>

<para>Writing numbers as Mayans or Babylonians<footnote><para>Base 20 and 60
number representations are not exclusive to these civilisations,
although they are the most documented use cases.</para></footnote>:
</para>
<anchor id="countingAncients"/>
<screen>&quot;The Babylonians&quot;
60r10 &#8658; 60
60r30 &#8658; 180
60r60 &#8658; 360
60r30 + 60r60 &#8658; 540 
(60r30 + 60r60) printStringRadix: 60 &#8658; '60r90' 

&quot;The Mayans&quot;
20r10 &#8658; 20
20r40 &#8658; 80 &quot;pronounced 4-twenties in some languages&quot;
20r100 &#8658; 400
</screen>

<indexterm role="cp"><primary>bits shifting</primary></indexterm>
<para>Because of the nature of a number represented in base 2, shifting its
bits left and right is equivalent to multiplying by 2 and dividing by
2:
</para>
<anchor id="shiftBits"/>
<screen>(2r1111 &lt;&lt; 1) printStringBase: 2 &#8658; '11110'
2r1111 &lt;&lt; 1 &#8658; 30
(2r1111 &gt;&gt; 1) printStringBase: 2 &#8658; '111'
2r1111 &gt;&gt; 1 &#8658; 7
</screen>

<anchor id="multiplyBy1024"/>
<para><emphasis>How would you multiply
the integer 360 by 1024&#44; without using the multiplication operation?</emphasis>
</para>



<bridgehead renderas="sect2">Hiatus with decimal numbers</bridgehead>
<indexterm role="cp"><primary>number</primary><secondary>decimal</secondary></indexterm>
<para>We saw decimal numbers are written with a dot &#8220;.&#8221; to separate the
integer and the decimal parts: <literal>1.5</literal>, <literal>1235.021</literal>
or <literal>0.5</literal>. The number <literal>0.0000241</literal> is more easily
written with the scientific notation <literal>2.41e-5</literal>; it means 2
preceded by 5 zeros or 2 as the fifth digit after the decimal dot.
</para>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
Computers encode and store decimal numbers imprecisely. You
need to be aware of that when doing computation and equality
comparisons. Many systems hide these errors because they are very tiny
errors. Cuis-Smalltalk does not hide this inaccuracy.  There is good
information about this in the class comment of <literal>Float</literal>.
</para>
<anchor id="FloatPrecision"/>
<screen>0.1 + 0.2 - 0.3
&#8658; 5.551115123125783e-17
</screen>

<para>In <link linkend="FloatPrecision">FloatPrecision</link>, the returned value should be zero but it is
not the case. The computer returns <literal>5.55e-17</literal>, or
<literal>0.0000000000000000555</literal>, it is very close to zero, but there
is an error.
</para>
<anchor id="exeFloatPrecision"/>
<para><emphasis>Give 3 calculations showing errors compared
to the expected results.</emphasis>
</para>


<para>When accuracy is mandatory use the Rational Numbers
representation in Cuis-Smalltalk.
</para>
<indexterm role="cp"><primary>number</primary><secondary>rational (fraction)</secondary></indexterm>
<para>A rational number is written with the division symbol between two
integers: do <userinput>Ctrl-p</userinput> on <literal>5/2</literal> &#8658;
<literal>5/2</literal>. Cuis-Smalltalk returns a rational number, it does not compute a
decimal.
</para>
<anchor id="exeZeroDivide"/>
<para><emphasis>What happens when
executing this code</emphasis> <literal>5/0</literal><emphasis>?</emphasis>
</para>


<para>Let&#8217;s come back to our computer&#8217;s dyscalculia with decimal numbers. When
using the rational numbers, the <link linkend="FloatPrecision">FloatPrecision</link> becomes:
</para>
<anchor id="FractionPrecision"/>
<screen>(1/10) + (2/10) - (3/10)
&#8658; 0
</screen>

<para>This time we have the expected result. Under the covers, the computer
only does the calculations with integer components so no roundoff
results. This is a fine example where solving some problems requires a
paradigm shift.
</para>
<anchor id="exeFractionPrecision"/>
<para><emphasis>Return to
<link linkend="exeFloatPrecision">exeFloatPrecision</link> and use rational numbers to represent decimal
numbers. The errors will be resolved.</emphasis>
</para>


<indexterm role="cp"><primary>number</primary><secondary>conversion</secondary></indexterm><para>Cuis-Smalltalk knows how to convert a decimal number to a fraction, by
sending the message <literal>#asFraction</literal>. We already acknowledged the
computer&#8217;s dyscalculia with decimal numbers, this is why when
asking for a fraction representation we have this strange answer. The
internal computer representation of <literal>1.3</literal> is not exactly as
it seems:
</para>
<screen>(13/10) asFloat
&#8658; 1.3

(13/10) asFloat asFraction
&#8658; 5854679515581645/45035996273704
</screen>
</sect1>
<sect1 label="" id="Kernel_002dText">
<title>Kernel-Text</title>
<para>Notably, this category contains classes <literal>Character</literal>, <literal>String</literal> and <literal>Symbol</literal>. <literal>String</literal> instances are collections of <literal>Character</literal> instances. All these are limited to the small <acronym>ASCII</acronym> character set. The corresponding classes that can handle the much larger Unicode character set are <literal>UnicodeCodePoint</literal>, <literal>UnicodeString</literal>, and <literal>UnicodeSymbol</literal>. As stated before, the Unicode classes can also handle <acronym>ASCII</acronym>, and they are interchangeable. You usually don&#8217;t need to care about which flavor (<acronym>ASCII</acronym> or Unicode) an instance actually is.
</para>
<indexterm role="cp"><primary>character</primary></indexterm>
<para><emphasis role="bold">Character/UnicodeCodePoint.</emphasis> An individual character is written prefixed with a &#8220;$&#8221;, for example: <literal>$A</literal> or <literal>$φ</literal>. It can be defined with the class side method <literal>codePoint:</literal>. Note, however, that you can ask Character only about valid Characters. It is generally safer to ask UnicodeCodePoint instead:
</para>
<screen>Character codePoint: 65 &#8658; $A
Character codePoint: 966 &#8658; nil
UnicodeCodePoint codePoint: 966 &#8658; $φ
</screen>
<para>There are class-side methods for nonprintable characters:
<literal>Character tab</literal>, <literal>Character lf</literal>, etc.
</para>
<para>Additionally, <literal>UnicodeCodePoint</literal> defines a <literal>#namedCharactersMap</literal>, that lets you enter many Unicode characters easily, like:
</para>
<para><literal>\leftright</literal> then press spacebar.
</para>
<para>As each string is a collection of characters, when iterating a string we
can use the <literal>Character</literal> instance methods:
</para>
<anchor id="apples12"/>
<screen>'There are 12 apples.' select: [:c |c isDigit].
&#8658; '12'
</screen>

<anchor id="selectApples"/>
<para><emphasis>Modify <link linkend="apples12">apples12</link> to
reject the numeric characters.</emphasis>
</para>


<indexterm role="cp"><primary>method</primary><secondary>category</secondary></indexterm><indexterm role="cp"><primary>string</primary></indexterm>
<para><emphasis role="bold">String.</emphasis> <literal>String</literal> is a very large class, it comes with
more than 200 methods. It is useful to browse these method categories
to see common ways to group methods.
</para>
<para>Sometimes you may not see a category related to what you&#8217;re looking for right away.
</para>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
If you expect a method selector to start with a specific letter,
click-select the <command>-- all --</command> method category, then move the
cursor over the pane listing the method names.  Press this character,
e.g. <literal>$f</literal>.  This will scroll the method pane to the first
method name starting with an &#8220;f&#8221;.
</para>
<para>Consider the case where you need to search for a substring, a string within a
string: when browsing
the <literal>String</literal> class, search for method categories named like
<emphasis role="bold">finding...</emphasis> or <emphasis role="bold">accessing</emphasis>. There you find a family of
<literal>findXXX</literal> methods. Read the comments at the beginning of these
methods:
</para>
<screen>findString: subString
   &quot;Answer the index of subString within the receiver, starting at
   start. If the receiver does not contain subString, answer 0.&quot;
   ^ self findString: subString startingAt: 1.
</screen>
<para>Or:
</para>
<screen>findString: key startingAt: start caseSensitive: caseSensitive
   &quot;Answer the index in this String at which the substring key first
   occurs, at or beyond start.  The match can be case-sensitive or
   not.  If no match is found, zero will be returned.&quot;
   ../..
</screen>
<para>Then experiment with the potentially interesting messages in a workspace:
</para>
<screen>'I love apples' findString: 'love' &#8658; 3 &quot;match starts at position 3&quot;
'I love apples' findString: 'hate'
&#8658;  0 &quot;not found&quot;
'We humans, we all love apples' findString: 'we'
&#8658; 12 
'We humans, we all love apples'
   findString: 'we'
   startingAt: 1
   caseSensitive: false
&#8658; 1 
'we humans, we all love apples' findString: 'we'
&#8658; 1 
'we humans, we all love apples' findString: 'we' startingAt: 2
&#8658; 12
</screen>
<para>Following these paths will, most of the time, lead you toward the answer
you are looking for.
</para>
<!-- an exercise to find a method given a behavior -->
<anchor id="formatString"/>
<para><emphasis>We want to format a
string of the form &#8217;Joe bought XX apples and YY oranges&#8217; to the form
&#8217;Joe bought 5 apples and 4 oranges&#8217;. What message should be used?</emphasis>
</para>


</sect1>
<sect1 label="" id="Spacewar_0021-States-and-Behaviors">
<title>Spacewar! States and Behaviors</title>

<sect2 label="">
<title>The game states</title>
<para>After defining the classes involved in the game design, we now define
 several states of these classes:
</para>
<itemizedlist>
<listitem><para>A <literal>SpaceWar</literal> instance representing the gameplay needs to
 know about the <literal>centralStar</literal>, the <literal>ships</literal>, the
 fired <literal>torpedoes</literal>, and its <literal>color</literal>.
</para>
</listitem><listitem><para>A <literal>CentralStar</literal> has a <literal>mass</literal> state. It is
 necessary to compute the gravity force applied to a given ship.
</para>
</listitem><listitem><para>A <literal>SpaceShip</literal> instance knows about its <literal>name</literal>,
 its <literal>position</literal> coordinates, its <literal>heading</literal> angle,
 its <literal>velocity</literal> vector, its <literal>fuel</literal> gauge, its
 count of the available <literal>torpedoes</literal>, its <literal>mass</literal>
 and its <literal>acceleration</literal> engine boost.
</para>
</listitem><listitem><para>A <literal>Torpedo</literal> has <literal>position</literal>,
 <literal>velocity</literal> and <literal>lifeSpan</literal> states.
</para>
</listitem></itemizedlist>
<para>We need to explain the mathematical nature of these states, and then
discuss their object representation in the instance variables of our
classes.
</para>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
In the following sections, to ease reading we will write
&#8220;the variable <literal>myVar</literal> is a <literal>String</literal>&#8221; instead of the
correct but cumbersome &#8220;the instance variable <literal>myVar</literal> is a
reference to a <literal>String</literal> instance&#8221;.
</para>
<bridgehead renderas="sect1"><literal>SpaceWar</literal></bridgehead>
<para>This object is the entry into the game. We want a meaningful class
name. Its instance variables are the involved protagonists of the
game:
</para>
<itemizedlist>
<listitem><para><literal>centralStar</literal> is the unique <literal>CentralStar</literal> of
  the game play. We need to know about it to request its mass.
</para>
</listitem><listitem><para><literal>ships</literal> is a collection of the two player ships. It
  is an <literal>Array</literal> instance, its size is fixed to two elements.
</para>  
</listitem><listitem><para><literal>torpedoes</literal> is a collection of the fired torpedoes
  in the gameplay. As this quantity is variable, a dynamic
  <literal>OrderedCollection</literal> makes sense.
</para>
</listitem></itemizedlist>
<bridgehead renderas="sect1"><literal>CentralStar</literal></bridgehead>

<para>Its unique instance variable, <literal>mass</literal>, is a number, most likely
an <literal>Integer</literal>.
</para>
<bridgehead renderas="sect1"><literal>SpaceShip</literal></bridgehead>

<para>The spaceship is the most complex object, some clarifications
regarding its variables are needed.
</para>
<itemizedlist>
<listitem><para><literal>name</literal> is a <literal>String</literal>.
</para>
<indexterm role="cp"><primary><literal>Point</literal></primary></indexterm>
<indexterm role="cp"><primary>coordinates</primary></indexterm>

</listitem><listitem><para><literal>position</literal> is a 2D screen coordinate, a
  location. Smalltalk uses the <literal>Point</literal> class to represent
  such objects. It understands many mathematics operations as
  operations on vectors; very useful for mechanical calculations.
</para>
<para>A point is easily instantiated with the binary message <literal>#@</literal> send
  to a number with another number as its argument: <literal>100 @
  200</literal> returns a <literal>Point</literal> instance representing the
  coordinates (x;y) = (100;200).
</para>
<para>The ship&#8217;s <literal>position</literal> is regularly recomputed according to
  the law of the Galilean reference frame. The computation depends on
  the ship&#8217;s velocity, it&#8217;s current engine boost, and the gravity pull
  of the central star.
</para> 
</listitem><listitem><para><literal>heading</literal> is an angle in radians, the direction
  where the ship&#8217;s nose is pointing.  It is therefore a <literal>Float</literal>
  number. At the game&#8217;s start, the ships are oriented to the top, the
  <literal>heading</literal> value is then -pi/2 radians; the oy axis is
  oriented from the top to the bottom of the screen.
</para>  
</listitem><listitem><para><literal>velocity</literal> is the vector representing the
  instantaneous speed of the ship. It is a <literal>Point</literal> instance.
</para>  
</listitem><listitem><para><literal>fuel</literal> is the gauge, as long as it is not zero, the
  player can ignite the ship&#8217;s rocket engine to provide acceleration to move
  around and to counter the central star&#8217;s gravity pull. It is an
  integer number.
</para>  
</listitem><listitem><para><literal>torpedoes</literal> is the quantity of available torpedoes
  the player can fire. It is an <literal>Integer</literal> number.
</para>  
</listitem><listitem><para><literal>mass</literal> is an <literal>Integer</literal> representing the ship
  mass.
</para>  
</listitem><listitem><para><literal>acceleration</literal> is the intrinsic ship acceleration
  norm provided when the ship&#8217;s rockets are ignited. It is therefore
  an <literal>Integer</literal> number.
</para>
</listitem></itemizedlist>
<para>A few words regarding the Euclidean coordinates: the origin of our
orthonormal frame is the central star, its first vector is oriented
toward the right of the screen, and the second one towards the top of
the screen. This choice eases the computation of the ship&#8217;s acceleration,
velocity and position.  More on this below.
</para>
<bridgehead renderas="sect1"><literal>Torpedo</literal></bridgehead>
<para>A torpedo is launched or &#8220;fired&#8221; from a ship with an initial
velocity related to the ship&#8217;s velocity. Once the torpedo life span
counter reaches zero, it self-destructs.
</para>
<itemizedlist>
<listitem><para><literal>position</literal> is a 2D screen coordinate, a
  <literal>Point</literal> instance. Unlike the ship, it does not accelerate based
  on the gravity pull of the central star. Indeed, a torpedo does not
  come with a mass state.  For our purposes, it is essentially
  zero. Its position over time only depends on the torpedo velocity
  and its initial acceleration.
</para>
</listitem><listitem><para><literal>heading</literal> is an angle in radians, the direction
  where the torpedo nose is pointing. Its value matches the ship
  heading when fired, it is therefore a <literal>Float</literal> number too.
</para>
</listitem><listitem><para><literal>velocity</literal> is a vector representing the
  instantaneous speed of the torpedo. It is constant over the torpedo&#8217;s
  lifespan. Again velocity is kept as a <literal>Point</literal> instance.
</para>
</listitem><listitem><para><literal>lifeSpan</literal> is an integer number counter, when it
  reaches zero the torpedo self-destructs.
</para>
</listitem></itemizedlist>
</sect2>
<sect2 label="">
<title>Instance variables</title>
<!-- show on one class declaration how to put the variable -->
<para>In the previous chapter, we explained how to define the four classes
<literal>SpaceWar</literal>, <literal>CentralStar</literal>, <literal>SpaceShip</literal> and
<literal>Torpedo</literal>. In this section, we will add to these definitions
the instance variables &#8211; states &#8211; discussed above.
</para>
<para>To add the variables to the <literal>Torpedo</literal> class, from the Browser,
select this class. Next, add the variable names to the
<literal>instanceVariableNames:</literal> keyword, separated by one space
character. Finally, save the updated class definition with
<userinput>Ctrl-s</userinput> shortcut:
</para>
<anchor id="torpedoClassVariables"/>
<screen>Object subclass: #Torpedo
   instanceVariableNames: 'position heading velocity lifeSpan'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>

<anchor id="spacewarVar"/>
<para><emphasis>Add the instance variables we discussed earlier to the
<literal>SpaceWar</literal>, <literal>CentralStar</literal> and <literal>SpaceShip</literal> classes.</emphasis>
</para>



</sect2>
<sect2 label="">
<title>Behaviors</title>
<indexterm role="cp"><primary>message</primary><secondary>setter</secondary></indexterm><indexterm role="cp"><primary>message</primary><secondary>getter</secondary></indexterm><para>Some of these states need to be accessed from other entities:
</para>
<itemizedlist>
<listitem><para>When initializing a spaceship, we want to set its name
  with a keyword message categorised as a <firstterm>setter</firstterm>:
  <literal>ship name: 'The needle'</literal>.
</para>  
</listitem><listitem><para>To compute the gravity force applied to an object owning a
  mass, we want to get its value with a unary message categorised as
  a <firstterm>getter</firstterm>: <literal>star mass * ship mass</literal>.
</para>  
</listitem></itemizedlist>
<para>To write these behaviors in the Browser, first select the class then
the method category you want &#8211; when none, select <command>-- all
--</command>.
</para>
<para>In the code pane below appears a method template:
</para>
<anchor id="methodTemplate"/>
<screen>messageSelectorAndArgumentNames
   &quot;comment stating purpose of message&quot;
   | temporary variable names |
   statements
</screen>

<para>It describes itself as:
</para>
<orderedlist numeration="arabic">
<listitem><para><emphasis role="bold">Line 1.</emphasis> It is a mandatory method name, the same as
   the message.
</para>
</listitem><listitem><para><emphasis role="bold">Line 2.</emphasis> An optional comment surrounded by double
   quote.
</para>
</listitem><listitem><para><emphasis role="bold">Line 3.</emphasis> An optional list of variables local to the
   method, surrounded by pipe characters.
</para>
</listitem><listitem><para><emphasis role="bold">Line 4.</emphasis> A subsequent list of message sendings and
   assignments.
</para>
</listitem></orderedlist>
<para>The getter <literal>mass</literal> on <literal>SpaceShip</literal> is written as:
</para>
<screen>SpaceShip&gt;&gt;mass
   ^ mass
</screen>
<para>The <literal>SpaceShip&gt;&gt;</literal> part is not valid code and should not be
written in the Browser. It is a text convention to inform the reader
the subsequent method is from the <literal>SpaceShip</literal> class.
</para>
<anchor id="spaceShipGetters"/>
<para><emphasis>Write the
<literal>SpaceShip</literal> getter messages for its
<literal>position</literal>&#44; <literal>velocity</literal> and <literal>mass</literal>
attributes.</emphasis>
</para>


<indexterm role="cp"><primary>variable</primary><secondary>assignment</secondary></indexterm><indexterm role="cp"><primary>variable</primary><secondary>:=</secondary></indexterm><indexterm role="cp"><primary>variable</primary><secondary>&#x2190;</secondary></indexterm>
<para>Some instance variables need to be set from another entity,
so a <firstterm>setter</firstterm> keyword message is necessary.
To set the name of a space ship we add the
following method:
</para>
<screen>SpaceShip&gt;&gt;name: aString
   name := aString
</screen>
<para>The := character is an assignment, it means the
<literal>name</literal> instance variable is bound to the <literal>aString</literal>
object. 
To type in this symbol type <keycap>_</keycap> then space,
Cuis-Smalltalk will turn it into the left arrow symbol.  Alternatively write
<literal>name := aString</literal>.  One might pronounce := as &#8220;gets&#8221;.
</para>
<para>Since <literal>name</literal> is an instance variable, each instance method
knows to use the box for the name.  The meaning here is that we are
placing the value of the <literal>aString</literal> argument into the
instance&#8217;s box called <literal>name</literal>.
</para>
<para>Since each instance variable box can hold an object of any class, we
like to name the argument to show that we intend that the
<literal>name</literal> variable should hold a string, an instance of the
<literal>String</literal> class.
</para>
<anchor id="spaceShipSetters"/>
<para><emphasis>Ship <literal>position</literal> and <literal>velocity</literal>, as well as
torpedo <literal>heading</literal> will need to be set at game start-up or
when a ship jumps in hyperspace.  Write the appropriate setters.</emphasis>
</para>


<para>Observe how we do not have a setter message for the spaceship
<literal>mass</literal> attribute. Indeed, it does not make sense to change
the mass of a ship from another object. In fact, if we consider both
player ships to be of equal mass, we should remove the <literal>mass</literal>
variable and edit the <literal>mass</literal> method to return a literal number:
</para>
<anchor id="methodConstant"/>
<screen>SpaceShip&gt;&gt;mass
   ^ 1
</screen>

<para>On the other hand, we could also consider the <literal>mass</literal> to
depend on the consumed fuel and torpedoes. After all, 93&#160;% of
Saturn&#160;V rocket&#8217;s mass was made up of its fuel. We will discuss
more about that later in the <link linkend="artRefactoring">chapter about
refactoring</link>.
</para>

<anchor id="simpleControls"/><bridgehead renderas="sect3">Controls</bridgehead>
<para>A spaceship controlled by the player understands messages to adjust
its direction and acceleration<footnote><para>The velocity is a consequence
of the accelerations applied to the spaceship.</para></footnote>:
</para>
<para><emphasis role="bold">Direction.</emphasis> The ship&#8217;s heading is controlled with the
  <literal>#left</literal> and <literal>#right</literal> messages. The former decrements the
  <literal>heading</literal> by 0.1 and the latter increments it by 0.1.
</para>
<anchor id="shipHeading"/>
<para><emphasis>Write
  two methods named <literal>left</literal> and <literal>right</literal> to shift the ship
  heading of 0.1 according to the indications above.</emphasis>
</para>


<para><emphasis role="bold">Acceleration.</emphasis> When the <literal>#push</literal> message is sent to
  the ship, the engines are ignited, and an internal acceleration of 10
  units of acceleration are applied to the ship. When the <literal>#unpush</literal>
  message is sent, the acceleration stops.
</para>
<anchor id="shipAcceleration"/>
<para><emphasis>Write two methods named <literal>push</literal> and <literal>unpush</literal> to
  adjust the ship&#8217;s inner acceleration according to the indications
  above.</emphasis>
</para>



</sect2>
<sect2 label="">
<title>Initializing</title>
<indexterm role="cp"><primary><literal>initialize</literal></primary></indexterm>
<para>When an instance is created, for example, <literal>SpaceShip new</literal>, it
is automatically initialized: the message <literal>#initialize</literal> is sent to
the newly created object and its matching <literal>initialize</literal> instance
side method is called.
</para>
<para>The initializing process is useful to set the default values of the
instance variables. When we create a new space ship object we want to
set its default position, speed, and acceleration:
</para>
<anchor id="initSpaceShip"/>
<screen>SpaceShip&gt;&gt;initialize
   super initialize.
   velocity := 0 @ 0.
   position := 100 @ 100.
   acceleration := 0
</screen>

<indexterm role="cp"><primary><literal>super</literal></primary></indexterm>
<para>In the method <link linkend="initSpaceShip">initSpaceShip</link>, observe the first line
<literal>super initialize</literal>. When a message is sent to
<literal>super</literal>, it refers to the superclass of the class&#8217;s method
using <literal>super</literal>. So far, the <literal>SpaceShip</literal> parent class is
<literal>Object</literal>, therefore the <literal>Object&gt;&gt;initialize</literal> method is
called first for initialization.
</para>
<para>When created, a spaceship is positioned to the top and right of the
central star. It has no velocity nor internal acceleration &#8211; only the
gravity pull of the central star.  Its nose points in direction of the
top of the game display.
</para>
<para>You probably noticed there is no code to initialize the
<literal>heading</literal>, something like <literal>heading := Float
halfPi negated</literal> to orient the ship in the direction of the top of the
screen. The truth is we don&#8217;t need the <literal>heading</literal> attribute,
this information will be provided by the class <literal>Morph</literal> used
later as a parent class of <literal>SpaceShip</literal> and <literal>Torpedo</literal>.  At
this time, the <literal>heading</literal> variable will be removed and we
will define the heading behavior with the appropriate <literal>heading</literal>
and <literal>heading:</literal> methods.
</para>
<anchor id="initCentralStar"/>
<para><emphasis>Write the
method to initialize the central star with 8000 units of mass.</emphasis>
</para>

<!-- -->
</sect2>
</sect1>
</chapter>
<chapter label="" id="The-Collection-Way-of-Life">
<title>The Collection Way of Life</title>

<blockquote><attribution>Alan Perlis</attribution>
<para>Simplicity does not precede complexity, but follows it.
</para></blockquote>



<para>Since the concept&#8217;s introduction in the 70s, collections and their associated
iterators have been important programming elements of Smalltalk. Correctly
used, they improve both code compactness and code understanding; two
paradigms that may seem antagonistic. Since then, these innovations
have percolated into many popular programming languages.
</para>

<sect1 label="" id="String-_002d_002d-a-particular-collection">
<title>String &#8211; a particular collection</title>
<!-- browse the hierarchy to find more inherited behavior, Should this -->
<!-- be documented in browser section, or just there -->
<indexterm role="cp"><primary>class</primary><secondary>inheritance</secondary></indexterm><indexterm role="cp"><primary>class</primary><secondary>protocol</secondary></indexterm><indexterm role="cp"><primary>protocol</primary></indexterm>

<para>The <literal>String</literal> class also inherits behavior from its ancestor
classes. Indeed <literal>String</literal> is a subclass of
<literal>CharacterSequence</literal>, itself a subclass of
<literal>SequenceCollection</literal> . The direct consequence is that when
searching for some specific behavior, you may need to explore the
parent classes too. The whole behavior of a class, defined in the
class itself and its parents is called its <firstterm>protocol</firstterm>.
</para>
<indexterm role="cp"><primary>browser</primary><secondary>hierarchy</secondary></indexterm><indexterm role="cp"><primary>browser</primary><secondary>protocol</secondary></indexterm><para>Again the browser is helpful to explore a class protocol. You have two
options:
</para>
<indexterm role="cp"><primary>keyboard shortcut</primary><secondary>browse protocol (<userinput>Ctrl-p</userinput>)</secondary></indexterm><orderedlist numeration="arabic">
<listitem><para><emphasis role="bold">Explore the protocol.</emphasis> In the class pane of the
   browser, do ...select <literal>String</literal> class &#8594;
   right mouse button &#8594; <command>Browse protocol
   (p)</command>... Alternatively, use the keyboard shortcut <userinput>Ctrl-p</userinput>.
</para>
<anchor id="ch03_002dbrowseProtocol"/>
<inlinemediaobject><imageobject><imagedata fileref="ch03-browseProtocol.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>The new window is a protocol browser for the <literal>String</literal>
   class. At the left, we see a hierarchy of the <literal>String</literal>&#8217;s ancestor
   classes.
   At the right are the method selectors for strings and, in parenthesis,
   the class where they are defined.  Methods defined in class
   <literal>String</literal> itself are in bold characters.
</para>
<para>Selecting one class there only shows the protocol starting from
   this class down to the <literal>String</literal> class. If you select
   <literal>String</literal> in the left panel, you only see methods defined in
   the <literal>String</literal> class itself.
</para>
<para>In <link linkend="ch03_002dbrowseProtocol">ch03-browseProtocol</link>, no specific class is selected,
   therefore the whole <literal>String</literal> protocol is listed at the
   right. The method <literal>before:</literal> implemented in
   <literal>SequenceableCollection</literal> is selected and its source code is
   displayed on the large bottom pane.
</para>
<indexterm role="cp"><primary>keyboard shortcut</primary><secondary>browse hierarchy (<userinput>Ctrl-h</userinput>)</secondary></indexterm></listitem><listitem><para><emphasis role="bold">Explore the hierarchy.</emphasis> In the class pane of the
   browser, do ...select <literal>String</literal> class &#8594;
   right mouse button &#8594; <command>Browse hierarchy
   (h)</command>... Alternatively, use the keyboard shortcut <userinput>Ctrl-h</userinput> or
   the button <command>hierarchy</command> on the system browser.
</para>
<anchor id="ch03_002dbrowseHierarchy"/>
<inlinemediaobject><imageobject><imagedata fileref="ch03-browseHierarchy.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>The hierarchy browser is very like the system browser with only two
   differences:
</para>
<indexterm role="cp"><primary>class</primary><secondary>category</secondary></indexterm><itemizedlist>
<listitem><para>At the far left, the class categories pane is absent,
</para>      
</listitem><listitem><para>In the classes pane, the hierarchy of <literal>String</literal> is
      printed. It makes it easy to browse <literal>String</literal> parent and
      child classes.
</para>
</listitem></itemizedlist>
</listitem></orderedlist>
<para>The hierarchy browser is a general tool for exploration. Unlike
the protocol browser, it does not display the entire protocol
of a class.  No inherited methods are shown, only those
defined directly in the selected class. In <link linkend="ch03_002dbrowseHierarchy">ch03-browseHierarchy</link>, the class
<literal>SequenceableCollection</literal> is selected as well as its method
<literal>before:</literal>.
</para>
<para>The <literal>before:</literal> method extracts from a collection the element before a specified
element. When inherited in <literal>String</literal>, those elements are
<literal>Character</literal> instances:
</para>
<screen>'1 + 3i' before: $i
&#8658; $3
</screen>
<para>Practice the tools and resolve the exercise below.
</para>
<anchor id="cutString"/>
<para><emphasis>Find the appropriate
method to transform &#8217;Hello My Friend&#8217; into &#8217;My Friend&#8217;.</emphasis>
</para>


<para>Beware, some messages in the <literal>String</literal> protocol may obviously not
work. Observe below, that the error is thrown on a <literal>Character</literal>
instance:
</para>
<screen>'Hello My Friend' cos
&#8658; MesageNotUnderstood: Character&gt;&gt;cos
</screen>
<para>If you look at implementors of <literal>cos</literal>, you can
find that <literal>Collection</literal> expects to apply <literal>cos</literal>
to each member of a collection, hence a character is
asked for its cosine.
</para>
<indexterm role="cp"><primary>symbol</primary></indexterm>
<para><emphasis role="bold">Symbol.</emphasis> A symbol is very like a string but it is unique and
never duplicated.
Two references to <literal>'hello'</literal> might be to two or only
one object depending on computational history.  Two references
to <literal>#hello</literal> are guaranteed to always refer to the same object.
</para>
<para>Symbols got their name because they are used as <firstterm>symbolic
constants</firstterm>.  You already observed how in the book we wrote message
selectors as a symbol.  We use symbols because each message name must
uniquely index the code for a method.  You will use a symbol when you
need to name something uniquely.
</para>
<para>In the example below, observe the same behavior with string:
</para>
<screen>'hello' == 'hello' copy
&#8658; false
#hello  == #hello copy
&#8658; true
</screen>
<para>Now you know.  A symbol can&#8217;t be duplicated nor changed.
</para>
<indexterm role="cp"><primary>string</primary><secondary>Unicode</secondary></indexterm><indexterm role="cp"><primary>Unicode</primary></indexterm>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
In Cuis-Smalltalk, strings with characters not part of the <acronym>ASCII</acronym> table are usually instances of <literal>UnicodeString</literal>.
In the same way, you may get an instance of <literal>UnicodeSymbol</literal>  and not <literal>Symbol</literal>, or <literal>UnicodeCodePoint</literal> and not <literal>Character</literal>. You usually don&#8217;t need to care about this. The <acronym>ASCII</acronym> and Unicode classes provide the same services.
</para>


<para>Symbols can contain space characters:
</para>
<screen>'hello my friend' asSymbol
&#8658; #'hello my friend'
</screen>
<para><literal>Symbol</literal> is a subclass of <literal>String</literal> and much of its behavior
is inherited. As we learn about <literal>String</literal>s we
are also learning quite a bit about symbols.
</para>
<para>Note that many <literal>String</literal> methods are defined to return strings.
</para>
<screen>'hello my friend' class.
&#8658; String
#'hello my friend' class.
&#8658; Symbol 
#'hello my friend' asCamelCase
&#8658; 'helloMyFriend'
#'hello my friend' asCamelCase asSymbol 
&#8658; #helloMyFriend
</screen>

</sect1>
<sect1 label="" id="Fun-with-variables">
<title>Fun with variables</title>
<indexterm role="cp"><primary>variable</primary></indexterm>
<indexterm role="cp"><primary>variable</primary><secondary>method</secondary></indexterm><indexterm role="cp"><primary>method</primary><secondary>variable</secondary></indexterm>
<para>How can a variable be fun? With Cuis-Smalltalk, a variable is the name of a
box that holds a value &#8211; an object, that&#8217;s it!
</para>
<para>A variable can hold a value of any class.  The value is strongly typed
(we can always determine its Class), but the variable (box) is not
restricted to holding a value of a single type.
</para>
<para>One important direct consequence is that the <emphasis>type</emphasis> of a variable
&#8211; i.e. the class of the referenced object &#8211; can change over
time. Observe this example:
</para>
<screen>| a |
a := 1 / 3.
a class
&#8658; Fraction
a := a + (2 / 3)
&#8658; 1
a class
&#8658; SmallInteger
</screen>
<para>The initial value of the variable <literal>a</literal> was a <literal>Fraction</literal>
instance, after some calculation it ends as a <literal>SmallInteger</literal>
instance.
</para>
<para>In fact, there is no such thing as type, it is only
referenced objects which can <emphasis>mutate</emphasis> over time into other kind
of object: a metal body structure to which you add two wheels may
become a bicycle, or a car if you add four wheels.
</para>
<para>Therefore, to declare a method variable we just name it at the
beginning of the script and surround it with pipe characters &#8220;|&#8221;.
</para>
<para>A variable always holds a value.  Until we place a different value
into a variable, the variable holds the <literal>nil</literal> value, an
instance of <literal>UndefinedObject</literal>.  When we say that a value is
<firstterm>bound</firstterm> to a variable we mean that the named box now holds that
value.
</para>
<para>So far we sent messages directly to objects, but we can send messages to a
variable bound to an object too.
</para>
<para>Any object responds to the message <literal>#printString</literal>.
</para>
<screen>| msg |
msg := 'hello world!'.
Transcript show: msg capitalized printString, ' is a kind of '.
Transcript show: msg class printString; newLine.
msg := 5.
Transcript show: msg printString, ' is a kind of '.
Transcript show: msg class printString; newLine.
</screen>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
This ease of use has a drawback: when writing code to send
a message to a
variable bound to an object, the system does not check ahead of time
that the object
understands the message. Nevertheless, there is a procedure to catch
this kind of situation when the message is actually sent.
</para>
</sect1>
<sect1 label="" id="Fun-with-collections">
<title>Fun with collections</title>
<para>A Collection is a grouping of objects. Arrays and Lists are
collections.  We already know a <literal>String</literal> is a collection;
precisely a collection of characters.  Many kinds of Collection have
similar behaviors.
</para>
<indexterm role="cp"><primary><literal>Array</literal></primary></indexterm>
<para>An <literal>Array</literal> is a fixed-size collection, and unlike a string, it can
contain any kind of literal enclosed in <literal>#(&#160;)</literal>:
</para><screen>&quot;array of numbers&quot;
#(1 3 5 7 11 1.1)
&quot;array of mixed literals&quot;
#(1 'friend' $&amp; 'al')
</screen>
<para>An Array is constructed directly using well-formed <emphasis>literal</emphasis> elements.
We will get to the meaning of this last statement when we discuss
details of the Smalltalk language.
</para>
<para>For now, just note that using non-literal expressions to construct an
array will not work as expected:
</para><screen>#(1 2/3)
&#8658; #(1 2 #/ 3)
</screen>
<indexterm role="cp"><primary>array</primary><secondary>dynamic</secondary></indexterm><para>Indeed, the <literal>$/</literal> is interpreted as a literal symbol and we get
basic components of &#8220;2 / 3&#8221; but this text is not
interpreted as a fraction. To get a fraction
inserted in the array, you use a <firstterm>run-time array</firstterm> or <firstterm>dynamic
array</firstterm>, whose elements <emphasis>are</emphasis> expressions separated by dots and surrounded
with <literal>{ }</literal>:
</para>
<screen>{1 . 2/3 . 7.5}
&#8658; #(1 2/3 7.5)
</screen>
<indexterm role="cp"><primary>array</primary><secondary>operation</secondary></indexterm><indexterm role="cp"><primary>array</primary><secondary>size</secondary></indexterm><para>With an array filled with numbers you can request information and
arithmetic operations:
</para><screen>#(1 2 3 4) size &#8658; 4
#(1 2 3 4) + 10 &#8658; #(11 12 13 14)
#(1 2 3 4) / 10 &#8658; #(1/10 1/5 3/10 2/5)
</screen>
<indexterm role="cp"><primary>collection</primary><secondary><literal>squared</literal></secondary></indexterm><para>Mathematical operations work as well:
</para><screen>#(1 2 3 4) squared &#8658; #(1 4 9 16)
#(0 30 45 60) degreeCos
&#8658; #(1.0 0.8660254037844386
0.7071067811865475 0.49999999999999994)
</screen>
<indexterm role="cp"><primary>array</primary><secondary>statistic</secondary></indexterm><para>Basic statistical methods can be used directly on arrays of numbers:
</para>
<screen>#(7.5 3.5 8.9) mean &#8658; 6.633333333333333 
#(7.5 3.5 8.9) range &#8658; 5.4
#(7.5 3.5 8.9) min &#8658; 3.5
#(7.5 3.5 8.9) max &#8658; 8.9
</screen>
<para>To get an array of natural numbers from 1 to 100, we use the keyword
message <literal>#to:</literal>
</para>
<screen>(1 to: 100) asArray
&#8658; #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68
69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91
92 93 94 95 96 97 98 99 100)
</screen>
<para>In this line of code, the message <literal>#to:</literal> is sent to <literal>1</literal>
with the argument <literal>100</literal>. It returns an interval object. The
message <literal>#asArray</literal> sent to the interval returns an array.
</para>
<anchor id="exeNegativeIntegers"/>
<para><emphasis>Create an
array of integer numbers ranging from -80 to 50.</emphasis>
</para>


<!-- introduce ordered collection -->
<indexterm role="cp"><primary>collection</primary><secondary>dynamic</secondary></indexterm><indexterm role="cp"><primary>collection</primary><secondary><literal>OrderedCollection</literal></secondary></indexterm><indexterm role="cp"><primary>collection</primary><secondary><literal>add:</literal></secondary></indexterm><para>The size of an array is fixed, it can not grow. An
<literal>OrderedCollection</literal> is a dynamic, ordered collection. It grows
when adding element with the <literal>#add:</literal> message:
</para><anchor id="dynamicSize"/>
<screen>| fibo | 
fibo := OrderedCollection newFrom: #(1 1 2 3).
fibo add: 5;
   add: 8;
   add: 13;
   add: 21.
fibo
&#8658; an OrderedCollection(1 1 2 3 5 8 13 21)
</screen>

<indexterm role="cp"><primary>collection</primary><secondary><literal>at:</literal></secondary></indexterm><indexterm role="cp"><primary>collection</primary><secondary><literal>last</literal></secondary></indexterm><indexterm role="cp"><primary>collection</primary><secondary><literal>indexOf:</literal></secondary></indexterm><para>Index access to the elements of a collection is done with a variety of
messages. The index naturally ranges from 1 to the collection size:
</para><screen>fibo at: 1 &#8658; 1
fibo at: 6 &#8658; 5
fibo last &#8658; 21
fibo indexOf: 2 &#8658; 3
fibo at: fibo size &#8658; 21
</screen>

<bridgehead renderas="sect2">Playing with enumerators</bridgehead>
<para>A collection comes with a set of helpful methods named
enumerators. Enumerators operate on each element of a collection.
</para>
<indexterm role="cp"><primary>collection</primary><secondary>set operations (union, intersection, difference)</secondary></indexterm><para>Set operations between two collections are computed with the
<literal>#union:</literal>, <literal>#intersection:</literal> and <literal>#difference:</literal> messages.
</para><anchor id="setOpe"/>
<screen>#(1 2 3 4 5) intersection: #(3 4 5 6 7)
&#8658; #(3 4 5)
#(1 2 3 4 5) union: #(3 4 5 6 7)
&#8658; a Set(5 4 3 2 7 1 6) 
#(1 2 3 4 5) difference: #(3 4 5 6 7)
&#8658; #(1 2)
</screen>

<anchor id="holeSet"/>
<para><emphasis>Construct the array of the
numbers 1&#44;...&#44;24&#44;76&#44;...&#44;100.</emphasis>
</para>


<para>Set operations work with any kind of object. Comparing objects
deserves its own section.
</para>
<screen>#(1 2 3 'e' 5) intersection: #(3.0 4 6 7 'e')
&#8658; #(3 'e')
</screen>
<indexterm role="cp"><primary>collection</primary><secondary><literal>select:</literal></secondary></indexterm><indexterm role="cp"><primary>collection</primary><secondary>enumerator mechanism</secondary></indexterm><indexterm role="cp"><primary>block</primary></indexterm>
<para>To select the prime numbers from 1 to 100, we use the <literal>#select:</literal>
enumerator. This message is sent to a collection, then it will select
each element of the collection returning true to a test condition:
</para>
<anchor id="prime100"/>
<screen>(1 to: 100) select: [ :n | n isPrime ]
&#8658;  #(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71
73 79 83 89 97)
</screen>

<para>This example introduces the message <literal>#select:</literal> and a block of code, a
primordial constituent element of the Cuis-Smalltalk model. A block of code,
delimited by square brackets, is a piece of code for later
execution(s). Let&#8217;s explain how this script is evaluated:
</para>
<itemizedlist>
<listitem><para><literal>(1 to: 100)</literal> is evaluated as an interval
</para>
</listitem><listitem><para>the block of code <literal>[:n | n isPrime]</literal> is instantiated (created)
</para>
</listitem><listitem><para>the message <literal>#select:</literal> is sent to the interval with the
 block of code as the argument
<indexterm role="cp"><primary>block</primary><secondary>parameter</secondary></indexterm> </para></listitem><listitem><para>in the <literal>select:</literal> method, for each integer of the
 interval, the block of code is invoked with its parameter
 <literal>n</literal> set to the integer value.  A <firstterm>block parameter</firstterm>
 starts with a colon, &#8220;:&#8221;, and is an ordinary identifier <footnote><para>An
 <firstterm>identifier</firstterm> is just a word that starts in a lowercase letter
 and consists of upper and lower case letters and decimal digits.  All
 variable names are identifiers</para></footnote>.  Then, each time <literal>n
 isPrime</literal> evaluates to true, the <literal>n</literal> value is added to a new
 collection answered when the <literal>select:</literal> method finished
 testing each element of the collection.
</para>
</listitem></itemizedlist>
<para>A block of code can be saved in a variable, passed as a parameter, and
can be used multiple times.
</para><screen>| add2 |
add2 := [:n| n + 2].
{ add2 value: 2. add2 value: 7 }.
&#8658;  #(4 9)
</screen>

<para>Enumerators implement tremendously powerful ways to process collections without
needing an index.  By this, we mean that they are simple to get right.
We like simple!
</para>
<para>To get an idea of how useful enumerators are, take a browse at the
<literal>Collection</literal> class in the method category <literal>enumerating</literal>.
</para>
<anchor id="oddNumbers"/>
<para><emphasis>Select the odd numbers between
-20 and 45.</emphasis>
</para>


<para>You want to know the number of prime numbers under 100.  Just send the
message <literal>#size</literal> to the answered collection at <link linkend="prime100">prime100</link>. The
parenthesis are mandatory to ensure <literal>#size</literal> is sent last to the
resulting collection:
</para>
<anchor id="qtyPrime100"/>
<screen>( (1 to: 100) select: [:n | n isPrime] ) size
&#8658; 25
</screen>

<para>For more clarity, we use a variable named <literal>primeNumbers</literal> to
store the prime numbers list we built:
</para><screen>| primeNumbers |
primeNumbers := (1 to: 100) select: [:n | n isPrime].
primeNumbers size
</screen>
<anchor id="qtyPrime200"/>
<para><emphasis>Modify <link linkend="qtyPrime100">qtyPrime100</link> to calculate the number
of prime numbers between 101 and 200.</emphasis>
</para>


<anchor id="multiples7"/>
<para><emphasis>Build the list of the
multiples of 7 below 100.</emphasis>
</para>


<anchor id="oddNonPrime"/>
<para><emphasis>Build a
collection of the odd integers in [1 ; 100] which are not prime.</emphasis>
</para>


<indexterm role="cp"><primary>collection</primary><secondary><literal>collect:</literal></secondary></indexterm><para>A sister enumerator to <literal>#select:</literal> is <literal>#collect:</literal>. It returns a
new collection of the same size, with each element transformed by a
block of code. When searching for perfect cubic roots, it is useful to
know about some cubes:
</para>
<anchor id="cubesCollect"/>
<screen>(1 to: 10) collect: [:n | n cubed]
&#8658; #(1 8 27 64 125 216 343 512 729 1000)
</screen>

<para>The collected elements can be of a different type. Below, a string is
enumerated and integers are collected:
</para>
<screen>'Bonjour' collect: [:c | c asciiValue ]
&#8658;  #(66 111 110 106 111 117 114)
</screen>
<para>We can shift the ASCII value, convert it back to a character, then collect
it in a new string. It is a simple cipher:
</para><anchor id="simpleCipher"/>
<screen>'Bonjour' collect: [:c | (c asciiValue + 1) asCharacter ]
&#8658; 'Cpokpvs'
</screen>

<anchor id="decodeCipher"/>
<para><emphasis>Write the script to decode
cipher &#8217;Zpv!bsf!b!cptt&#8217;, it was encoded with <link linkend="simpleCipher">simpleCipher</link>.</emphasis>
</para>


<indexterm role="cp"><primary>Caesar cipher</primary></indexterm>
<para>Caesar&#8217;s cipher is based on shifting letters to the right in the
alphabet order.  The method is named after Julius Caesar, who used it
in his private correspondence with a shift of 3.
</para>
<anchor id="alphabetCipher"/>
<para><emphasis>Write a script
to collect the alphabet&#8217;s uppercase letters representing the Caesar&#8217;s
cipher. The expected answers is</emphasis> #($D $E $F $G $H $I $J $K $L $M $N $O
$P $Q $R $S $T $U $V $W $X $Y $Z $A $B $C).
</para>


<para>Once you get the alphabet cipher right, you can encode your first
message:
</para><anchor id="encodeCaesar"/>
<para><emphasis>Encode the
phrase &#8217;SMALLTALKEXPRESSION&#8217;.</emphasis>
</para>


<para>And decode message:
</para>
<anchor id="decodeCaesar"/>
<para><emphasis>Decode this famous quotation attributed to Julius Caesar &#8217;DOHDMDFWDHVW&#8217;.</emphasis>
</para>


<bridgehead renderas="sect2">Fun with loops</bridgehead>
<para>Collection can be iterated with traditional loops: there is a whole
family of <emphasis>repeat</emphasis>, <emphasis>while</emphasis> and <emphasis>for</emphasis> loops.
</para>
<indexterm role="cp"><primary>loop</primary><secondary>for</secondary></indexterm><indexterm role="cp"><primary>number</primary><secondary><literal>to:do</literal></secondary></indexterm><para>A simple <emphasis>for</emphasis> loop between two integer values is written with
the keyword message <literal>#to:do:</literal>, the last argument is a block of code
executed for each index:
</para><anchor id="forLoop"/>
<screen>| sequence |
sequence := OrderedCollection new.
1 to: 10 do: [:k | sequence add: 1 / k].
sequence
&#8658; an OrderedCollection(1 1/2 1/3 1/4 1/5 1/6 1/7 1/8 1/9 1/10)
</screen>

<indexterm role="cp"><primary>collection</primary><secondary><literal>collect:</literal></secondary></indexterm><para>A collect writes more concisely, though:
</para><screen>(1 to: 10) collect: [:k | 1 / k]
</screen>
<indexterm role="cp"><primary>loop</primary><secondary>for</secondary><tertiary>step</tertiary></indexterm><indexterm role="cp"><primary>number</primary><secondary><literal>to:do:by:</literal></secondary></indexterm><para>To step with a different value than 1, a third numeric argument is
inserted:
</para><screen>1 to: 10 by: 0.5 do: [:k | sequence add: 1 / k]
</screen>
<indexterm role="cp"><primary>loop</primary><secondary>repeat</secondary></indexterm><indexterm role="cp"><primary>Fibonacci sequence</primary></indexterm>
<para>A repeated loop without an index or any collection is written with the
<literal>#timesRepeat:</literal> message send to an integer:
</para><anchor id="repeatLoop"/>
<screen>| fibo |
fibo := OrderedCollection newFrom: #(1 1).
10 timesRepeat: [
   fibo add: (fibo last + fibo atLast: 2)].
fibo
&#8658; an OrderedCollection(1 1 2 3 5 8 13 21 34 55 89 144)
</screen>

<indexterm role="cp"><primary>collection</primary><secondary><literal>pairsDo:</literal></secondary></indexterm><para>The quotient of consecutive Fibonacci terms converges toward the golden
value:
</para><screen>fibo pairsDo: [:i :j |
   Transcript show: (j / i ) asFloat ; cr]
&#8658; 1.0
&#8658; 1.5
&#8658; 1.6
&#8658; 1.6153846153846154
&#8658; 1.6176470588235294
&#8658; 1.6179775280898876
</screen>

</sect1>
<sect1 label="" id="Collections-detailed">
<title>Collections detailed</title>
<indexterm role="cp"><primary>collection</primary></indexterm>
<para>The <command>Collections-</command> class categories are the most prolific,
there are 7 of them gathering 46 classes.
</para>
<!-- explain category Collections-Abstract -->
<indexterm role="cp"><primary>class</primary><secondary>abstract</secondary></indexterm><para>The category <command>Collections-Abstract</command> groups classes that are
said to be abstract. An <firstterm>abstract</firstterm> class cannot be instantiated,
its behavior is declared but not completely implemented. It is the
responsibility of its subclasses to implement the missing part of the
behavior.
</para>
<para>An abstract class is useful to establish a set of polymorphic methods
which each of its concrete subclasses is expected to specialize.
This captures and communicates our intent.
</para>
<para>Observe how the important <literal>do:</literal> method is declared
but not implemented:
</para>
<screen>Collection&gt;&gt;do: aBlock 
&quot;Evaluate aBlock with each of the receiver's elements as the argument.&quot;
self subclassResponsibility
</screen>
<para>Then observe how two different <literal>Collection</literal> subclasses
implement it:
</para>
<screen>OrderedCollection&gt;&gt;do: aBlock 
firstIndex to: lastIndex do: [ :index |
   aBlock value: (array at: index) ]
</screen>
<para>and:
</para>
<screen>Dictionary&gt;&gt;do: aBlock
super do: [:assoc | aBlock value: assoc value]
</screen>
<!-- distinguish growable and non-growable collection Array (Collections-Arrayed) and OrderedCollection -->
<!-- (Collections_Sequenceable) -->

<para>Two important groups of collections must be distinguished: collections
with a fixed size and collections with a variable size.
</para>
<indexterm role="cp"><primary>collection</primary><secondary>fixed size</secondary></indexterm><para><emphasis role="bold">Collection of fixed size.</emphasis>  Such collections are gathered in
the category <command>Collections-Arrayed</command>. The most notable one is
<literal>Array</literal>, its size &#8211; the number of elements it can hold &#8211; is
set when creating the instance. Once instantiated, you can neither add nor
delete elements to an array.
</para>
<indexterm role="cp"><primary>collection</primary><secondary>instantiate array</secondary></indexterm><indexterm role="cp"><primary><literal>Array</literal></primary></indexterm>

<para>There are different ways to create <literal>Array</literal> instance:
</para>
<anchor id="createArray"/>
<screen>array1 := #(2 'Apple' $@ 4) &quot;create at compile time&quot;
array1b := {2 . 'Apple' . 2@1 . 1/3 } &quot;created a execution time&quot;
array2 := Array with: 2 with: 'Apple' with: 2@3 with: 1/3.
array3 := Array ofSize: 4 &quot;an empty array with a 4 element capacity&quot;
</screen>

<para>Array <literal>array1</literal> and <literal>array1b</literal> are bit
different. The former one is created and filled with its contents during the
compile time of the code, the consequence is it can only be filled
with literal elements such as integer, float, or string. The latter one is
created at the execution time of the code, it can be filled with elements
instantiated at the execution time as <literal>Fraction</literal> or
<literal>Point</literal> instances.
</para>
<indexterm role="cp"><primary>collection</primary><secondary>access element</secondary></indexterm><para>You can access elements with an important variety of messages:
</para><anchor id="collectionAccess"/>
<screen>array1 first &#8658; 2
array1 second &#8658; 'Apple'
array1 third &#8658; $@
array1 fourth &#8658; 4
array1 last &#8658; 4
array1 at: 2 &#8658; 'Apple'
array2 at: 3 &#8658; 2@3
array2 swap: 2 with: 4 &#8658; #(2 1/3 2@3 'Apple') 
array1 at: 2 put: 'Orange'; yourself &#8658; #(2 'Orange' $@ 4)
array1 indexOf: 'Orange &#8658; 2
</screen>

<para>Use the System Browser to discover alternative ways to access elements
of a collection.
</para>
<anchor id="collFirst"/>
<para><emphasis>What is the
appropriate message to access the first 2 elements of the
<literal>array1</literal> collection?</emphasis>
</para>


<para>You can&#8217;t add or remove an element, though:
</para>
<screen>array1 add: 'Orange'
&#8658; Error: 'This message is not appropriate for this object'
array1 remove: 'Apple'
&#8658;  Error: 'This message is not appropriate for this object'
</screen>
<para>Nevertheless, it is possible to fill at once an array:
</para>
<anchor id="fillArray"/>
<para><emphasis>Fill every element in
<literal>array1</literal> with &#8217;kiwi&#8217; all at once?</emphasis>
</para>


<indexterm role="cp"><primary>collection</primary><secondary>variable size</secondary></indexterm><para><emphasis role="bold">Collection of variable size.</emphasis>  Such collection are gathered in
several class categories: <command>Collections-Unordered</command>,
<command>Collections-Sequenceable</command>, etc. They represent the most common
collections.
</para>
<para><literal>OrderedCollection</literal> is a notable one. Its elements are ordered:
elements are added one after the other in sequence<footnote><para>Of course you can
insert an element between two elements. However, a <literal>LinkList</literal>
instance is more efficient for this use case.</para></footnote>. Its size is
variable depending on added or removed elements.
</para>
<indexterm role="cp"><primary>collection</primary><secondary>instantiate variable size array</secondary></indexterm><indexterm role="cp"><primary><literal>OrderedCollection</literal></primary></indexterm>

<anchor id="createOrderedColl"/>
<screen>coll1 := {2 . 'Apple' . 2@1 . 1/3 } asOrderedCollection
coll2 := OrderedCollection with: 2 with: 'Apple' with: 2@1 with: 1/3
coll3 := OrderedCollection ofSize: 4
</screen>

<para>The access to elements is identical to an <literal>Array</literal>
instance, but dynamic collections allow you to add and remove elements:
</para>
<anchor id="remDelArray"/>
<screen>coll1 add: 'Orange'; yourself
&#8658; an OrderedCollection(2 'Apple' 2@1 1/3 'Orange')
coll1 remove: 2@1; yourself
&#8658; an OrderedCollection(2 'Apple' 1/3)
</screen>

<!-- exercise with ordered collection -->
<anchor id="addAfter"/>
<para><emphasis>How to add &#8217;Orange&#8217; after
&#8217;Apple&#8217; in <literal>coll1</literal>?</emphasis>
</para>


<!-- Explain in detail Dictionary and Set -->
<indexterm role="cp"><primary><literal>Set</literal></primary></indexterm>
<indexterm role="cp"><primary>collection</primary><secondary><literal>Set</literal></secondary></indexterm><para><emphasis role="bold">Set.</emphasis> <literal>Set</literal> is an unordered collection without duplicated
elements. The order of the elements is not guaranteed, though. Observe
how pi is the first element of the set:
</para>
<anchor id="setCollection"/>
<screen>set := Set new.
set add: 1; add: Float pi; yourself
&#8658; a Set(3.141592653589793 1)
</screen>

<para>Nonduplicates are guaranteed at least, even with a number of different
types. Observe how <literal>1</literal>, <literal>3/3</literal> and <literal>1.0</literal>
are considered equal and not duplicated in the set:
</para>
<anchor id="setWithoutDuplicates"/>
<screen>set := Set new.
set add: 1; add: Float pi; add: 3/3; add: 1/3; add: 1.0; yourself
&#8658; a Set(1/3 3.141592653589793 1)
</screen>


<indexterm role="cp"><primary>collection</primary><secondary>convert</secondary></indexterm><para>A very handy way to create a <literal>Set</literal> instance, or any other
collection is to create a dynamic array and convert it with the
<literal>#asSet</literal> message:
</para>
<anchor id="convertDynArray"/>
<screen>{1 . Float pi . 3/3 . 1/3 . 1.0} asSet
&#8658; a Set(3.141592653589793 1/3 1)
</screen>

<para>Observe the alternate conversion messages:
</para>
<screen>{1 . Float pi . 3/3 . 1/3 . 1.0} asOrderedCollection
&#8658; an OrderedCollection(1 3.141592653589793 1 1/3 1.0) 

{1 . Float pi . 3/3 . 1/3 . 1.0} asSortedCollection
&#8658; a SortedCollection(1/3 1 1 1.0 3.141592653589793)
</screen>
<para>To uniquely collect the divisors list of 30 and 45 (not the common divisors):
</para>
<screen>Set  new 
   addAll: #(1 2 3 5 6 10 15 30) ; 
   addAll: #(1 3 5 9 15 45) ; 
   yourself. 
&#8658; a Set(5 10 15 1 6 30 45 2 3 9)
</screen>
<anchor id="setLetters"/>
<para><emphasis>How will you collect the letters in
the sentences &#8217;buenos d&#237;as&#8217; and &#8217;bonjour&#8217;?</emphasis>
</para>


<indexterm role="cp"><primary>collection</primary><secondary><literal>Dictionary</literal></secondary></indexterm><indexterm role="cp"><primary><literal>Dictionary</literal></primary></indexterm>
<para><emphasis role="bold">Dictionary.</emphasis> A dictionary is a list of associations between a
key and an object. Of course, a key is an object, but it must respond
to equality tests. Most of the time, symbols are used as keys.
</para>
<para>To compile a list of colors:
</para>
<anchor id="colorDict"/>
<screen>| colors |
colors := Dictionary new.
colors
   add: #red -&gt; Color red;
   add: #blue -&gt; Color blue;
   add: #green -&gt; Color green
</screen>

<para>There are shorter descriptions:
</para><screen>colors := Dictionary newFrom:
   {#red -&gt; Color red . #blue -&gt; Color blue . #green -&gt; Color green}.
colors := {#red -&gt; Color red . #blue -&gt; Color blue .
   #green -&gt; Color green} asDictionary
</screen>
<para>You access color by symbols:
</para>
<screen>colors at: #blue
&#8658; Color blue
colors at: #blue put: Color blue darker
colors at: #yellow ifAbsentPut: Color yellow
&#8658; association `#yellow -&gt; Colors yellow` added to the dictionary
</screen>

<para>There are different ways to access a dictionary&#8217;s contents:
</para>
<screen>colors keys.
&#8658; #(#red #green #blue) 
colors keyAtValue: Color green
&#8658; #green
</screen>
<para><emphasis role="bold">Beware.</emphasis> The classic enumerators iterate the values of the
dictionary:
</para>
<screen>colors do: [:value | Transcript show:  value; space ]
&#8658; (Color r: 1.000 g: 1.000 b: 0.078) (Color r: 0.898 g: 0.000 b: 0.000)...
</screen>
<para>Sometimes, you really need to iterate the whole key-value association:
</para>
<screen>colors associationsDo: [:assoc | 
   Transcript show: assoc key; space; assoc value; cr ]
</screen>
<para>There are other variants to explore by yourself.
</para>
<anchor id="nameColor"/>
<para><emphasis>With an appropriate
enumerator, how will you edit the contents of the <literal>colors</literal>
dictionary to replace its values with a nicely capitalized string
representing the name of the color?</emphasis>
</para>


<!-- The other kind of collection should be self-discoverable -->
<para>There are many more collections to explore. You now know enough to
explore and to search by yourself with the System Browser, and to
experiment with the Workspace.
</para>

</sect1>
<sect1 label="" id="SpaceWar_0021-collections">
<title>SpaceWar! collections</title>

<sect2 label="">
<title>Instantiate collections</title>
<para>Whenever you need to deal with more than one element of the same
nature &#8211; instances of the same class &#8211; it is a clue to use a
collection to hold them. Moreover, when these elements are of a fixed
quantity, it indicates more precisely you want to use an <literal>Array</literal>
instance. An <literal>Array</literal> is a collection of fixed size. It can not
grow nor shrink.
</para>
<para>When this quantity is variable, you want to use an
<literal>OrderedCollection</literal> instance. It is a collection of variable
size, it can grow or shrink.
</para>
<para>SpaceWar! is a two-player game, there will always be two players
and two spaceships. We use an <literal>Array</literal> instance to keep a
reference to each spaceship.
</para>
<para>Each player can fire several torpedoes; therefore the gameplay holds
zero or more torpedoes &#8211; hundreds if we decide so. The torpedoes
quantity is variable, we want to use an <literal>OrdredCollection</literal>
instance to keep track of them.
</para>
<para>In the <literal>SpaceWar</literal> class, we already defined two instance
variables <literal>ships</literal> and <literal>torpedoes</literal>. Now, we want an
<literal>initializeActors</literal> method to set up the game with the involved
actors &#8211; central star, ships, etc. Part of this initialization is to
create the necessary collections.
</para>
<para>See below an incomplete implementation of this method:
</para>
<anchor id="initActors"/>
<screen>SpaceWar&gt;&gt;initializeActors
   centralStar := CentralStar new.
   ../..
   ships first 
      position: 200 @ -200;
      color: Color green. 
   ships second
      position: -200 @ 200;
      color: Color red
</screen>

<anchor id="initActorsCollections"/>
<para><emphasis>The example above does not show the creation of the
<literal>ships</literal> and <literal>torpedoes</literal> collections. Replace
&#8220;../..&#8221; with lines of code where these collections are
instantiated and if necessary populated.</emphasis>
</para>



</sect2>
<sect2 label="">
<title>Collections in action</title>
<!-- Show the update code, explain a bit about the physics -->

<para>The spaceship and the torpedo objects are responsible for their
internal states. They understand the <literal>#update:</literal> message to recompute
their position according to the mechanical laws.
</para>
<para>A fired torpedo has a constant velocity, no external forces are applied
to it. Its position is linearly updated according to the time
elapsed. The <literal>t</literal> parameter in the <literal>#update:</literal> message is
this time interval.
</para>
<anchor id="torpedoMechanic"/>
<screen>Torpedo&gt;&gt;update: t
&quot;Update the torpedo position&quot;
   position := velocity * t + position.
   ../..
</screen>

<para>A spaceship is put under the strain of the star&#8217;s gravity pull and
the acceleration of its engines. Therefore its velocity and position
change according to the mechanical laws of physics.
</para>
<anchor id="spaceShipMechanic"/>
<screen>SpaceShip&gt;&gt;update: t
&quot;Update the ship position and velocity&quot;
   | ai ag newVelocity |
   &quot;acceleration vectors&quot;
   ai := acceleration * self direction.
   ag := self gravity.
   newVelocity := (ai + ag) * t + velocity.
   position := (0.5 * (ai + ag) * t squared) + (velocity * t) + position.
   velocity := newVelocity.
   ../..
</screen>

<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
Remember that Smalltalk does not
follow the mathematics precedence of arithmetic operators.
These are seen as ordinary <emphasis role="bold">binary
messages</emphasis> which are evaluated from the left to the right when there
is no parenthesis. For example, in the code fragment
<literal>...(velocity * t)...</literal>, the parenthesis are mandatory to get
the expected computation.
</para>
<!-- Explain the direction and gravity methods. -->
<para>Observe in this previous method how the direction and the gravity are
defined in two specific methods.
</para>
<para>The <literal>#direction</literal> message asks for the unit vector representing the
nose direction of the spaceship:
</para>
<anchor id="spaceShipDirection"/>
<screen>SpaceShip&gt;&gt;direction
&quot;I am a unit vector representing the nose direction of the mobile&quot;
   ^ Point rho: 1 theta: self heading
</screen>

<para>The <literal>#gravity</literal> message asks for the gravity vector of the spaceship
is subjected to:
</para>
<anchor id="spaceShipGravity"/>
<screen>SpaceShip&gt;&gt;gravity
&quot;Compute the gravity acceleration vector&quot;
   | position |
   position := self morphPosition.
   ^ [-10 * self mass * self starMass / (position r raisedTo: 3) * position]
      on: Error do: [0 @ 0]
</screen>

<para>Observe the message <literal>#starMass</literal> sent to the spaceship herself.
We, as a spaceship, have not yet figured out how to ask the central star
for its stellar mass. Our <literal>starMass</literal> method can just return, for
now, the number 8000.
</para>
<!-- Explain the SpaceWar step method -->
<para>The gameplay is the responsibility of a <literal>SpaceWar</literal> instance. At
a regular interval of time, it refreshes the states of the game
actors. A <literal>stepAt:</literal> method is called at a regular interval of time
determined by the <literal>stepTime</literal> method:
</para>
<anchor id="reflreshGamePlay"/>
<screen>SpaceWar&gt;&gt;stepTime
&quot;millisecond&quot;
   ^ 20

SpaceWar&gt;&gt;stepAt: millisecondSinceLast
   ../..
   ships do: [:each | each unpush].
   ../..
</screen>

<!-- Ask the reader to write the code to update the ship and torpedo position -->
<para>In the <literal>stepAt:</literal> method, we intentionally left out the details to
update the ship and torpedo positions. Note: each ship is sent
regularly an <literal>#unpush</literal> message to reset its previous <literal>#push</literal>
acceleration.
</para>
<anchor id="updateShipsTorpedoes"/>
<para><emphasis>Replace the two lines &#8220;../..&#8221; with code to update the ships
and the torpedoes&#8217; positions and velocities.</emphasis>
</para>



<para>Among other things, the gameplay handles the collisions between the
various protagonists. Enumerators are very handy for this.
</para>
<para>Ships are held in an array of size 2, we just iterate it with a <literal>#do:</literal>
message and a dedicated block of code:
</para>
<anchor id="shipSunCollision"/>
<screen>SpaceWar&gt;&gt;collisionsShipsStar
   ships do: [:aShip | 
      (aShip morphPosition dist: centralStar morphPosition) &lt; 20 ifTrue: [
         aShip flashWith: Color red.
         self teleport: aShip]
   ]
</screen>
<!-- -->
</sect2>
</sect1>
</chapter>
<chapter label="" id="Control-Flow-Messaging">
<title>Control Flow Messaging</title>

<blockquote><attribution>Alan Perlis</attribution>
<para>Fools ignore complexity. Pragmatists suffer it. Some can avoid
it. Geniuses remove it.
</para></blockquote>



<para>Cuis-Smalltalk syntax is minimal. Essentially there is syntax only for
sending messages (i.e., expressions) . Expressions are built up from a
very small number of primitive elements. There are only 6 keywords,
and <emphasis role="bold">there is no syntax for control structures</emphasis> or for
declaring new classes. Instead, nearly everything is achieved by
sending messages to objects. For instance, instead of an if-then-else
control structure, Smalltalk sends messages like <literal>#ifTrue:</literal> to
<literal>Boolean</literal> objects. As we already know, new (sub)classes are
created by sending a message to their superclass.
</para>

<sect1 label="" id="Syntactic-elements">
<title>Syntactic elements</title>
<para>Expressions are composed of the following building blocks:
</para>
<orderedlist numeration="arabic">
<listitem><para>six reserved keywords, or <emphasis>pseudo-variables</emphasis>:
    <literal>self</literal>, <literal>super</literal>, <literal>nil</literal>,
    <literal>true</literal>, <literal>false</literal>, and <literal>thisContext</literal>,
</para>
</listitem><listitem><para>constant expressions for <emphasis>literal objects</emphasis> including
  numbers, characters, strings, symbols and arrays,
</para>
</listitem><listitem><para>variable declarations
</para>
</listitem><listitem><para>assignments,
</para>
</listitem><listitem><para>block closures,
</para>  
</listitem><listitem><para>messages.
</para>
</listitem></orderedlist>
</sect1>
<sect1 label="" id="Pseudo_002dvariables">
<title>Pseudo-variables</title>
<indexterm role="cp"><primary>pseudo-variables</primary></indexterm>

<para>In Smalltalk, there are 6 reserved keywords, or pseudo-variables:
</para>
<para><literal>nil</literal>, <literal>true</literal>, <literal>false</literal>,
<literal>self</literal>, <literal>super</literal>, and <literal>thisContext</literal>.
</para>
<para>They are called <firstterm>pseudo-variables</firstterm> because they are predefined and
cannot be assigned to. <literal>true</literal>, <literal>false</literal>, and
<literal>nil</literal> are constants while the values of <literal>self</literal>,
<literal>super</literal>, and <literal>thisContext</literal> vary dynamically as
code is executed.
</para>
<itemizedlist>
<indexterm role="cp"><primary>pseudo-variable</primary><secondary><literal>true</literal></secondary></indexterm><indexterm role="cp"><primary>pseudo-variable</primary><secondary><literal>false</literal></secondary></indexterm><indexterm role="cp"><primary><literal>true</literal></primary></indexterm>
<indexterm role="cp"><primary><literal>false</literal></primary></indexterm>
<listitem><para><literal>true</literal> and <literal>false</literal> are the unique
   instances of the <literal>Boolean</literal> classes <literal>True</literal> and
   <literal>False</literal>.
</para>
<indexterm role="cp"><primary>pseudo-variable</primary><secondary><literal>self</literal></secondary></indexterm><indexterm role="cp"><primary><literal>self</literal></primary></indexterm>
<indexterm role="cp"><primary><literal>self</literal></primary></indexterm>
</listitem><listitem><para><literal>self</literal> always refers to the receiver of the
   currently executing method.
</para>
<indexterm role="cp"><primary>pseudo-variable</primary><secondary><literal>super</literal></secondary></indexterm><indexterm role="cp"><primary><literal>super</literal></primary></indexterm>
</listitem><listitem><para><literal>super</literal> also refers to the receiver of the current
   method, but when you send a message to <literal>super</literal>, the
   method-lookup changes so that it starts from the superclass of the
   class containing the method that uses <literal>super</literal>.
</para>   
<indexterm role="cp"><primary>pseudo-variable</primary><secondary><literal>nil</literal></secondary></indexterm><indexterm role="cp"><primary><literal>nil</literal></primary></indexterm>
</listitem><listitem><para><literal>nil</literal> is the undefined object. It is the unique
   instance of the class <literal>UndefinedObject</literal>. Instance
   variables, class variables and local variables are initialized to
   <literal>nil</literal>.
</para>

<indexterm role="cp"><primary>pseudo-variable</primary><secondary><literal>thisContext</literal></secondary></indexterm><indexterm role="cp"><primary><literal>thisContext</literal></primary></indexterm>
</listitem><listitem><para><literal>thisContext</literal> is a pseudo-variable that represents
   the top frame of the run-time stack. In other words, it represents
   the currently executing <literal>MethodContext</literal> or
   <literal>BlockContext</literal>. <literal>thisContext</literal> is normally not
   of interest to most programmers, but it is essential for
   implementing development tools like the Debugger and it is also
   used to implement exception handling and continuations.
</para>
</listitem></itemizedlist>
</sect1>
<sect1 label="" id="Method-syntax">
<title>Method syntax</title>
<indexterm role="cp"><primary>method</primary></indexterm>

<para>Whereas expressions may be evaluated anywhere in Cuis-Smalltalk (for example 
in a workspace, in a debugger, or in a browser), methods are normally
defined in the System Browser window or in the Debugger. Methods can
also be filed in from an external medium, but this is not the usual
way to program in Cuis-Smalltalk.
</para>
<para>Programs are developed one method at a time, in the context of a given
class. A class is defined by sending a message to an existing class,
asking it to create a subclass, so there is no special syntax required
for defining classes. We are already farmiliar with this
from previous examples.
</para>
<para>Let&#8217;s take a another look to the method syntax when control flow is
involved &#8211; our first explanation was <link linkend="Spacewar_0021-States-and-Behaviors">Spacewar! States and Behaviors</link>).
</para>
<para>Here is the method <literal>keyStroke:</literal> in the class <literal>SpaceWar</literal>.
</para>
<anchor id="spacewarKeyStroke"/>
<screen>SpaceWar&gt;&gt;keyStroke: event
&quot;Check for any keyboard stroke&#44; and take action accordingly&quot;
   | key |
   key := event keyCharacter.
   event isArrowUp ifTrue: [^ ships first push].
   event isArrowRight ifTrue: [^ ships first right].
   event isArrowLeft ifTrue: [^ ships first left].
   event isArrowDown ifTrue: [^ ships first fireTorpedo].
   key = $w ifTrue: [^ ships second push].
   ...
</screen>

<para>Syntactically, a method consists of:
</para>
<itemizedlist>
<listitem><para>the method pattern, containing the name (<emphasis>i.e.</emphasis>,
 <literal>keyStroke:</literal>) and any arguments. Here <literal>event</literal> is a
 <literal>KeyboardEvent</literal>,
</para>
</listitem><listitem><para>comments (these may occur anywhere, but the convention is to
 put one at the top that explains what the method does),
</para> 
</listitem><listitem><para>declarations of local variables (<emphasis>i.e.</emphasis>, <literal>key</literal>),
</para>
</listitem><listitem><para>and any number of expressions separated by dots; here there are
 5.
</para>
</listitem></itemizedlist>
<para>The evaluation of any expression preceded by a ^ (typed as ^)
will cause the method to exit at that point, returning the value of
that expression. A method that terminates without explicitly returning
the value of some expression will always return the current
value of <literal>self</literal>.
</para>
<para>Arguments and local variables should always start with lower case
letters. Names starting with upper-case letters are assumed to be
global variables. Class names, like <literal>Character</literal>, for example,
are simply global variables referring to the object representing
that class.
</para>
<para>As you might suspect from <link linkend="classesCount">classesCount</link>, <literal>Smalltalk allClasses size</literal> just
sends the <literal>#allClasses</literal> message to a dictionary named <literal>Smalltalk</literal>.
As with any other object, you can inspect this dictionary.  You can note a case of
self-reference here: the value of <literal>Smalltalk at: #Smalltalk</literal> is <literal>Smalltalk</literal>.
</para>
</sect1>
<sect1 label="" id="Block-syntax">
<title>Block syntax</title>
<indexterm role="cp"><primary>block</primary></indexterm>

<para>Blocks provide a mechanism to defer the evaluation of expressions. A
block is essentially an anonymous function. A block is evaluated by
sending it the message <literal>#value</literal>. The block answers the value of the
last expression in its body, unless there is an explicit return (with
^), in which case it returns the value of the subsequent
expression).
</para>
<screen>[ 1 + 2 ] value
&#8658; 3
</screen>
<indexterm role="cp"><primary>block</primary><secondary>parameter</secondary></indexterm><para>Blocks may take parameters, each of which is declared with a leading
colon. A vertical bar separates the parameter declaration(s) from the
body of the block. To evaluate a block with one parameter, you must
send it the message <literal>#value:</literal> with one argument. A two-parameter
block must be sent <literal>#value:value:</literal>, and so on, up to 4 arguments:
</para>
<screen>[ :x | 1 + x ] value: 2
&#8658; 3
[ :x :y | x + y ] value: 1 value: 2
&#8658; 3
</screen>
<para>If you have a block with more than four parameters, you must use
<literal>#valueWithArguments:</literal> and pass the arguments in an array. (A block
with a large number of parameters is often a sign of a design
problem.)
</para>
<indexterm role="cp"><primary>block</primary><secondary>local variable</secondary></indexterm><para>Blocks may also declare local variables, which are surrounded by
vertical bars, just like local variable declarations in a
method. Locals are declared after any arguments:
</para>
<screen>[ :x :y | | z | z := x + y. z ] value: 1 value: 2
&#8658; 3
</screen>
<para>Blocks can refer to
variables of the surrounding environment.
Blocks are said to &#8220;close over&#8221; their lexical environment, which
is a fancy way to say that they remember and refer to variables in
their surrounding lexical context &#8211; those apparent in their enclosing text.
</para>
<para>The following block refers
to the variable x of its enclosing environment:
</para>
<screen>|x|
x := 1.
[ :y | x + y ] value: 2
&#8658; 3
</screen>
<indexterm role="cp"><primary>block</primary><secondary>assigned to a variable</secondary></indexterm><para>Blocks are instances of the class <literal>BlockClosure</literal>. This means
that they are objects, so they can be assigned to variables and passed
as arguments just like any other object.
</para>
<para>Consider the example below to compute the divisors of an integer:
</para>
<anchor id="computeDivisors"/>
<screen>| n m |
n := 60.
m := 45.
(1 to: n) select: [:d | n \\ d = 0 ].
&quot;&#8658; #(1 2 3 4 5 6 10 12 15 20 30 60)&quot;
(1 to: m) select: [:d | m \\ d = 0]
&quot;&#8658; #(1 3 5 9 15 45)&quot;
</screen>

<para>The problem with this example is the code duplication in the divisor
computation. We can avoid duplication with a dedicated block doing the
computation and assigning it to a variable:
</para>
<anchor id="blockDivisor"/>
<para><emphasis>How will you
rewrite <link linkend="computeDivisors">computeDivisors</link> to avoid code duplication?</emphasis>
</para>


<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>atRandom</literal></tertiary></indexterm><para>The <literal>SpaceWar&gt;&gt;teleport:</literal> method contains a nice example
using a block to avoid code duplication to generate random abscissa
and ordinate coordinates. Each time a new coordinate is needed, the
message <literal>#value</literal> is sent to the block of code:
</para>
<anchor id="teleportMethod"/>
<screen>SpaceWar&gt;&gt;teleport: aShip
  &quot;Teleport a ship at a random location&quot;
  | area randomCoordinate |
  aShip resupply.
  area := self morphLocalBounds insetBy: 20.
  randomCoordinate := [(area left to: area right) atRandom].
  aShip 
    velocity: 0 @ 0;
    morphPosition: randomCoordinate value @ randomCoordinate value
</screen>


</sect1>
<sect1 label="" id="Control-flow-with-block-and-message">
<title>Control flow with block and message</title>
<indexterm role="cp"><primary>control flow</primary></indexterm>

<para>Deciding to send <emphasis>this</emphasis> message instead of <emphasis>that</emphasis>
one is called <firstterm>control flow</firstterm> &#8211;
controlling the flow of a computation.
Smalltalk offers no special constructs for control flow.
Decision logic is expressed by sending messages to booleans, numbers
and collections with blocks as arguments.
</para>
<bridgehead renderas="sect2">Test</bridgehead>
<indexterm role="cp"><primary>control flow</primary><secondary>test</secondary></indexterm><indexterm role="cp"><primary>test</primary></indexterm>
<indexterm role="cp"><primary>boolean</primary></indexterm>

<para>Conditionals are expressed by sending one of the messages
<literal>#ifTrue:</literal>, <literal>#ifFalse:</literal> or <literal>#ifTrue:ifFalse:</literal> to the result
of a boolean expression:
</para>
<screen>(17 * 13 &gt; 220)
  ifTrue: [ 'bigger' ]
  ifFalse: [ 'smaller' ]
&#8658; 'bigger'
</screen>
<para>The class <literal>Boolean</literal> offers a fascinating insight into how much
of the Smalltalk language has been pushed into the class
library. <literal>Boolean</literal> is the abstract superclass of the
<emphasis>Singleton</emphasis> classes <literal>True</literal> and <literal>False</literal><footnote><para>A
singleton class is designed to have only one instance. Each of
<literal>True</literal> and <literal>False</literal> classes has one instance, the values 
<literal>true</literal> and <literal>false</literal>.</para></footnote>.
</para>
<para>Most of the behaviour of <literal>Boolean</literal> instances can be understood
by considering the method <literal>ifTrue:ifFalse:</literal>, which takes two
blocks as arguments:
</para>
<screen>(4 factorial &gt; 20) ifTrue: [ 'bigger' ] ifFalse: [ 'smaller' ]
&#8658; 'bigger'
</screen>
<para>The method is abstract in <literal>Boolean</literal>. It is implemented in its
concrete subclasses <literal>True</literal> and <literal>False</literal>:
</para>
<anchor id="ifTrueIfFalse"/>
<screen>True&gt;&gt;ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
  ^ trueAlternativeBlock value

False&gt;&gt;ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
  ^ falseAlternativeBlock value
</screen>

<para>In fact, this is the essence of OOP: when a message is sent to an
object, the object itself determines which method will be used to
respond. In this case an instance of True simply evaluates the true
alternative, while an instance of False evaluates the false
alternative. All the abstract <literal>Boolean</literal> methods are implemented
in this way for <literal>True</literal> and <literal>False</literal>. Look at another
example:
</para>
<anchor id="negation"/>
<screen>True&gt;&gt;not
   &quot;Negation----answer false since the receiver is true.&quot;
   ^ false
</screen>

<para>Booleans offer several useful convenience methods, such as
<literal>ifTrue:</literal>, <literal>ifFalse:</literal>, <literal>ifFalse:ifTrue:</literal>. You also
have the choice between eager and lazy conjunctions and disjunctions:
</para>
<screen>(1 &gt; 2) &amp; (3 &lt; 4)
&#8658; false  &quot;must evaluate both sides&quot;
(1 &gt; 2) and: [ 3 &lt; 4 ]
&#8658; false  &quot;only evaluate receiver&quot;
(1 &gt; 2) and: [ (1 / 0) &gt; 0 ]
&#8658; false  &quot;argument block is never evaluated, so no exception&quot;
</screen>
<para>In the first example, both <literal>Boolean</literal> subexpressions are
evaluated, since <literal>&amp;</literal> takes a <literal>Boolean</literal> argument. In
the second and third examples, only the first is evaluated, since
<literal>and:</literal> expects a <literal>Block</literal> as its argument. The
<literal>Block</literal> is evaluated only if the first argument is true.
</para>
<anchor id="implementingAndOr"/>
<para><emphasis>Try to imagine how <literal>and:</literal> and <literal>or:</literal> are  implemented.</emphasis>
</para>


<para>In the <link linkend="spacewarKeyStroke">spacewarKeyStroke</link> at the beginning of this chapter, there
are 4 control flow <literal>#ifTrue:</literal> messages. Each argument is a block of
code and when evaluated, it explicitly returns an expression,
therefore interrupting the method execution.
</para>
<para>In the code fragment of <link linkend="shipLost">shipLost</link> below, we test if a ship is
lost in deep space. It depends on two conditions:
</para><orderedlist numeration="arabic">
<listitem><para>the ship is out of the game play area, tested with the
  <literal>#isInOuterSpace</literal> message,
</para>
</listitem><listitem><para>the ship takes the direction of deep space, tested with the
  <literal>#isGoingOuterSpace</literal> message.
</para>
</listitem></orderedlist>
<para>Of course, the condition #2 is only tested when condition #1 is true.
</para>
<anchor id="shipLost"/>
<screen>&quot;Are we out of screen?
If so we move the mobile to the other corner
and slow it down by a factor of 2&quot;
(self isInOuterSpace and: [self isGoingOuterSpace])
  ifTrue: [
     velocity := velocity / 2.
     self morphPosition: self morphPosition negated]
</screen>


<bridgehead renderas="sect2">Loop</bridgehead>
<indexterm role="cp"><primary>control flow</primary><secondary>loop</secondary></indexterm><indexterm role="cp"><primary>loop</primary></indexterm>

<para>Loops are typically expressed by sending messages to blocks, integers
or collections. Since the exit condition for a loop may be repeatedly
evaluated, it should be a block rather than a boolean value. Here is
an example of a very procedural loop:
</para>
<screen>n := 1.
[ n &lt; 1000 ] whileTrue: [ n := n * 2 ].
n &#8658; 1024
</screen>
<para><literal>#whileFalse:</literal> reverses the exit condition:
</para>
<screen>n := 1.
[ n &gt; 1000 ] whileFalse: [ n := n * 2 ].
n &#8658; 1024
</screen>
<para>You can check all the alternatives in the <command>controlling</command> method
category of the class <literal>BlockClosure</literal>.
</para>
<para><literal>#timesRepeat:</literal> offers a simple way to implement a fixed iteration:
</para>
<screen>n := 1.
10 timesRepeat: [ n := n * 2 ].
n &#8658; 1024
</screen>
<para>We can also send the message <literal>#to:do:</literal> to a number which then acts
as the initial value of a loop counter. The two arguments are the
upper bound, and a block that takes the current value of the loop
counter as its argument:
</para>
<screen>result := String new.
1 to: 10 do: [:n | result := result, n printString, ' '].
result &#8658; '1 2 3 4 5 6 7 8 9 10 '
</screen>
<para>You can check all the alternatives in the <command>intervals</command> method
category of the class <literal>Number</literal>.
</para>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
If the exit condition of method like <literal>whileTrue:</literal> is
never satisfied, you may have implemented an <firstterm>infinite loop</firstterm>.
Just type <userinput>Cmd-period</userinput> to get the Debugger.
</para>
</sect1>
<sect1 label="" id="Spacewar_0021_0027s-methods">
<title>Spacewar!&#8217;s methods</title>
<para>You are already acquainted to the writing of simple methods for the
Spacewar! game. We will write some more and learn how to categorize
them.
</para>
<sect2 label="">
<title>Initializing the game play</title>
<indexterm role="cp"><primary>method</primary><secondary>creating</secondary></indexterm>
<para>We want to add the <literal>initialize</literal> method to our <literal>SpaceWar</literal>
class. Of course we need to use the System Browser:
...World menu &#8594; <command>Open...</command> &#8594;
<command>Browser</command>...
</para>
<para>As a reminder, proceed as follows (if necessary observe
<link linkend="ch02_002dbrowserDetailed">ch02-browserDetailed</link>):
</para>
<orderedlist numeration="arabic">
<listitem><para>In the <command>Class Category</command> pane at the far left, scroll down
 to the <command>Spacewar!</command> category, then select it.
</para>
</listitem><listitem><para>In the <command>Class</command> pane, select the class <literal>SpaceWar</literal>.
</para>
</listitem><listitem><para>Below, click the <command>instance</command> button to expose the
 instance side methods of the <literal>SpaceWar</literal> class. It is the
 default behavior of the browser anyway, so you can skip this step as
 long as you have not clicked on the <command>class</command> button.
</para>
</listitem><listitem><para>In the <command>Method Category</command> pane, select the category
 <command>-- all --</command>. A method source code template shows up in the pane
 below:
</para><screen>messageSelectorAndArgumentNames
  &quot;comment stating purpose of message&quot;
  | temporary variable names |
  statements
</screen>
<para>The template comes in four lines: the method name, a comment, local
  variable declaration and statements. You can select all and delete
  it or edit each line of the template as needed.
</para>
<para>In our case, we select it all and replace it with the
  <literal>SpaceWar&gt;&gt;initialize</literal> source code:
</para>

<anchor id="initSpacewar"/>
<screen>SpaceWar&gt;&gt;initialize
  &quot;We want to capture keyboard and mouse events&#44; 
  start the game loop(step) and initialize the actors.&quot;
  super initialize.
  color := self defaultColor.
  self setProperty: #'handlesKeyboard' toValue: true.
  self setProperty: #'handlesMouseOver:' toValue: true.
  self startSteppingStepTime: self stepTime.
  self initializeActors
</screen>

</listitem><listitem><para>Once edited, save-it with <userinput>Ctrl-s</userinput> or
  ...right click &#8594; <command>Accept (s)</command>...
</para>
</listitem></orderedlist>
<para>The newly created method shows up in the <command>Method</command> pane. You can
  get it categorized automatically too: with the mouse, go over the
  <command>Method Category</command> pane ...right click &#8594;
  <command>categorize all uncategorized (c)</command>..
</para>
<anchor id="categorizeTeleport"/>
<para><emphasis>In the
<literal>SpaceWar</literal> class, add the <literal>teleport:</literal> method as defined
in <link linkend="teleportMethod">teleportMethod</link> then categorize it in the <command>events</command>
method category.</emphasis>
</para>


</sect2>
<sect2 label="">
<title>Space ship controls</title>

<para>In a previous chapter, you wrote as an exercise simple implementation
of the <link linkend="simpleControls">control ship methods</link>. The definitive
control methods of the <literal>SpaceShip</literal> class are rewritten as:
</para>
<anchor id="shipControls"/>
<screen>SpaceShip&gt;&gt;push
  &quot;Init an acceleration boost&quot;
  fuel isZero ifTrue: [^ self].
  fuel := fuel - 1.
  acceleration := 50

SpaceShip&gt;&gt;unpush
  &quot;Stop the acceleration boost&quot;
  acceleration := 0

SpaceShip&gt;&gt;right
  &quot;Rotate the ship to its right&quot;
  self heading: self heading + 0.1
  
SpaceShip&gt;&gt;left
  &quot;Rotate the ship to its left&quot;
  self heading: self heading - 0.1
</screen>

<para>Observe the <literal>right</literal> and <literal>left</literal> methods, they are mostly
identical to the ones asked in <link linkend="shipHeading">shipHeading</link>. We don&#8217;t modify
directly the <literal>heading</literal> attribute, we use the methods
<literal>heading:</literal> and <literal>heading</literal> to read and write this
information.
</para>
<anchor id="categorizeControls"/>
<para><emphasis>Categorize the control methods in a newly created method
category named <command>control</command>.</emphasis>
</para>


<para>Control will not be complete without the method to fire a torpedo. It
is more complex to correctly initialize a torpedo.
This is because a space ship is typically in motion, and in addition
its heading and velocity are changing frequently.
Therefore the torpedo must be set up according to the current 
space ship position, heading, and velocity before being fired.
</para>
<anchor id="fireTorpedo"/>
<screen>SpaceShip&gt;&gt;fireTorpedo
  &quot;Fire a torpedo in the direction of
  the ship heading with its velocity&quot;
  | torpedo | 
  torpedoes isZero ifTrue: [ ^ self].
  torpedoes := torpedoes - 1.
  torpedo := Torpedo new.
  torpedo 
    position: position + self nose;
    heading: self heading;
    velocity: velocity;
    color: self color muchLighter.
  owner addTorpedo: torpedo
</screen>


<anchor id="ch05_002dSpacewarGamePlay"/>
<inlinemediaobject><imageobject><imagedata fileref="ch05-SpacewarGamePlay.png" format="PNG"></imagedata></imageobject></inlinemediaobject>



</sect2>
<sect2 label="">
<title>Collisions</title>
<para>In a previous chapter we gave a small taste of the collision detection
code between the space ships and the central star. It relies on
iterator, block of code and control flow.
</para>
<para>However we have other scenarios as ship-ship, torpedo-Sun and
torpedo-ship collisions.
</para>
<anchor id="shipCollision"/>
<para><emphasis>How will you write the
method to detect the collision between the two ships and take action
accordingly? (Adapt from <link linkend="shipSunCollision">shipSunCollision</link>).</emphasis>
</para>


<para>The detection between the two ships and the possible numerous
torpedoes required two enumerators with nested blocks of code:
</para>
<anchor id="shipsTorpedoesCollision"/>
<screen>SpaceWar&gt;&gt;collisionsShipsTorpedoes
ships do: [:aShip | 
  torpedoes do: [:aTorpedo |
    (aShip morphPosition dist: aTorpedo morphPosition) &lt; 15 ifTrue: [
      aShip flashWith: Color red.
      aTorpedo flashWith: Color orange.
      self destroyTorpedo: aTorpedo.
      self teleport: aShip]
  ]
]
</screen>


<para>The last torpedo-Sun scenario collision is left as an exercise for
you.
</para>
<anchor id="torpedoSunCollision"/>
<para><emphasis>Write the method to detect the collisions between the torpedoes
and the central star and take action accordingly. (Adapt from
<link linkend="shipSunCollision">shipSunCollision</link> and <link linkend="shipsTorpedoesCollision">shipsTorpedoesCollision</link>.)</emphasis>
</para>

<!-- -->
</sect2>
</sect1>
</chapter>
<chapter label="" id="Visual-with-Morph">
<title>Visual with Morph</title>

<blockquote><attribution>John   Maloney</attribution>
<para>Morphic is a user interface framework that makes it easy and fun to
build lively interactive user interfaces.
</para></blockquote>





<para>What would we expect if we asked for good support for building GUIs in a
programming system?
</para>
<para>All modern computers (and phones, etc) have high resolution color
displays. Any software running on them, that is accessible to a user,
needs to show stuff on that Display.
</para>
<para>Conventional UI managers (that is, Operating Systems and Web Browsers)
started by including only the most basic GUI elements first: basic
text editors, buttons, simple lists, scrolling for large content, and
(usually) multiple resizeable overlapping windows. Anything else needs
to be handled via additional libraries. While there are libraries for
handling richer content (D3.js and Matplotlib are examples), the
result is not consistent, neither for developers nor for users.
</para>
<para>Cuis-Smalltalk takes a different approach, pioneered by Smalltalk-80 and
especially Self. We will get into detail in the next chapter,
<emphasis>The Fundamentals of Morph</emphasis>.  For now, let&#8217;s deal with Morphs directly.
</para>
<para>We take the high quality Display for granted, as well as a mouse, finger or
other pointing device. And we build on the objective of providing
ample possibilities for GUIs both in existing, and in novel styles and
designs yet to be invented. Additionally, in the usual Smalltalk way,
all the framework code is available for study and modification. There
are no third party libraries. Only the lowest level code is
precompiled, but that still can be overriden or changed.
</para>
<para>Therefore every object you see in Cuis-Smalltalk is a <literal>Morph</literal> or is
composed of <literal>Morph</literal>s.  Basically, a <literal>Morph</literal> is an object
with state and behavior that can also depict itself on a computer
display screen.
</para>
<para>Because Morphs are useful, when you look at
class <literal>Morph</literal> in a Hierarchy Browser you will
see a large number of methods and many, many subclasses.
But the basic ideas are quite simple.
</para>



<sect1 label="" id="Installing-a-Package">
<title>Installing a Package</title>
<para>This chapter will require you to install the package
<command>UI-Shapes.pck.st</command>, it is part of the
<ulink url="https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-UI">Cuis-Smalltalk-UI</ulink>
project. To fetch this package from the web, you have two options:
</para>
<orderedlist numeration="arabic">
<listitem><para>Grab the file
  <filename><ulink url="https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-UI/raw/main/tools/UI-Shapes.pck.st">UI-Shapes.pck.st</ulink></filename>
  and save it in the same folder as your Cuis-Smalltalk image file.
</para>
</listitem><listitem><para>In the Cuis-Smalltalk image folder, clone its Git repository:
</para>
<screen>git clone git@github.com:Cuis-Smalltalk/Cuis-Smalltalk-UI.git
</screen>
<para>Along the <command>UI-Shapes.pck.st</command> packages there are other ones
you can also discover in this repository.
</para>
</listitem></orderedlist>
<indexterm role="cp"><primary>package</primary><secondary>load</secondary><tertiary>by code</tertiary></indexterm><para>Once done, in a Workspace execute the code to install the package:
</para>
<screen>Feature require: 'UI-Shapes'
</screen>
<para>Your Cuis-Smalltalk environment is now equiped for the next sections of this
chapter.
</para>
</sect1>
<sect1 label="" id="Ellipse-Morph">
<title>Ellipse Morph</title>
<indexterm role="cp"><primary>morph</primary><secondary>ellipse</secondary></indexterm><para>Let&#8217;s start with one of the basic morphs, an <literal>EllipseMorph</literal>.
You could write <literal>EllipseMorph new openInWorld</literal> and
<command><emphasis role="bold">D</emphasis>o-it</command>, but we are doing visual things for now, so let&#8217;s
get a World Menu and select from <command>New Morph...</command> <command>Basic</command>
submenu and drag onto the desktop.
</para>
<para>Every time one obtains a morph from a <command>New Morph...</command> submenu,
one gets a different morph but made to a standard style.
</para>
<anchor id="ch06_002d01_002dEllipseMorphFromMenu"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-01-EllipseMorphFromMenu.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>The basic challenge of <firstterm>user interface design</firstterm> is
to communicate visibility and control.
Where am I?  What can I do here?
</para>
<para>One of the balance points in design is how to eliminate clutter.  One
useful strategy is to reveal capabilities in context as they are
needed.
</para>
<indexterm role="cp"><primary>morph</primary><secondary>halo</secondary></indexterm><para>In the case of Cuis-Smalltalk, you have to know some basics because helpful
tools are there but stay out of the way.  At any time you can
<userinput>Right-Click</userinput> on the desktop to get the World Menu.  You can also
<userinput>Middle-Click</userinput> on any <literal>Morph</literal> to get a <firstterm>halo</firstterm> of
<firstterm>construction handles</firstterm>, which show up as small colored circular
icons.  If you pause the cursor over one of these, you get a <firstterm>tool
tip</firstterm>, a temporary text popup who&#8217;s name should give a clue to its
usage.
</para>
<para>If you click elsewhere the construction handles leave, but you can get them
back at any time with a mouse click.
</para>
<anchor id="ch06_002d03_002dDragToEnlarge"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-03-DragToEnlarge.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Now that you know this, move the yellow lower right handle with tool
tip <command>Change size</command> via <firstterm>Click-Drag</firstterm>.  Just hold down the
left mouse button while the cursor is over the handle, move the cursor
to the right and down, and release the mouse button.
</para>
<anchor id="ch06_002d04_002dEnlarged"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-04-Enlarged.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


</sect1>
<sect1 label="" id="Submorph">
<title>Submorph</title>
<indexterm role="cp"><primary>morph</primary><secondary>submorph</secondary></indexterm><indexterm role="cp"><primary>morph</primary><secondary>rectangle</secondary></indexterm><para>Morphs can contain other morphs.  These interior morphs are called
<firstterm>submorph</firstterm>s of their containing morph. Again, you can do this by
writing the software &#8220;code&#8221;, but let&#8217;s do it directly with a
<literal>BoxedMorph</literal>.
</para>
<para>First we obtain a <literal>BoxedMorph</literal> from the <command>New morph...</command>
submenus. The <literal>BoxedMorph</literal> instance displays itself as a
rect with a border.
</para>
<anchor id="ch06_002d05_002dAddRectangle"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-05-AddRectangle.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Now drag the rect over the ellipse and <userinput>Middle-Click</userinput> on the
rect and click on the blue construction handle to gets the rect&#8217;s
<firstterm>Morph Menu</firstterm>.  Use the menu selection <command>embed into</command> and
select the ellipse as its new parent.
</para>
<anchor id="ch06_002d06_002dEmbedRectIntoEllipse"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-06-EmbedRectIntoEllipse.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Now when you click-drag the ellipse, or use the <command>Pick up</command> or
<command>Move</command> construction handles, the rect is just a decoration for
the ellipse.
</para>
<para>Indeed, the rect seems to have fused into the ellipse.  Using the
mouse where the rect shows itself is just using the mouse on the
ellipse.  This rect does not have many interesting behaviors.
</para>
<para>Let&#8217;s add a behavior to just this one <literal>BoxedMorph</literal>.
</para>
</sect1>
<sect1 label="" id="A-brief-introduction-to-Inspectors">
<title>A brief introduction to Inspectors</title>
<para>To get the construction halo for an interior morph, just
<userinput>Middle-Click</userinput> multiple times to &#8220;drill down&#8221; through the
submorph hierarchy.
</para>
<anchor id="ch06_002d07_002dMiddleClickRect"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-07-MiddleClickRect.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<anchor id="ch06_002d08_002d2ndMidClckToSubmorph"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-08-2ndMidClckToSubmorph.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>There is an orange handle on the right, just under the green
<command>Duplicate</command> handle.  <userinput>Left-Click</userinput> this to get the
<command>Debug</command> menu.  Use this menu to get an <firstterm>Inspector</firstterm> for the
rect.
</para>
<indexterm role="cp"><primary>tools</primary><secondary>inspector</secondary></indexterm><indexterm role="cp"><primary>inspector</primary><see>tools</see></indexterm>
<para>Observe <link linkend="ch06_002d11aColorClickOnRect">ch06-11aColorClickOnRect</link>, on the left we have a pane for
self, all inst vars, and the individual instance variables.  Clicking
to select &#8220;all inst vars&#8221; and the values pane on the right shows
that the owner of the rect is the ellipse and rect currently has no
submorphs.
</para>
<para>The lower pane is a Smalltalk code editor, basically a workspace,
where <literal>self</literal> is bound to the object we are inspecting.
</para>
<para>Inspectors work for every object by the way, not just morphs.
</para>
<anchor id="ch06_002d11aColorClickOnRect"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-11aColorClickOnRect.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>To add a behavior to all instances of a class, we create an instance
method.  Here we are going to create a behavior for &#8220;just this one
<literal>BoxedMorph</literal> instance&#8221;.
</para>
<anchor id="morphProperties"/><indexterm role="cp"><primary>morph</primary><secondary>properties</secondary></indexterm><para>In addition to instance variables, a morph can have any number of
named <firstterm>properties</firstterm> which can be different for each morph.
</para>
<para>We add two properties here:
</para>
<anchor id="editMorphBehaviorInspector"/>
<screen>self setProperty: #handlesMouseDown: toValue: true.
self setProperty: #mouseButton1Up:localPosition:
   toValue: [:ignoredEvent :ignoredPosition| self color: Color random]
</screen>

<para>These properties are special to the user interface.  You can find
methods with these names in the <literal>Morph</literal> class to see what they
do.
</para>
<para>After selecting the text and <command><emphasis role="bold">D</emphasis>o-it</command>, each time you
<userinput>Left-Click</userinput> on the rect it changes color!
</para>
<para>Note that you can no longer move the ellipse by mouse-down on the
rect, because the rect now takes the mouse event.  You have to
mouse-down on the ellipse.  More on this below.
</para>
<indexterm role="cp"><primary>morph</primary><secondary>move/pick up</secondary></indexterm><para>One quick note on <command>Move</command> versus <command>Pick up</command>.  <command>Move</command>
moves a submorph &#8220;within&#8221; its parent.  <command>Pick up</command> grabs a morph
&#8220;out&#8221; of its parent.
</para>
<anchor id="ch06_002d09_002dMove_002dWithin"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-09-Move-Within.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<anchor id="ch06_002d10_002dPickUp_002d2_002dMoveOut"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-10-PickUp-2-MoveOut.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Before we go on, let&#8217;s use an inspector on the ellipse to change
values of a couple of its instance variables.
</para>
<anchor id="ch06_002d12_002dInspectEllipse"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-12-InspectEllipse.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Observe <link linkend="ch06_002d14_002dSetBorderColor">ch06-14-SetBorderColor</link> and <link linkend="editShapeInspector">editShapeInspector</link>. In
the lower pane of the inspector, code can be executed in the context
of the inspected object. <literal>self</literal> refers to the instance. Here
the pane contains code to set the borderWidth and the borderColor.
</para>
<anchor id="editShapeInspector"/>
<screen>self borderWidth: 10.
self borderColor: Color blue
</screen>

<anchor id="ch06_002d14_002dSetBorderColor"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-14-SetBorderColor.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>In the typical case one wants to refine or change behaviors for all
instances of a class.
</para>
</sect1>
<sect1 label="" id="Building-your-specialized-Morph">
<title>Building your specialized Morph</title>
<indexterm role="cp"><primary>morph</primary><secondary>subclass</secondary></indexterm><para>Let&#8217;s make a simple subclass which changes color when
<userinput>Left-Click</userinput>ed.  Create a new class just as we did with Spacewar!
but subclass <literal>EllipseMorph</literal> with <literal>#ColorClickEllipse</literal>.
</para>
<screen>EllipseMorph subclass: #ColorClickEllipse
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>
<para>Save the class definition with <userinput>Ctrl-s</userinput>.
</para>
<indexterm role="cp"><primary>event</primary><secondary>testing</secondary></indexterm><para><userinput>Right-Click</userinput> on the <command>Message Category</command> pane and select
<command>new category...</command>.  This brings up a number of selections and
allows us to create new ones.  Select &#8220;event handling testing&#8221;.
Then add the method <literal>ColorClickEllipse&gt;&gt;handlesMouseDown:</literal>.
</para>
<screen>handlesMouseDown: aMouseButtonEvent
  &quot;Answer that I do handle mouseDown events&quot;
  ^ true

</screen>
<indexterm role="cp"><primary>event</primary><secondary>handling</secondary></indexterm><para>Likewise, add a new catagory &#8220;event handing&#8221; and add the other
method we need.
</para>
<screen>mouseButton1Up: aMouseButtonEvent localPosition: localEventPosition
   &quot;I ignore the mouseEvent information and change my color.&quot;
   self color: Color random
</screen>
<para>Now, you have created a new Morph class and can select a
<literal>ColorClickEllipse</literal> from the World Menu <command>New Morph..</command> and
try it out.  These are fun to <userinput>Left-Click</userinput> on.  Make as many as
you want!
</para>
<anchor id="ch06_002d15_002dColorClickEllipse"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-15-ColorClickEllipse.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Now you know how to specialize an individual morph, or make a whole
new class of them!
</para>

</sect1>
<sect1 label="" id="Spacewar_0021-Morphs">
<title>Spacewar! Morphs</title>

<sect2 label="">
<title>All Morphs</title>
<para>Previously we defined the actors of the game as subclasses of the very
general <literal>Object</literal> class (See
<link linkend="torpedoClassVariables">torpedoClassVariables</link>). However the game play, the central star,
the ships and the torpedoes are visual objects, each with a dedicated
graphic shape:
</para>
<itemizedlist>
<listitem><para>the game play is a simple rectangular area filled with the
  black color,
</para>
</listitem><listitem><para>the central star is a fluctuating yellow disk with an orange
  aura,
</para>
</listitem><listitem><para>the ships are rotating quadrangles each one painted with a
  different color,
</para>
</listitem><listitem><para>a torpedo is a rotating triangle to paint with a different
  color depending on the firing ship.
</para>  
</listitem></itemizedlist>
<para>Therefore it makes sense to turn these actors into kinds of
<literal>Morph</literal>s, the visual entity of Cuis-Smalltalk. To do so, point a System
Browser to the class definition of each actor, replace the parent
class <literal>Object</literal> by <literal>PlacedMorph</literal><footnote><para>A
<literal>PlacedMorph</literal> is a kind of <literal>Morph</literal> with a supplementary
<literal>location</literal> attribute; so it can be instructed to move, to
scale and to rotate in the screen.</para></footnote>, then save the class definition
with <userinput>Ctrl-s</userinput>.
</para>
<para>For example, the torpedo class as seen in <link linkend="torpedoClassVariables">torpedoClassVariables</link>
is edited as:
</para>
<screen>PlacedMorph subclass: #Torpedo
   instanceVariableNames: 'position heading velocity lifeSpan'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>
<para>Moreover, a placed Morph already knows about its position and
orientation on screen &#8211; it can be dragged and moved in the screen and
rotated with the mouse cursor. Therefore the <literal>position</literal> and
<literal>heading</literal> instance variables are redundant and should be
removed. For now we keep it, it will be removed later when we will
know how to replace each of its use cases with its appropriate Morph
counterpart.
</para>
<anchor id="allActorsMorph"/>
<para><emphasis>Edit
<literal>SpaceWar</literal>&#44; <literal>CentralStar</literal> and <literal>SpaceShip</literal>
to be subclasses of the <literal>PlacedMorph</literal> class.</emphasis>
</para>


<para>As explained in the previous sections of this chapter, a morph can be
embedded within another morph. In Spacewar!, a <literal>SpaceWar</literal> morph
instance presenting the game play, it is the <emphasis>owner</emphasis> of the central
star, space ship and torpedo morphs. Put in other words, the central
star, space ships and torpedoes are <emphasis>submorphs</emphasis> of a
<literal>SpaceWar</literal> morph instance.
</para>
<para>The <literal>SpaceWar&gt;&gt;initializeActors</literal> code in <link linkend="initActors">initActors</link> is
 not complete without adding and positioning the central star and
 space ships as submorphs of the Spacewar! game play:
</para>
<anchor id="initFullActors"/>
<screen>SpaceWar&gt;&gt;initializeActors
   centralStar := CentralStar new.
   self addMorph: centralStar.
   centralStar morphPosition: 0 @ 0.
   torpedoes := OrderedCollection new.
   ships := Array with: SpaceShip new with: SpaceShip new.
   self addAllMorphs: ships.
   ships first 
      morphPosition: 200 @ -200;
      color: Color green.
   ships second 
      morphPosition: -200 @ 200;
      color: Color red
</screen>

<para>There are two important messages: <literal>#addMorph:</literal> and
<literal>#morphPosition:</literal>. The former asks to the receiver morph to embed
its morph argument as a submorph, the latter asks to set the receiver
coordinates in its owner&#8217;s reference frame. From reading the code, you
deduce the origin of the owner reference frame is its middle, indeed
our central star is in the middle of the game play.
</para>
<para>There is a third message not written here, <literal>#morphPosition</literal>, to ask
the coordinates of the receiver in its owner&#8217;s reference frame.
</para>
<para>Remember our discussion about the <literal>position</literal> instance
variable. Now you clearly understand it is redundant and we remove it
from the <literal>SpaceShip</literal> and <literal>Torpedo</literal> definitions. Each time
we need to access the position, we just write <literal>self
morphPosition</literal> and each time we need to modify the position we write
<literal>self morphPosition: newPosition</literal>. More on that later.
</para>

<!-- refactor ship and torpedo as mobile entity -->
<anchor id="artRefactoring"/></sect2>
<sect2 label="">
<title>The art of refactoring</title>
<indexterm role="cp"><primary>refactoring</primary></indexterm>

<para>In our <link linkend="newtonModel">newtonian model</link> we explained the
space ships are subjected to the engine acceleration and the gravity
pull of the central star. The equations are described in
<link linkend="motionEquations">motionEquations</link>.
</para>
<para>Based on these mathematics, we wrote the <literal>SpaceShip&gt;&gt;update:</literal>
method to update the ship position according to the elapsed time &#8211;
see <link linkend="spaceShipMechanic">spaceShipMechanic</link>.
</para>
<para>So far in our model, a torpedo is not subjected to the central star&#8217;s
gravity pull nor its engine acceleration. It is supposing its mass is
zero which is unlikely. Of course the <literal>Torpedo&gt;&gt;update:</literal>
method is simpler than the space ship counter part &#8211; see
<link linkend="torpedoMechanic">torpedoMechanic</link>. Nevertheless, it is more accurate and even more
fun that the torpedoes are subjected to the gravity pull<footnote><para>So a
torpedo should come with a mass.</para></footnote> and its engine acceleration; an
agile space ship pilot could use gravity assist to accelerate a
torpedo fired with a path close to the central star.
</para>
<para>What are the impacts of these considerations on the torpedo and space
ship entities?
</para>
<orderedlist numeration="arabic">
<listitem><para>They will share <emphasis>common states</emphasis> as the mass, the
  position, the heading, the velocity and the acceleration.
</para>
</listitem><listitem><para>They will share <emphasis>common behaviors</emphasis> as the necessary
  computations to update the position, direction, gravity pull and
  velocity.
</para>
</listitem><listitem><para>They will have <emphasis>different states</emphasis>: a torpedo
  has a life span state while a space ship has fuel tank capacity and
  torpedoes stock states.
</para>
</listitem><listitem><para>They will have <emphasis>different behaviors</emphasis>: a
  torpedo self destructs when its life span expires, a space ship
  fires torpedoes and accelerates as long as its fuel tank and its
  torpedoes count are not zero.
</para>
</listitem></orderedlist>
<para>Shared state and behaviors suggest a common class.  Unshared states
and behaviors suggests specialized subclasses which embody
the differences.  So let us &#8220;factor out&#8221; the shared elements of
the <literal>SpaceShip</literal> and <literal>Torpedo</literal>
classes into a common ancestor class; one more specialized
than the <literal>Morph</literal> class they currently share.
</para>
<para>Doing such analysis on the computer model of the game is part of the
<firstterm>refactoring</firstterm> effort to avoid behavior and state duplications while
making more obvious the common logic in the entities. The general idea of
code refactoring is to rework existing code to make it more elegant,
understandable and logical.
</para>
<para>To do so, we will introduce a <literal>Mobile</literal> class, a kind of
 <literal>PlacedMorph</literal> with behaviors specific to a mobile object
 subjected to accelerations. Its states are the mass, position,
 heading, velocity and acceleration. Well, as we are discussing
 refactoring, the mass state does not really makes sense in our game,
 indeed our mobile&#8217;s mass is constant. We just need a method returning
 a literal number and we can then remove the <literal>mass</literal> instance
 variable. Moreover, as explained previously, a <literal>PlacedMorph</literal>
 instance already know about its position and heading, so we also
 remove these two attributes, although there are common behaviors to a
 Space ship and a torpedo.
</para>
<para>It results in this <literal>Mobile</literal> definition:
</para>
<anchor id="mobileClass"/>
<screen>PlacedMorph subclass: #Mobile
   instanceVariableNames: 'velocity acceleration color'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>

<anchor id="refactoryShipTorpedo"/>
<para><emphasis>What should be the refactored definitions of the
<literal>SpaceShip</literal> and <literal>Torpedo</literal> classes?</emphasis>
</para>


<para>The first behaviors we add to our <literal>Mobile</literal> are its
initialization and its mass:
</para>
<screen>Mobile&gt;&gt;initialize
  super initialize.
  velocity := 0 @ 0.
  acceleration := 0
        
Mobile&gt;&gt;mass
  ^ 1
</screen>
<para>The next methods to add are the ones relative to the physical
calculations. First, the code to calculate the gravity acceleration:
</para>
<anchor id="gravityForce"/>
<screen>Mobile&gt;&gt;gravity
&quot;Compute the gravity acceleration vector&quot;
   | position |
   position := self morphPosition.
   ^ -10 * self mass * owner starMass / (position r raisedTo: 3) * position
</screen>

<para>This method deserves a few comments:
</para><itemizedlist>
<listitem><para><literal>self morphPosition</literal> returns a <literal>Point</literal>
  instance, the position of the mobile in the owner reference frame,
</para>
</listitem><listitem><para><literal>owner</literal> is the <literal>SpaceWar</literal> instance
  representing the game play. It is the owner &#8211; parent morph &#8211; of
  the mobile. When asking <literal>#starMass</literal>, it interrogates its central
  star mass and return its value:
</para>
<screen>SpaceWar&gt;&gt;starMass
   ^ centralStar mass
</screen>
<para>As a side benefit, we can remove the method <literal>starMass</literal>
defined earlier in the <literal>SpaceShip</literal> class.
</para>
</listitem><listitem><para>In <literal>position r</literal>, the <literal>#r</literal> message asks the radius
  attribute of a point considered in polar coordinates. It is just its
  length. It is the distance between the mobile and the central star.
</para>
</listitem><listitem><para><literal>* position</literal> really means multiply the previous
  scalar value with a <literal>Point</literal>, hence a vector. Thus the returned
  value is a <literal>Point</literal>, a vector in this context, the gravity
  vector.
</para>
</listitem></itemizedlist>
<para>The method to update the mobile position and velocity is mostly the
same as in <link linkend="spaceShipMechanic">spaceShipMechanic</link>. Of course the
<literal>SpaceShip&gt;&gt;update:</literal> and <literal>Torpedo&gt;&gt;update:</literal>
version must be both deleted. Below is the complete version with the
morph&#8217;s way of accessing the mobile&#8217;s position:
</para>
<anchor id="mobileUpdate"/>
<screen>Mobile&gt;&gt;update: t
&quot;Update the mobile position and velocity&quot;
  | ai ag newVelocity |
  &quot;acceleration vectors&quot;
  ai := acceleration * self direction.
  ag := self gravity.
  newVelocity := (ai + ag) * t + velocity.
  self morphPosition:
     (0.5 * (ai + ag) * t squared)
     + (velocity * t)
     + self morphPosition.
  velocity := newVelocity.	
  &quot;Are we out of screen? If so we move the mobile to the other corner
  and slow it down by a factor of 2&quot;  
  (self isInOuterSpace and: [self isGoingOuterSpace]) ifTrue: [
     velocity := velocity / 2.
     self morphPosition: self morphPosition negated]
</screen>

<para>Now we should add the two methods to detect when a mobile is heading
off into deep space.
</para>
<para>But first we define the method <literal>morphLocalBounds</literal> in each of
our Morph objects. It returns a <literal>Rectangle</literal> instance defined in
the Morph coordinates by its origin and extent:
</para>
<anchor id="boundMorph"/>
<screen>SpaceWar&gt;&gt;morphLocalBounds
   ^ -300 @ -300 extent: 600 @ 600

CentralStar&gt;&gt;morphLocalBounds
   ^ Rectangle center: 0 @ 0 extent: self morphExtent

Mobile&gt;&gt;morphLocalBounds
   ^ Rectangle encompassing: self class vertices
</screen>

<anchor id="mobileDeepSpace"/>
<screen>Mobile&gt;&gt;isInOuterSpace
&quot;Is the mobile located in the outer space? (outside of the game
play area)&quot;
   ^ (owner morphLocalBounds containsPoint: self morphPosition) not

Mobile&gt;&gt;isGoingOuterSpace
&quot;is the mobile going crazy in the direction of the outer space?&quot;
   ^ (self morphPosition dotProduct: velocity) &gt; 0
</screen>

<para>As you see, these test methods are simple and short. When writing
Cuis-Smalltalk code, this is something we appreciate a lot and we do not
hesitate to cut a long method in several small methods. It improves
readability and code reuse. The <literal>#containsPoint:</literal> message asks the
receiver rectangle whether the point in argument is inside its shape.
</para>
<indexterm role="cp"><primary>overriding</primary></indexterm>
<para>When a mobile is updated, its position and velocity are
updated. However the <literal>Mobile</literal> subclasses <literal>SpaceShip</literal> or
<literal>Torpedo</literal> may need additional specific updates. In object
oriented programming there is this special mechanism named
<firstterm>overriding</firstterm> to achieve this.
</para>
<para>See the <literal>Torpedo&gt;&gt;update:</literal> definition:
</para>
<screen>Torpedo&gt;&gt;update: t
   &quot;Update the torpedo position&quot;
   super update: t.
   &quot;orientate the torpedo in its velocity direction, nicer effect
   while inaccurate&quot;
   self heading: (velocity y arcTan: velocity x).
   lifeSpan := lifeSpan - 1.
   lifeSpan isZero ifTrue: [owner destroyTorpedo: self].
   acceleration &gt; 0 ifTrue: [acceleration := acceleration - 500]
</screen>
<para>Here the <literal>update:</literal> method is specialized to the torpedo
specific needs. The mechanical calculation done in <literal>Mobile&gt;&gt;update:</literal>
is still used to update the torpedo position and velocity: this is
done by <literal>super update: t</literal>. We already discussed
<literal>super</literal>. In the context of
<literal>Torpedo&gt;&gt;update:</literal> it means search for an <literal>update:</literal>
method in <literal>Torpedo</literal>&#8217;s parent class, that class&#8217;s parent
and so on until the method
is found, if not a <emphasis>Message Not Understood</emphasis> error is signalled.
</para>
<para>Among the specific added behaviors, the torpedo orientation along its
velocity vector is inaccurate but nice looking. To orient accordingly
the torpedo, we adjust its heading with its velocity vector heading.
</para>
<para>The life span control, the self-destruction sequence, and the engine
acceleration are also handled specifically. When a torpedo is just fired, its
engine acceleration is huge then it decreases quickly.
</para>
<para>With the System Browser pointed to the <literal>Torpedo&gt;&gt;update:</literal>
method, observe the <option>inheritance</option> button. It is light green,
which indicates the message is sent to <literal>super</literal> too. This is
a reminder the method supplies a specialized behavior.  The button
tool tip explains the color hilight meanings within the method&#8217;s text.
When pressing the <option>inheritance</option> button, you browse all
implementations of the <literal>update:</literal> method within this inheritance
chain.
</para>
<anchor id="ch06_002d20_002dTorpedoUpdateInheritance"/>
<inlinemediaobject><imageobject><imagedata fileref="ch06-20-TorpedoUpdateInheritance.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>We already met an example of overriding when initializing a space ship
instance &#8211; see <link linkend="initSpaceShip">initSpaceShip</link>. In the context of our class
refactoring, the <literal>initialize</literal> overriding spans the whole
<literal>Mobile</literal> hierarchy:
</para>
<anchor id="initMobileHierarchy"/>
<screen>Mobile&gt;&gt;initialize
   super initialize.
   color := Color gray.
   velocity := 0 @ 0.
   acceleration := 0

SpaceShip&gt;&gt;initialize
   super initialize.
   self resupply

Torpedo&gt;&gt;initialize
   super initialize.
   lifeSpan := 500.
   acceleration := 3000
</screen>

<para>Observe how each class is only responsible of its specific state
initialization:
</para>
<orderedlist numeration="arabic">
<listitem><para><emphasis role="bold">SpaceShip.</emphasis> Its mechanical states are set with the
 <literal>super initialize</literal> and then the ship is resupplied with
 fuel and torpedoes:
</para>
<screen>SpaceShip&gt;&gt;resupply
   fuel := 500.
   torpedoes := 10
</screen>
</listitem><listitem><para><emphasis role="bold">Torpedo.</emphasis> Inherited mechanical states initialized; add
 self-destroy sequence initialization and acceleration adjusted to
 mimic the torpedo boost at fire up.
</para>
</listitem></orderedlist>
<para>The behaviors specific to each mobile is set with additional
methods. The <literal>SpaceShip</literal> comes with its control methods we
already described previously in <link linkend="shipControls">shipControls</link> and
<link linkend="fireTorpedo">fireTorpedo</link>, of course there is none for a
<literal>Torpedo</literal>.
</para>
<para>Another important specific behavior is how each kind of <literal>Mobile</literal>
is drawn in the game play, this will be discussed in a next chapter on
the fundamentals of Morph.
</para>
<!-- refactoring central star, no need for mass only a behavior -->
<!-- -->
</sect2>
</sect1>
</chapter>
<chapter label="" id="The-Fundamentals-of-Morph">
<title>The Fundamentals of Morph</title>

<blockquote><attribution>Alan Kay</attribution>
<para>Simple things should be simple and complex things should be possible.
</para></blockquote>



<para>What would we expect if we asked for good support for building GUIs in a
programming system?
</para>
<para>In <link linkend="Visual-with-Morph">Visual with Morph</link> we started with that same question, and
gave an overview of Morphs and their interactive behavior. This
chapter deals with how Morphs are built, how to create new Morphs and
what rules they follow.
</para>
<indexterm role="cp"><primary>moprh</primary><secondary>legacy</secondary></indexterm><para>The User Interface framework in Cuis-Smalltalk is called Morphic. Morphic was
originally created by Randy Smith and John Maloney as the
<ulink url="https://bibliography.selflanguage.org/_static/self4.0UserInterface.pdf">UI
for Self</ulink>. Later, John Maloney ported it to Smalltalk, to be used as
the
<ulink url="http://stephane.ducasse.free.fr/FreeBooks/CollectiveNBlueBook/morphic.final.pdf">UI
for Squeak</ulink>.
</para>



<sect1 label="" id="Going-Vector">
<title>Going Vector</title>

<para>For Cuis-Smalltalk, we built Morphic 3, the third design iteration of these
ideas, after Self&#8217;s Morphic 1 and Squeak&#8217;s Morphic 2. If you already
know Morphic in Self or Squeak, most concepts are similar, although
with some improvements: Morphic 3 coordinates are not limited to being
integer numbers, the apparent size (zoom level) of elements is not
tied to pixel density, and all drawing is done with high quality
(subpixel) anti aliasing. These enhancements are enabled by the huge
advance in hardware resources since Self and Squeak were designed (in
the late 80&#8217;s and late 90&#8217;s respectively). Additionally, careful
design of the framework relieves Morph programmers from much the
complexity that was required, especially with regards to geometry.
</para>
<sect2 label="">
<title>A first example</title>

<para>Let&#8217;s start with some examples. What we want is to build our own
graphic objects, or Morphs. A Morph class is part of the Morph
hierarchy and usually includes a <literal>drawOn:</literal> method for drawing
its distinctive appearance. If we forget about computers for a second,
and consider drawing with color pens on a sheet of paper, one of the
most basic things we can do is to draw straight lines.
</para>
<para>So, let&#8217;s start a System Browser window and build a straight line
object:
</para>
<screen>Morph subclass: #LineExampleMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'
</screen>
<para>In method category <command>drawing</command> add:
</para>
<indexterm role="cp"><primary>morph</primary><secondary>vector</secondary><tertiary>line drawing</tertiary></indexterm><indexterm role="cp"><primary>morph</primary><secondary><literal>drawOn:</literal></secondary></indexterm><screen>LineExampleMorph&gt;&gt;drawOn: aCanvas
   aCanvas strokeWidth: 20 color: Color green do: [
      aCanvas
         moveTo: 100 @ 100;
         lineTo: 400 @ 200 ].
</screen>
<para>Now in a Workspace execute:
</para><screen>LineExampleMorph new openInWorld
</screen>
<para>If you get a prompter asking whether to install and activate Vector
Graphics support, please answer yes. There it is. You have already
built your first <literal>Morph</literal> class.
</para>
<anchor id="ch07_002d01_002dLineDetails"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-01-LineDetails.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>The code is self evident, the <literal>drawOn:</literal> method takes a
<literal>VectorCanvas</literal> instance as an argument. <literal>VectorCanvas</literal>
provides many drawing operations for morphs to use. You can play with
the various drawing operations and their parameters, and see the
result. If you make a mistake, and the <literal>drawOn:</literal> method fails,
you&#8217;ll get a red and yellow error box. After fixing your
<literal>drawOn:</literal> method, do ...World menu &#8594;
<command>Debug...</command> &#8594; <command>Start drawing all again</command>.. to get
your morph redrawn correctly.
</para>
<anchor id="exeCrossMorph"/>
<para><emphasis>How will you modify our
line morph so it draws itself as a cross with an extent of 200
pixels?</emphasis>
</para>



</sect2>
<sect2 label="">
<title>Morph you can move</title>
<indexterm role="cp"><primary>morph</primary><secondary>movable</secondary></indexterm><para>You might have already tried to click and drag on your Line, like you
can do with regular windows and most other Morphs. If not, try
now. But nothing happens! The reason is that our Morph is fixed in a
place in the owner morph (the WorldMorph). It is fixed because
<literal>drawOn:</literal> says it should be a line between <literal>100 @ 100</literal>
and <literal>400 @ 200</literal>. Moving it around would mean modifying those
points. One possible way to do that could be to store those points in instance
variables.
</para>
<para>But now, we just want to code our morph in the simplest possible way,
and still be able to move it around. The solution is to make it
subclass of <literal>PlacedMorph</literal>, instead of <literal>Morph</literal>.
</para>
<indexterm role="cp"><primary>morph</primary><secondary><literal>delete</literal></secondary></indexterm><para>To do this, first evaluate the code below to get rid of all
LineExampleMorph instances:
</para>
<anchor id="deleteMorphInstances"/>
<screen>LineExampleMorph allInstancesDo: [ :m | m delete]
</screen>

<para>Then, in the System Browser class declaration for LineExampleMorph, type
<literal>PlacedMorph</literal> instead of <literal>Morph</literal> and save. Now execute
again:
</para>
<screen>LineExampleMorph new openInWorld
</screen>
<indexterm role="cp"><primary>morph</primary><secondary><literal>location</literal></secondary></indexterm><para>You will get a line you can grab with the mouse and move it
around. <literal>PlacedMorph</literal> adds a new instance variable called
<literal>location</literal>. If a morph has a <literal>location</literal>, it can be
moved around, by modifying it. The <literal>location</literal> also defines a
new local coordinate system. All the coordinates used in the
<literal>drawOn:</literal> method are now relative to this new coordinate
system. That&#8217;s why we don&#8217;t need to modify the <literal>drawOn:</literal>
method. <literal>drawOn:</literal> now tells how the morph should be drawn, but
not where. The <literal>location</literal> also specifies a possible rotation
and scale factor. This means that subinstances of <literal>PlacedMorph</literal>
can also be rotated and zoomed.
</para>

</sect2>
<sect2 label="">
<title>Filled morph</title>
<para>Let&#8217;s build another morph, to have more fun.
</para>
<screen>PlacedMorph subclass: #TriangleExampleMorph
   instanceVariableNames: 'borderColor fillColor'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'
</screen>
<para>In method category <command>initialization</command> add:
</para>
<screen>TriangleExampleMorph&gt;&gt;initialize
   super initialize.
   borderColor := Color random alpha: 0.8.
   fillColor := Color random alpha: 0.6.
</screen>
<para>In the <command>drawing</command> method category add:
</para>
<indexterm role="cp"><primary>morph</primary><secondary>vector</secondary><tertiary>filling area</tertiary></indexterm><indexterm role="cp"><primary>morph</primary><secondary><literal>drawOn:</literal></secondary></indexterm><screen>TriangleExampleMorph&gt;&gt;drawOn: aCanvas
   aCanvas strokeWidth: 10 color: borderColor fillColor: fillColor do: [
      aCanvas
         moveTo: 0 @ 100;
         lineTo: 87 @ -50;
         lineTo: -87 @ -50;
         lineTo: 0 @ 100 ].
</screen>
<para>Take a moment to understand that code, to guess what it will do. Now
execute:
</para>
<screen>TriangleExampleMorph new openInWorld
</screen>
<para>Do it several times, and move each triangle around. Each new triangle
you create has different colors. And these colors are not completely
opaque. This means that when you place your triangle over some other
morph, you can see through it.
</para>
<anchor id="ch07_002d02_002dTriangles"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-02-Triangles.png" format="PNG"></imagedata></imageobject></inlinemediaobject>



<anchor id="exeRectMorph"/>
<para><emphasis>How will you write a
movable rectangle morph with an x,y extent of 200 by 100? The rect will
be filled with a random translucent color and surrounded by a thin
blue line.</emphasis>
</para>


<para>As we learnt previously, Morphic gives you additional ways to interact
with your morphs. With a three button mouse or a wheel mouse, place
the mouse pointer (a <literal>HandMorph</literal> instance) over one of your
triangles and click with the center button or mouse wheel. If you don&#8217;t have
a three button mouse substitute <userinput>Command-click</userinput>. You get a constellation
of small colored circles around your morph. This is called the morph&#8217;s
<firstterm>halo</firstterm>, and each colored circle is a <firstterm>halo
handle</firstterm>. See <link linkend="ch07_002d02_002dTriangles">ch07-02-Triangles</link>.
</para>
<para>At the top left you have the red <command>Remove</command> handle. Clicking on it
just removes the morph from the morphic world. Hover your hand over
each handle, and you&#8217;ll get a tooltip with its name. Other handles let
you <command>Duplicate</command> a morph, open a <command>Menu</command> with actions on it,
<command>Pick up</command> (same as dragging it with the the mouse as you did
before). The <command>Move</command> operation is similar to <command>Pick up</command>, but
doesn&#8217;t remove the morph from the current owner. More about that,
later. The <command>Debug</command> handle opens a menu from where you can open
an Inspector or a Hierarchy Browser to study the morph.
</para>
<para>You also have a <command>Rotate</command> and <command>Change scale</command> handles. Try
them! To use them, move your hand to the handle, and then press the
mouse button and drag it. As you might have guessed, the rotate
handles spins your morph around the center of its surrounding
rectangle. The scale handles controls the apparent zoom
applied to your morph. Both scale and rotation (and also displacement,
as when you move your morph around) are implemented by modifying the
inner coordinate system defined by your morph. Displacement, rotation
and scale are floating point numbers, and thus not limited to
integers.
</para>
<indexterm role="cp"><primary>morph</primary><secondary><literal>rotationCenter</literal></secondary></indexterm><para>To change the center of rotation of a Morph, you override the method
<literal>rotationCenter</literal> accordingly:
</para>
<screen>RectangleExampleMorph&gt;&gt;rotationCenter
   ^ 0 @ 0
</screen>
<para>Observe how our rectangle morph now reacts to the rotation handle. We
will learn how to control all this with code and animate our morph.
</para>
</sect2>
<sect2 label="">
<title>Animated morph</title>
<indexterm role="cp"><primary>morph</primary><secondary>animated</secondary></indexterm><para>Let&#8217;s add two methods to our <literal>TriangleExampleMorph</literal> to
make our triangle <emphasis>alive</emphasis>:
</para>
<indexterm role="cp"><primary>morph</primary><secondary><literal>step,wantsSteps</literal></secondary></indexterm><para>In the method category <command>stepping</command> define:
</para><screen>TriangleExampleMorph&gt;&gt;wantsSteps
   ^ true
</screen>
<para>...and:
</para><screen>TriangleExampleMorph&gt;&gt;step
   fillColor := Color random.
   self redrawNeeded
</screen>
<para>Then create some additional triangles as you did before.
</para>
<para>This will make our triangles change color once a second. But more
interesting, edit the method:
</para>
<screen>TriangleExampleMorph&gt;&gt;stepTime
   ^ 100
</screen>
<para>...and:
</para>
<indexterm role="cp"><primary>morph</primary><secondary><literal>morphPosition</literal></secondary></indexterm>
<screen>TriangleExampleMorph&gt;&gt;step
   self morphPosition: self morphPosition + (0.4@0).
   self redrawNeeded
</screen>
<para>Now, our morph steps ten times per second, and moves to the right at a
speed of four pixels per second. At each step it moves by 0.4 pixels,
and not by an integer number of pixels. High quality anti-aliasing
drawing means we can actually do that! You can make it step at a speed
of four times a second, and move 1 pixel each time, and see how different
that looks.
</para>
<para>Now try this:
</para>
<indexterm role="cp"><primary>morph</primary><secondary><literal>rotateBy:</literal></secondary></indexterm>
<screen>TriangleExampleMorph&gt;&gt;step
   self morphPosition: self morphPosition + (0.2@0).
   self rotateBy: 4 degreesToRadians.
   self redrawNeeded
</screen>
<para>It gets even better. First get rid of all instances:
</para> 
<screen>TriangleExampleMorph allInstancesDo: [ :m | m delete]
</screen>
<para>And modify these methods:
</para>
<screen>TriangleExampleMorph&gt;&gt;initialize
   super initialize.
   borderColor := Color random alpha: 0.8.
   fillColor := Color random alpha: 0.6.
   scaleBy := 1.1
</screen>
<para>Accept <literal>scaleBy</literal> as a new instance variable of the
<literal>TriangleExampleMorph</literal> class.
</para>
<screen>TriangleExampleMorph&gt;&gt;step
   self morphPosition: self morphPosition + (0.2@0).
   self rotateBy: 4 degreesToRadians.
   self scaleBy: scaleBy.
   self scale &gt; 1.2 ifTrue: [scaleBy := 0.9].
   self scale &lt; 0.2 ifTrue: [scaleBy := 1.1].
   self redrawNeeded
</screen>
<para>Then create a new triangle:
</para><screen>TriangleExampleMorph new openInWorld
</screen>
<para>See that when the triangle is doing its crazy dance, you can still
open a halo and interact with it.
</para>



</sect2>
<sect2 label="">
<title>Morph in morph</title>
<indexterm role="cp"><primary>morph</primary><secondary>submorph</secondary></indexterm>
<para>Now, let&#8217;s try something different. Grab one of your
<literal>LineExampleMorph</literal>. With the halo, zoom it until it is about the
size of your triangle. Now place the triangle above your line. Open a
halo on the triangle, click on the <command>Menu</command> handle and select
...<command>embed into</command> &#8594;
<command>LineExampleMorph</command>. This makes the triangle a submorph of the
line. Now, if you move, scale or rotate the line, the triangle also
gets adjusted.
</para>
<para>You can open a halo on the triangle. To do this, middle-click twice
over it. With the halo on the triangle, you can rotate or zoom it
independently of the line. Also note that when you grab the triangle
with your hand (not using the halo), you grab the
line&#160;+&#160;triangle composite. You can&#8217;t just drag the triangle
away. For this, you need the triangle&#8217;s halo. Use its <command>Move</command>
handle<footnote><para>By now, it is likely that the triangle has walked quite
a bit!</para></footnote> to position it without <emphasis>getting it out</emphasis> of the line. Use
its <command>Pick up</command> handle to take it with the hand and drop
it in the world. Now, the triangle is no a longer submorph of the line,
and the morphs can be moved, rotated or scaled independently.
</para>
<para>But let&#8217;s try something. Make the triangle submorph of the line
again. Now add the following method to category <command>geometry
testing</command> of the class <literal>LineExampleMorph</literal>:
</para>
<indexterm role="cp"><primary>morph</primary><secondary><literal>clipsSubmorphs</literal></secondary></indexterm>
<screen>LineExampleMorph&gt;&gt;clipsSubmorphs
   ^ true
</screen>
<para>The drawing of the triangle gets cut exactly at the bounds of the
line. This is most useful for implementing scrolling panes that only
make a part of their contents visible, but might have other uses too.
</para>
<anchor id="ch07_002d04_002dAnimatedAndClippedSubmorph"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-04-AnimatedAndClippedSubmorph.png" format="PNG"></imagedata></imageobject></inlinemediaobject>



</sect2>
</sect1>
<sect1 label="" id="A-Clock-Morph">
<title>A Clock Morph</title>
<para>With all the things we have already learned, we can build a more
sophisticated morph. Let&#8217;s build a <literal>ClockMorph</literal> as see in
<link linkend="ch07_002d05_002dClock">ch07-05-Clock</link>.
</para>
<!-- In order to have a default text font based on -->
<!-- vector graphics, do ...@clicksequence{World menu @click{} -->
<!-- @label{Preferences...} @click{} @label{Set System Font...} @click{} -->
<!-- @label{DejaVu...} @click{} @label{DejaVuSans}}@footnote{You can select -->
<!-- any other TrueType font from the ones available.}. -->

<anchor id="ch07_002d05_002dClock"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-05-Clock.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Let&#8217;s create <literal>ClockMorph</literal>, the dial clock :
</para>
<screen>PlacedMorph subclass: #ClockMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'
</screen>
<indexterm role="cp"><primary>morph</primary><secondary><literal>drawOn:</literal></secondary></indexterm><para>...and its drawing method in the category <command>drawing</command>:
</para>
<anchor id="clockDialDrawing"/>
<screen>ClockMorph&gt;&gt;drawOn: aCanvas
   aCanvas
      ellipseCenter: 0@0
      radius: 100
      borderWidth: 10
      borderColor: Color lightCyan
      fillColor: Color veryVeryLightGray.
   aCanvas drawString: 'XII' at: -13 @ -90 font: nil color: Color brown.
   aCanvas drawString: 'III' at: 66 @ -10 font: nil color: Color brown.
   aCanvas drawString: 'VI' at: -11 @ 70 font: nil color: Color brown.
   aCanvas drawString: 'IX' at: -90 @ -10 font: nil color: Color brown
</screen>


<para>We create <literal>ClockHourHandMorph</literal>, the hand for the hours:
</para>
<screen>PlacedMorph subclass: #ClockHourHandMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'
</screen>
<para>...and its drawing method in the category <command>drawing</command>:
</para>
<screen>ClockHourHandMorph&gt;&gt;drawOn: aCanvas
   aCanvas fillColor: (Color black alpha: 0.6) do: [
      aCanvas
         moveTo: 0 @ 10;
         lineTo: -5 @ 0;
         lineTo: 0 @ -50;
         lineTo: 5 @ 0;
         lineTo: 0 @ 10 ].
</screen>
<para>You can start playing with them. We could use several instances of a
single <literal>ClockHandMorph</literal>, or create several classes. Here we
chose to do the latter. Note that all the <literal>drawOn:</literal> methods use
hardcoded constants for all coordinates. As we have seen before, this
is not a limitation. We don&#8217;t need to write a lot of specialized trigonometric and
scaling formulas to build Morphs in Cuis-Smalltalk!
</para>
<para>By now, you might imagine what we are doing with all this, but please
bear with us while we finish building our clock.
</para>
<para>We create <literal>ClockMinuteHandMorph</literal>, the hand for the minutes:
</para>
<screen>PlacedMorph subclass: #ClockMinuteHandMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'
</screen>
<para>...and its drawing method in the category <command>drawing</command>:
</para>
<screen>ClockMinuteHandMorph&gt;&gt;drawOn: aCanvas
   aCanvas fillColor: ((Color black) alpha: 0.6) do: [
      aCanvas
         moveTo: 0 @ 8;
         lineTo: -4 @ 0;
         lineTo: 0 @ -82;
         lineTo: 4 @ 0;
         lineTo: 0 @ 8 ]
</screen>
<para>And finally, the <literal>ClockSecondHandMorph</literal>, the hand for the seconds:
</para>
<screen>PlacedMorph subclass: #ClockSecondHandMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'
</screen>
<para>...and its drawing method in the category <command>drawing</command>:
</para>
<screen>ClockSecondHandMorph&gt;&gt;drawOn: aCanvas
   aCanvas strokeWidth: 2.5 color: Color red do: [
      aCanvas
         moveTo: 0 @ 0;
         lineTo: 0 @ -85 ]
</screen>
<para>Now, all that is needed is to put our clock parts together in
<literal>ClockMorph</literal>. In its method category <command>initialization</command> add
its <literal>initialize</literal> method (accept the new names as instance
variables):
</para>
<screen>ClockMorph&gt;&gt;initialize
   super initialize.
   self addMorph: (hourHand := ClockHourHandMorph new).
   self addMorph: (minuteHand := ClockMinuteHandMorph new).
   self addMorph: (secondHand := ClockSecondHandMorph new)
</screen>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
If you have not already added instance variables for the
clock hands, the Cuis IDE will note this and ask what you want
to do about it.  We want to declare the three missing names as instance
variables.
</para>
<anchor id="ch07_002d07_002dClockMorph_002dinitialize"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-07-ClockMorph-initialize.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Your <literal>ClockMorph</literal> class definition should now be complete!
</para>
<anchor id="ch07_002d08_002dClockMorph_002divars_002dadded"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-08-ClockMorph-ivars-added.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Finally, we animate our clock. In method category <command>stepping</command> add the
method:
</para>
<screen>ClockMorph&gt;&gt;wantsSteps
   ^ true
</screen>
<para>...and:
</para>
<screen>ClockMorph&gt;&gt;step
   | time |
   time := Time now.
   hourHand rotationDegrees: time hour * 30.
   minuteHand rotationDegrees: time minute * 6.
   secondHand rotationDegrees: time second * 6
</screen>
<para>Take a look at how we update the clock hands.
</para>
<para>As we said before, any <literal>PlacedMorph</literal> defines a coordinate
system for its own <literal>drawOn:</literal> method and also for its
submorphs. This new coordinate system might include rotation or
reflexion of the axis, and scaling of sizes, but by default they
don&#8217;t. This means that they just translate the origin, by specifying
where in the owner point <literal>0 @ 0</literal> is to be located.
</para>
<para>The World coordinate system has <literal>0 @ 0</literal> at the top left
corner, with X coordinates increasing to the right, and Y coordinates
increasing downwards. Positive rotations go clockwise. This is the
usual convention in graphics frameworks. Note that this is different
from the usual mathematics convention, where Y increases upwards, and
positive angles go counterclockwise.
</para>
<para>So, how do we update the hands? For example, for the hour hand, one
hour means 30 degrees, as 12 hours means 360 degrees or a whole
turn. So, we multiply hours by 30 to get degrees. Minute and second hand
work in a similar way, but as there are 60 minutes in one hour, and 60
seconds in one minute, we need to multiply them by 6 to get degrees. As
rotation is done around the origin, and the clock has set the origin at its
center (<link linkend="clockDialDrawing">clockDialDrawing</link>), there&#8217;s no need to set the position of the
hands. Their <literal>0 @ 0</literal> origin will therefore be at the clock
<literal>0 @ 0</literal>, i.e. the center of the clock.
</para>
<anchor id="ch07_002d06_002dExerciseClock"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-06-ExerciseClock.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<anchor id="exeFancyClock"/>
<para><emphasis>Look at the clock on
<link linkend="ch07_002d06_002dExerciseClock">ch07-06-ExerciseClock</link>. Don&#8217;t you think its hand for the seconds
decorated with a red and yellow disc is fancy? How will you modify our
clock morph to get this result?</emphasis>
</para>


<para>Create some instances of your clock: <literal>ClockMorph new
openInWorld</literal>. You can rotate and zoom. Look at the visual quality of
the Roman numerals in the clock face, especially when rotated and
zoomed. You don&#8217;t get this graphics quality on your regular
programming environment! You can also extract the parts, or scale each
separately. Another fun experiment is to extract the Roman numerals
into a separate <literal>ClockFaceMorph</literal>, and make it submorph of the
Clock. Then, you can rotate just the face, not the clock, and the
clock will show fake time. Try it!
</para>
<para>You might have noted two things that seem missing, though: How to
compute bounding rectangles for Morphs, and how to detect if a Morph
is being hit by the Hand, so you can move it or get a halo. The
display rectangle that fully contains a morph is required by the framework
to manage the required refresh of Display areas as a result of
any change. But you don&#8217;t need to know this rectangle in order to
build your own Morphs. In Cuis-Smalltalk, the framework computes it as
needed, and stores it in the <literal>privateDisplayBounds</literal>
variable. You don&#8217;t need to worry about that variable at
all.
</para>
<para>With respect to detecting if a Morph is being touched by the Hand,
or more generally, if some pixel belongs to a Morph, truth is that during
the drawing operation of a Morph, the framework indeed knows all the
pixels it is affecting. The <literal>drawOn:</literal> method completely specifies
the shape of the Morph. Therefore, there is no need to ask the programmer
to code the Morph geometry again in a separate method! All that is needed
is careful design of the framework itself, to avoid requiring programmers to
handle this extra complexity.
</para>
<para>The ideas we have outlined in this chapter are the fundamental ones in
Morphic, and the framework is implemented in order to support
them. Morphs (i.e. interactive graphic objects) are very general and
flexible. They are not restricted to a conventional widget library,
although such a library (rooted in <literal>BoxedMorph</literal>) is included
and used for building all the Smalltalk tools.
</para>
<para>The examples we have explored use the <command>VectorGraphics</command>
framework. It includes <literal>VectorCanvas</literal> and <literal>HybridCanvas</literal>
classes. Cuis-Smalltalk also includes the legacy <literal>BitBltCanvas</literal> class
inherited from Squeak. <literal>BitBltCanvas</literal> doesn&#8217;t support the vector
graphics drawing operations and doesn&#8217;t do anti-aliasing or
zooming. But it is mature, and it relies on the BitBlt operation that
is included in the <acronym>VM</acronym>. This means that it offers excellent
performance.
</para>
<para>To further explore Cuis-Smalltalk&#8217; Morphic, evaluate <literal>Feature
require: 'SVG'</literal>, and then <literal>SVGMainMorph exampleLion
openInWorld</literal> and the other examples there. Also, be sure to try the
examples in the class category <command>Morphic-Examples</command>, among them
execute <literal>Sample10PythagorasTree new openInWorld</literal> and play
with the mouse wheel&#8217;s up and down, left and right directions.
</para>
<para>Before we leave this section, here is a two lines change to turn our
Cuis quartz clock<footnote><para>In a quartz clock, the hand for the seconds
moves every second.</para></footnote> to an automatic Swiss clock<footnote><para>In an
automatic clock, the hand for the seconds moves every fraction of a
second. The smaller the fraction, the more premium the clock
is.</para></footnote><footnote><para>A Japanese automatic clock will be just fine too.</para></footnote>:
</para>
<screen>ClockMorph&gt;&gt;stepTime
    ^ 100 &quot;milliseconds&quot;
ClockMorph&gt;&gt;step
../..
   secondHand rotationDegrees: (time second + (time nanoSecond * 1.0e-9))* 6
</screen>
<para>Try to understand how these changes affect the behavior of the
seconds&#8217; hand and at which fraction of a second it is rotating.
</para>
</sect1>
<sect1 label="" id="Back-to-Spacewar_0021-Morphs">
<title>Back to Spacewar! Morphs</title>

<sect2 label="">
<title>Central star</title>

<indexterm role="cp"><primary>backtick</primary></indexterm>
<para>Our central star has an extent of <literal>30 @ 30</literal> we need to use
in several places in the code. Therefore it makes sense to define a
dedicated method to answer this value:
</para>
<anchor id="centralStarExtent"/>
<screen>CentralStar&gt;&gt;morphExtent
   ^ `30 @ 30`
</screen>

<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
An expression surrounded with backticks <literal>'`'</literal> is
evaluated only once, when the method is first saved and compiled.
This creates a compound literal value and improves the performance of
the method since the expression is not evaluated each time the method
is called: the pre-built value is used instead.
</para>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary><tertiary><literal>atRandom</literal></tertiary></indexterm><indexterm role="cp"><primary>morph</primary><secondary><literal>drawOn:</literal></secondary></indexterm>
<para>As you learnt previously, a morph draws itself from its
<literal>drawOn:</literal> method. We draw the star as an ellipse with randomly
fluctuating x and y radius:
</para>
<anchor id="centralStarDraw"/>
<screen>CentralStar&gt;&gt;drawOn: canvas
   | radius |
   radius := self morphExtent // 2.
   canvas ellipseCenter: 0 @ 0
      radius: (radius x + (2 atRandom - 1)) @ (radius y + (2 atRandom - 1))
      borderWidth: 3 
      borderColor: Color orange 
      fillColor: Color yellow
</screen>

<para>The star diameters in the x and y directions are fluctuating
independently of 0 to 2 units. The star does not look perfectly round.
</para>


</sect2>
<sect2 label="">
<title>Space ship</title>
<para>At the game start-up, the nose of the space ship is pointing to the
top of the screen as seen in <link linkend="ch07_002d10_002dShipDiagram">ch07-10-ShipDiagram</link> and the angle
of its direction is therefore -90&#176;, while the angle of its
rotation is 0&#176;. Remember the Y ordinate are oriented
toward the bottom of the screen.
</para>
<anchor id="ch07_002d10_002dShipDiagram"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-10-ShipDiagram.png" format="PNG"></imagedata></imageobject></inlinemediaobject>

<para>Then its <literal>drawOn:</literal> method is written as:
</para>
<anchor id="spaceShipDrawing"/>
<screen>SpaceShip&gt;&gt;drawOn: canvas
   | a b c d |
   a := 0 @ -15.
   b := -10 @ 15.
   c := 0 @ 10.
   d := 10 @ 15.
   canvas line: a to: b width: 2 color: color.
   canvas line: b to: c width: 2 color: color.
   canvas line: c to: d width: 2 color: color.
   canvas line: d to: a width: 2 color: color.
   &quot;Draw gas exhaust&quot;
   acceleration ifNotZero: [
      canvas line: c to: 0 @ 35 width: 1 color: Color gray]
</screen>

<anchor id="exeGasExhaust"/>
<para><emphasis>How will you modify
the space ship <literal>drawOn:</literal> method with the gas exhaust drawing
depends on the acceleration rate?</emphasis>
</para>


<para>When there is an acceleration from the engine, we draw a small gray
line to represent the gas exhaust.
</para>
<para>When the user turns the ship, the morph is rotated a bit by adjusting
its heading:
</para>
<screen>SpaceShip&gt;&gt;right
&quot;Rotate the ship to its right&quot;
   self heading: self heading + 0.1

SpaceShip&gt;&gt;left
&quot;Rotate the ship to its left&quot;
   self heading: self heading - 0.1
</screen>

<para>But how does this heading affect the rotation of the morph?
</para>
<para>Underneath, the <literal>MobileMorph</literal> is equipped with an affine
transformation to scale, rotate and translate the coordinates passed as
arguments to the drawing messages received by the canvas. Therefore, our
<literal>heading</literal> methods are defined to match this internal
representation and we use the <literal>rotation:</literal> method from the
<literal>PlacedMorph</literal> class to rotate appropriately. The
<literal>location</literal> attribute represents an affine transformation, and
we get its rotation angle with the <literal>#radians</literal> message.
</para>
<indexterm role="cp"><primary>morph</primary><secondary><literal>rotation:</literal></secondary></indexterm><indexterm role="cp"><primary>morph</primary><secondary><literal>location</literal></secondary></indexterm><screen>Mobile&gt;&gt;heading
   ^ location radians - Float halfPi
Mobile&gt;&gt;heading: aHeading
   self rotation: aHeading + Float halfPi
</screen>
<para>When a mobile is vertical, pointing to the top of the screen, its
heading is -90&#176; (-pi/2) in the screen coordinates
system. In that situation the mobile is not rotated &#8211; or
0&#176; rotated &#8211; therefore we add 90&#176; (pi/2) to
the heading to get the matching rotation angle of the mobile.
</para>
</sect2>
<sect2 label="">
<title>Torpedo</title>

<!-- Give the diagram of the torpedo, and as an exercise ask how to code -->
<!-- its drawOn: and morphExtent methods -->

<para>Alike a space ship, when a torpedo is just instantiated its nose
points in the direction of the top of the screen and its vertices are
given by the <link linkend="ch07_002d11_002dTorpedoDiagram">ch07-11-TorpedoDiagram</link>.
</para>
<anchor id="ch07_002d11_002dTorpedoDiagram"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-11-TorpedoDiagram.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<anchor id="exeTorpedoExtent"/>
<para><emphasis>Given the vertices
given by <link linkend="ch07_002d11_002dTorpedoDiagram">ch07-11-TorpedoDiagram</link>&#44; how will you write its
<literal>morphExtent</literal> method?</emphasis>
</para>



<anchor id="exeTorpedoDrawing"/>
<para><emphasis>How will you write
the <literal>Torpedo</literal>&#8217;s <literal>drawOn:</literal> method?</emphasis>
</para>



</sect2>
<sect2 label="">
<title>Drawing revisited</title>

<indexterm role="cp"><primary>class</primary><secondary>instance variable</secondary></indexterm><indexterm role="cp"><primary>variable</primary><secondary>class instance</secondary></indexterm><!-- refactoring of drawOn: explain class variable -->
<para>As you may have observed, the <literal>SpaceShip</literal> and <literal>Torpedo</literal>
<literal>drawOn:</literal> methods share the same logic: drawing a polygon given
its vertices. We likely want to push this common logic to their common
ancestor, the <literal>Mobile</literal> class. It needs to know about its
vertices, so we may want to add an instance variable
<literal>vertices</literal> initialized in its subclasses with an array
containing the points:
</para>
<screen>PlacedMorph subclass: #Mobile
   instanceVariableNames: 'acceleration color velocity vertices'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

SpaceShip&gt;&gt;initialize
   super initialize.
   vertices := {0@-15 . -10@15 . 0@10 . 10@15}.
   self resupply
   
Torpedo&gt;&gt;initialize
   super initialize.
   vertices := {0@-4 . -2@4 . 2@4}.
   lifeSpan := 500.
   acceleration := 3000
</screen>
<para>However this is not a good idea. Imagine the game play with 200
torpedoes, the vertices array will be duplicated 200 times with the
same data!
</para>
<bridgehead renderas="sect3">Class instance variable</bridgehead>

<para>In that kind of situation, what you want is a <firstterm>class instance
variable</firstterm> defined in the class side &#8211; in contrast to the instance
side where we have been coding until now.
</para>
<para>We make use of the fact that all objects are instances of some class.
The  <literal>Mobile class</literal> is an instance of the class <literal>Class</literal>!
</para>
<orderedlist numeration="arabic">
<listitem><para>A <firstterm>class instance variable</firstterm> can be accessed and assigned
 only by the class itself in a <firstterm>class method</firstterm>.
</para>
</listitem><listitem><para>An entity (i.e. a fired torpedo) can access class instance
 variables via <firstterm>class methods</firstterm>, by sending a message to a class
 (i.e. <literal>Torpedo</literal>) rather than to itself or some other entity.
</para>
</listitem><listitem><para>In the class hierarchy, each subclass has its own instance
 of the class instance variable, and can assign a different value to
 it &#8211; in contrast with a <firstterm>class variable</firstterm> which is shared among
 all the subclasses (discussed later).
</para>
</listitem><listitem><para>To edit the <emphasis>class</emphasis> instance variables and <emphasis>class</emphasis>
 methods, in the System Browser press the <command>class</command> button under
 the class list.
</para>
</listitem></orderedlist>
<para>In the System Browser, we click the <command>class</command> button then we
declare our variable in the <literal>Mobile class</literal> definition &#8211;
<link linkend="ch07_002d12_002dbrowserClassSide">ch07-12-browserClassSide</link>:
</para>
<anchor id="instanceVariableMobileClass"/>
<screen>Mobile class
   instanceVariableNames: 'vertices'
</screen>

<para>Then we write an access method in the <literal>Mobile class</literal>, so
<literal>SpaceShip</literal> and <literal>Torpedo</literal> instances can access it:
</para>
<screen>Mobile class&gt;&gt;vertices
   ^ vertices
</screen>
<anchor id="ch07_002d12_002dbrowserClassSide"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-12-browserClassSide.png" format="PNG"></imagedata></imageobject></inlinemediaobject>



<indexterm role="cp"><primary>class</primary><secondary>initialize</secondary></indexterm><para>Next, each subclass is responsible to correctly initialize
<literal>vertices</literal> with its <literal>initialize</literal> class method:
</para>
<anchor id="initializeClass"/>
<screen>SpaceShip class&gt;&gt;initialize
&quot;SpaceShip initialize&quot;
   vertices :=  {0@-15 . -10@15 . 0@10 . 10@15}

Torpedo class&gt;&gt;initialize
&quot;Torpedo initialize&quot;
   vertices := {0@-4 . -2@4 . 2@4}
</screen>


<para>When a class is installed in Cuis-Smalltalk, its <literal>initialize</literal> class
method is executed. Alternatively select the comment and execute it
with <userinput>Ctrl-d</userinput>.
</para>
<para>Experiment in a Workspace to understand how a class instance
variable behaves:
</para>
<anchor id="classInstanceVar"/>
<screen>SpaceShip vertices.
&#8658; nil 
SpaceShip initialize.
SpaceShip vertices.
&#8658; #(0@-15 -10@15 0@10 10@15) 

Torpedo vertices.
&#8658; nil 
Torpedo initialize.
Torpedo vertices.
&#8658; #(0@-4 -2@4 2@4)
</screen>

<para>This is really the behavior we want: <literal>SpaceShip</literal> and
<literal>Torpedo</literal> instances have a different diagram. However, every
instances of a <literal>SpaceShip</literal> will have the same diagram, referring
to the same <literal>vertices</literal> array (i.e. same location in the
computer memory).
</para>
<indexterm role="cp"><primary>class</primary><secondary><literal>class</literal></secondary></indexterm><para>Each instance asks its class side with the <literal>#class</literal> message:
</para>
<screen>aTorpedo class
&#8658; Torpedo
self class
&#8658; SpaceShip
</screen>
<para>The <literal>Torpedo</literal>&#8217;s <literal>drawOn:</literal> is rewritten to access the
vertices in its class side:
</para>
<screen>Torpedo&gt;&gt;drawOn: canvas
   | vertices |
   vertices := self class vertices.
   canvas line: vertices first to: vertices second width: 2 color: color.
   canvas line: vertices third to: vertices second width: 2 color: color.
   canvas line: vertices first to: vertices third width: 2 color: color
</screen>
<anchor id="exeSpaceShipClassSideDiagram"/>
<para><emphasis>How will you rewrite <literal>SpaceShip</literal>&#8217;s <literal>drawOn:</literal> to use the vertices in its class side?</emphasis>
</para>


<para>So far, we still have this redundancy in the <literal>drawOn:</literal>
methods. What we want is <literal>Mobile</literal> to be responsible to draw the
polygon given a vertices array: <literal>self drawOn: canvas
polygon: vertices</literal>.
</para>
<para>The <literal>SpaceShip</literal> and <literal>Torpedo</literal>&#8217;s <literal>drawOn:</literal> will then
be simply written as:
</para>
<screen>Torpedo&gt;&gt;drawOn: canvas
   self drawOn: canvas polygon: self class vertices

SpaceShip&gt;&gt;drawOn: canvas
   | vertices |
   vertices := self class vertices.
   self drawOn: canvas polygon: vertices.
   &quot;Draw gas exhaust&quot;
   acceleration ifNotZero: [
      canvas line: vertices third to: 0@35 width: 1 color: Color gray]
</screen>
<anchor id="exeDrawMobile"/>
<para><emphasis>How will you
write the <literal>drawOn:polygon:</literal> method in <literal>Mobile</literal>? Tip: use the
iterator <literal>withIndexDo:</literal>.</emphasis>
</para>


<!-- Explain the difference with class variable -->
<bridgehead renderas="sect3">Class variable</bridgehead>
<indexterm role="cp"><primary>class</primary><secondary>variable</secondary></indexterm><indexterm role="cp"><primary>variable</primary><secondary>class</secondary></indexterm>
<para>A <firstterm>class variable</firstterm> is written capitalized in the argument of
<literal>classVariableNames:</literal> keyword:
</para>
<anchor id="classVariableMobile"/>
<screen>PlacedMorph subclass: #Mobile
   instanceVariableNames: 'acceleration color velocity'
   classVariableNames: 'Vertices'
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>

<para>As a class instance variable, it can be directly accessed from the
class side and instances are grant access only with messages send to
the class side. <emphasis role="bold">Contrary</emphasis> to a class instance variable, its
value is common in the whole class hierarchy. 
</para>
<para>In Spacewar!, a class variable <literal>Vertices</literal> will have the same
diagram for a space ship and a torpedo. This is not what we want.
</para>
<screen>SpaceShip&gt;&gt;vertices
   ^ `{0@-15 . -10@15 . 0@10 . 10@15}`
</screen>
<!-- it can be simpler -->
</sect2>
<sect2 label="">
<title>Drawing simplified</title>
<para>Using a class variable in the present game design is a bit
overkill. It was an excuse to present the concept of class
variables. If the game came with an editor where the user redesigns
the ship and torpedo diagrams, it would make sense to hold the vertices
in a variable. But our vertices of the space ship and torpedo diagrams
are constant. We do not modify them. As we did with the mass of the
space ship &#8211; <link linkend="methodConstant">methodConstant</link> &#8211; we can use a method returning a
collection, surrounded with backtricks to improve efficiency.
</para>
<anchor id="verticesMethod"/>
<screen>SpaceShip&gt;&gt;vertices
   ^ `{0@-15 . -10@15 . 0@10 . 10@15}`
   
Torpedo&gt;&gt;vertices
   ^ `{0@-4 . -2@4 . 2@4}`
</screen>

<para>Then in the drawing methods, we replace <literal>self class
vertices</literal> by <literal>self vertices</literal>.
</para>
<!-- refactoring of collision with display bounds -->
</sect2>
<sect2 label="">
<title>Collisions revisited</title>
<para>In <link linkend="shipSunCollision">shipSunCollision</link>, we have a very naive approach for collision
between the central star and the ships, based on distance between
morphs. It was very inaccurate.
</para>
<para>In bitmap games, a classic way to deal with collision detection is to
look at the intersections of the rectangles surrounding the graphic
objects. The <literal>#displayBounds</literal> message sent to a morph answers its
bounds in the display, a rectangle encompassing the morph given its
rotation and scale.
</para>
<anchor id="ch07_002d13_002dshipDisplayBounds"/>
<inlinemediaobject><imageobject><imagedata fileref="ch07-13-shipDisplayBounds.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>When browsing the <literal>Rectangle</literal> class, you learn the
<literal>#intersects:</literal> message tells us if two rectangles overlap. This is
what we need for a more accurate collision detection between the
central star and the space ships:
</para>
<anchor id="accurateCollisionShipsSun"/>
<screen>SpaceWar&gt;&gt;collisionsShipsStar
   ships do: [:aShip | 
      (aShip displayBounds intersects: centralStar displayBounds) ifTrue: [
         aShip flashWith: Color red.
         self teleport: aShip]]
</screen>


<para>Nevertheless we use the VectorGraphics framework, its knows about the
shape of each morph it is rendering. It uses this knowledge for
collision detection at the pixel precision. We rewrite our detection
method simpler with the <literal>#collides:</literal> message:
</para>
<anchor id="accuratePixelCollisionShipsSun"/>
<screen>SpaceWar&gt;&gt;collisionsShipsStar
   ships do: [:aShip | 
      (aShip collides: centralStar) ifTrue: [
         aShip flashWith: Color red.
         self teleport: aShip]]
</screen>

<anchor id="exeAccurateDetection"/>
<para><emphasis>Rewrite the three collision detection methods between space ships, torpedoes and the central star.</emphasis>
</para>

<!-- -->
</sect2>
</sect1>
</chapter>
<chapter label="" id="Events">
<title>Events</title>

<blockquote><attribution>Lewis Carroll, Alice in Wonderland</attribution>
<para>When I used to read fairy tales, I fancied that kind of thing never
happened, and now here I am in the middle of one!
</para></blockquote>




<bridgehead renderas="sect1">What just happened?</bridgehead>

<para>We talked above about control flow, how one makes decisions about what
to do in making calculations.  We talked about this like the entire
computer processing resource was dedicated to this task. But it isn&#8217;t
so.
</para>
<para>Computers may be fast at some calculations, but they are only so fast,
and when there are many things to do, one shares and takes turns.
</para>
<para>So aside from <emphasis>do this and then do that</emphasis>, <firstterm>event</firstterm>s happen.
</para>
<para>Also, a computer may be fast enough that it literally has
<emphasis>nothing</emphasis> to do.  What does it do then?  When a processor
<emphasis>goes to sleep</emphasis>, how do we get its attention?
</para>
<para>You are reading the right chapter to know.
</para>

<sect1 label="" id="System-Events">
<title>System Events</title>

<para>Modern integrated <firstterm>System On a Chip</firstterm> (<firstterm>SOC</firstterm>) hardware has many
circuits which are active at the same time.  So one kind of event is
sensing something happening in the world.  Class <literal>EventSensor</literal>
handles keyboard key press and mouse <firstterm>hardware interrupts</firstterm>,
translating between hardware signals and software event objects.
</para>
<para>Basically, a morph <emphasis>raises its hand</emphasis> and says what events, if
any, it is interested in receiving. Then it implements methods to get
the event objects holding the information of the captured events. In
Cuis-Smalltalk, the class <literal>MorphicEvent</literal> and its subclasses represent
the diversity of events in the system.
</para>
<indexterm role="cp"><primary>event</primary><secondary>classes</secondary></indexterm><abstract><literal>MorphicEvent</literal>
   <literal>DropEvent</literal>
   <literal>DropFilesEvent</literal>
   <literal>UserInputEvent</literal>
      <literal>KeyboardEvent</literal>
      <literal>MouseEvent</literal>
         <literal>MouseButtonEvent</literal>
         <literal>MouseMoveEvent</literal>
         <literal>MouseScrollEvent</literal>
      <literal>WindowEvent</literal>
</abstract>

<para>As <literal>MouseMoveEvent</literal>s are generated, the <literal>HandMorph</literal>
adjusts its screen position.  When mouse and keystroke events arrive,
the <literal>HandMorph</literal> coordinates the &#8220;dispatch&#8221; of events to the
proper morph under the hand as well as displaying tool tips and
carrying morphs in transit during drag operations.
</para>
<para>As we saw in the previous chapter with <literal>ColorClickEllipse</literal>, any
morph may override default <literal>Morph</literal> methods to assert that it
handles various user events and the methods which take the associated
event objects when events arrive.
</para>
<para>Basically, user input events are generated, a <literal>HandMorph</literal>
reflects any cursor movement, morphs react to events, each long
running task gets a time slice and makes some progress, any display
changes are updated on the screen, and the next step happens.  Time
marches forward a step.
</para>
<para>This happens over and over and over, keeping the juggler&#8217;s illusion
that all balls in the air are moving at once.  Underneath, the balls
are each moving just a bit, in sequence.
</para>
</sect1>
<sect1 label="" id="Overall-Mechanism">
<title>Overall Mechanism</title>

<!-- Explain the event-handling-testing and event method categories in -->
<!-- Morph. (btw, event->event-handling, -->
<!-- event-handling->event-preferences. Need to be clarified because it -->
<!-- is confusing -->

<!-- event-handling-tested->events-handled -->
<!-- event-handling->events-preference -->
<!-- events->events-handling -->

<indexterm role="cp"><primary>event</primary><secondary>testing</secondary></indexterm><indexterm role="cp"><primary>event</primary><secondary>handling</secondary></indexterm><para>In <link linkend="A-brief-introduction-to-Inspectors">A brief introduction to Inspectors</link>, we explained how to set
properties for an individual morph instance to handle a
specific event. In this
case, one property informed Cuis-Smalltalk we were interested in a
given event (<literal>#handlesMouseDown</literal>), a second property defined
the behavior with a block of code to be executed each time this event occurred.
</para>
<para>Alternatively, to handle events in a given morph class, we define the
behavior with instance methods. In the <literal>Morph</literal> class, observe
the method categories <command>event</command> and <command>event handling
testing</command>.
</para>
<para>The method category <command>event handling testing</command> lists methods
returning a Boolean to indicate if the instance should be notified about
certain events. Let&#8217;s take a look at one of these methods,
<literal>handlesMouseDown:</literal>, its comment is worth reading:
</para>
<screen>Morph&gt;&gt;handlesMouseDown: aMouseButtonEvent
&quot;Do I want to receive mouseButton messages ?
- #mouseButton1Down:localPosition:
- #mouseButton1Up:localPosition:
- #mouseButton2Down:localPosition:
- #mouseButton2Up:localPosition:
- #mouseButton3Down:localPosition:
- #mouseButton3Up:localPosition:
- #mouseMove:localPosition:
- #mouseButton2Activity
NOTE: The default response is false. Subclasses that implement these
messages directly should override this one to return true.
Implementors could query the argument, and only answer true for (for
example) button 2 up only.&quot;
&quot;Use a property test to allow individual instances to dynamically
specify this.&quot;

   ^ self hasProperty: #'handlesMouseDown:'
</screen>
<para>As defined by default, this method and the other handlers
check to see if an instance has defined a property with the same
name as the standard method.
So each individual instance can add its own behavior.
</para>
<para>In a morph class where we want <emphasis>all</emphasis> instances to
handle mouse down events, we just override
the appropriate method to return true:
</para>
<screen>MyMorph&gt;&gt;&gt;&gt;handlesMouseDown: aMouseButtonEvent
   ^ true
</screen>
<para>Now in the <command>events</command> method category for class <literal>Morph</literal>, we find the
handlers listed in the comment above. A <literal>ScrollBar</literal>, a kind of
Morph to represent a list&#8217;s position control, scrolls its list contents when a
mouse button 1 is pressed:
</para>
<screen>ScrollBar&gt;&gt;mouseButton1Down: aMouseBtnEvent position: eventPosition
&quot;Update visual feedback&quot;
   self setNextDirectionFromEvent: aMouseBtnEvent.
   self scrollByPage
</screen>
<para>To discover other events available for your morph, explore with the
System Browser as described above.
</para>
</sect1>
<sect1 label="" id="Spacewar_0021-Events">
<title>Spacewar! Events</title>
<para>Obviously our Spacewar! game handles events. Firstly we want to control the
ships with the keyboard. Secondly, we want the game to pause
when the mouse cursor moves out of the game play, and resume when it
enters again.
</para>
<para>In our design, a unique morph, <literal>SpaceWar</literal> instance, models the
game play. Therefore we want this instance to handle the events
described above.
</para>
<sect2 label="">
<title>Mouse event</title>
<indexterm role="cp"><primary>event</primary><secondary>mouse</secondary></indexterm><indexterm role="cp"><primary>mouse</primary></indexterm>

<bridgehead renderas="sect3">Mouse cursor enters game play</bridgehead>
<indexterm role="cp"><primary>event</primary><secondary>testing</secondary><tertiary>mouse over</tertiary></indexterm>
<para>We want to catch events when the mouse cursor moves over our
<literal>SpaceWar</literal> morph.
</para>
<anchor id="handleMouseOver"/>
<para><emphasis>Which method should return true to let the game play be notified
with a dedicated messages that the mouse cursor enters or leaves? In which
class should we implement this method?</emphasis>
</para>


<para>Once we make explicit we want the game play to receive mouse move-over
events, we need to set the behavior accordingly with dedicated
methods.
</para>
<indexterm role="cp"><primary>event</primary><secondary>handling</secondary><tertiary>mouse enter</tertiary></indexterm><para>Each time the mouse cursor enters the game play, we want to:
</para>
<itemizedlist>
<listitem><para><emphasis role="bold">Get keyboard focus.</emphasis> It follows the mouse cursor: the
  keyboard input goes to the morph under the mouse cursor. In Cuis-Smalltalk,
  the mouse cursor is modeled as a <literal>HandMorph</literal> instance, an
  event object (see event classes hierarchy at the beginning of this
  chapter). An event object is interrogated about its hand with the
  <literal>#hand</literal> message. All in all, we want the keyboard focus to be
  targeted toward our game play when the mouse enters:
</para>
<screen>event hand newKeyboardFocus: self
</screen>
</listitem><listitem><para><emphasis role="bold">Resume the game.</emphasis> The continuous update of the game is
  done through a dedicated process stepping mechanism, which will
  be discussed in the next chapter. The game play just asks itself to
  resume stepping:
  </para><screen>self startStepping
</screen></listitem></itemizedlist>
<anchor id="mouseEnter"/>
<para><emphasis>Which message is
sent to the game play to be notified the mouse cursor enters the game
play area?  How should the matching method be written?</emphasis>
</para>


<bridgehead renderas="sect3">Mouse cursor leaves game play</bridgehead>
<indexterm role="cp"><primary>event</primary><secondary>handling</secondary><tertiary>mouse-enter</tertiary></indexterm>
<para>We also want to be informed when the mouse cursor leaves our
<literal>SpaceWar</literal> morph. Thanks to the work done in
<link linkend="handleMouseOver">handleMouseOver</link>, we already informed Cuis-Smalltalk we want to be
notified of mouse movement over the game play. However we need to code
the behavior when the mouse cursor leaves the game play:
</para>
<itemizedlist>
<listitem><para><emphasis role="bold">Release keyboard focus.</emphasis> We tell Cuis-Smalltalk the game play
  does not want keyboard focus:
</para>
<screen>event hand releaseKeyboardFocus: self
</screen>
</listitem><listitem><para><emphasis role="bold">Pause the game.</emphasis> We stop the continuous
  <emphasis>stepping</emphasis> update of the game:
</para>
<screen>self stopStepping
</screen>
</listitem></itemizedlist>
<anchor id="mouseLeave"/>
<para><emphasis>Which message is
sent to the game play to be notified the mouse cursor leaves the game
play area?  How should we write the overridden method?</emphasis>
</para>


<para>In graphic user interface, a visual effect is often used to inform the
user the keyboard focus changed. In Spacewar! we change the game play
background depending on the sate of the keyboard focus.
</para>
<para>In <link linkend="ch08_002dFocus">ch08-Focus</link>, at the left keyboard focus is on the game; at the
right keyboard focus is not on the game, it is paused and we can see
underneath.
</para>
<anchor id="ch08_002dFocus"/>
<inlinemediaobject><imageobject><imagedata fileref="ch08-Focus.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>In the Morph framework, the <literal>#keyboardFocusChange:</literal> message is sent
to the morph losing or gaining the keyboard focus, its parameter is a
Boolean. Therefore we implement the <link linkend="ch08_002dFocus">ch08-Focus</link> behavior in the
matching <literal>SpaceWar</literal>&#8217;s method <literal>keyboardFocusChange:</literal>
</para>
<anchor id="keyboardFocusEffect"/>
<screen>SpaceWar&gt;&gt;keyboardFocusChange: gotFocus
   gotFocus 
      ifTrue: [color := self defaultColor]
      ifFalse: [color := self defaultColor alpha: 0.5].
   self redrawNeeded
</screen>

</sect2>
<sect2 label="">
<title>Keyboard event</title>
<indexterm role="cp"><primary>event</primary><secondary>keyboard</secondary></indexterm><indexterm role="cp"><primary>event</primary><secondary>testing</secondary><tertiary>keyboard</tertiary></indexterm>
<para>To control the space ships, we use the keyboard. Therefore we want the
game play to be notified of keyboard events.
</para>
<anchor id="keyboardEvent"/>
<para><emphasis>Find
out which method should return true to let the game be notified of
keyboard event.</emphasis>
</para>


<indexterm role="cp"><primary>event</primary><secondary>handling</secondary><tertiary>keyboard</tertiary></indexterm><para>We can decide to be notified of the key down or key up event and also
key down then up event (<firstterm>key stroke</firstterm>). As long as our
<literal>SpaceWar</literal> morph responds true to the <literal>#handlesKeyboard</literal>
message, it receives the messages <literal>#keyUp:</literal>, <literal>#keyDown:</literal> and
<literal>#keyStroke:</literal>. By default, the matching methods in the
<literal>Morph</literal> class do nothing.
</para>
<para>The argument of these messages is a <literal>KeyboardEvent</literal> object to
which, among other things, you can ask the <literal>#keyCharacter</literal> of the
pressed key or test about some special keys as the keyboard
arrows. The first player ship &#8211; the green one &#8211; is controlled with
the keyboard arrows when there are stroked:
</para>
<anchor id="firstShipControl"/>
<screen>SpaceWar&gt;&gt;keyStroke: event
   event isArrowUp ifTrue: [^ ships first push].
   event isArrowRight ifTrue: [^ ships first right].
   event isArrowLeft ifTrue: [^ ships first left].
   event isArrowDown ifTrue: [^ ships first fireTorpedo].
   ...
</screen>

<para>To control the second player ship, we use another classic arrangement
in QWERTY keyboard controlled game:
WASD<footnote><para><ulink url="https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys">https://en.wikipedia.org/wiki/Arrow_keys#WASD_keys</ulink></para></footnote>.
</para>
<anchor id="secondShipControl"/>
<para><emphasis>Append the additional code to <link linkend="firstShipControl">firstShipControl</link> to control
the second player ship with the keys WASD. As a reminder, in Smalltalk
the character code for q can be written as <literal>$q</literal>.</emphasis>
</para>




<!-- -->
</sect2>
</sect1>
</chapter>
<chapter label="" id="Code-Management">
<title>Code Management</title>

<blockquote><attribution>Alan Kay</attribution>
<para>Change is easy, except for the changed part.
</para></blockquote>



<para>Regarding the source code, Cuis-Smalltalk comes with several tools to
manipulate it: the image, the change record, the change set and the
package system. We give you a tour around these mechanisms then explain
how you should manage the code of an application written with Cuis-Smalltalk.
</para>

<anchor id="ch09_002dImage"/><sect1 label="" id="The-Image">
<title>The Image</title>

<para>We already wrote about the Cuis-Smalltalk <firstterm>image</firstterm> (See <link linkend="Installing-and-configuring-Cuis_002dSmalltalk">Installing and
configuring Cuis-Smalltalk</link>). When saving the state of the virtual machine in
the image file, every single change done in the environment will be
embodied in the saved image: this includes the windows in the
environment, Workspace contents, newly written classes and methods,
existing instances including the visual morphs, a debugging session
with a System Browser, an Inspector, etc.
</para>
<para>At any time, the user can save the image with ...World
menu &#8594; <command>Save</command>... Alternatively <command>Save as...</command> saves
the image under an alternate name provided by the user.
</para>
<para>Saving the image is the easiest and most straightforward method to
save your own code. But we can&#8217;t really call that code management as
your code is not saved in a dedicated file of its own but mixed into
other code in an image. Moreover it will be unpractical to share your
work with others, for example via a version control system.
</para>
<para>For various reasons, an image may be in fuzzy state: the virtual
machine may crash when running it, the file system may be unstable, or
the environment may be in a lock down state. This is a drawback when
using the image as your sole source code repository. The net result
could be loosing your work.
</para>
<para>Where you lost code because of a virtual machine crash there is a
solution to recover your lost editing, the <firstterm>Change Log</firstterm>.
</para>
</sect1>
<sect1 label="" id="The-Change-Log">
<title>The Change Log</title>
<indexterm role="cp"><primary>change log</primary></indexterm>

<para>Cuis-Smalltalk records any action occurring in the environment: the code you
edit in the System Browser, the code you execute in a
Workspace. Therefore, in the event of a Cuis-Smalltalk crash you can restore
unsaved changes when you launch the same Cuis-Smalltalk image again. Let&#8217;s explore
this feature with a simple example.
</para>
<para>On a fresh Cuis-Smalltalk installation, create a new class category named
<command>TheCuisBook</command> and within <literal>TheBook</literal> class:
</para>
<itemizedlist>
<listitem><para>Over the class category pane of System Browser (at the most
   left), do ...Right click &#8594; <command>add
   items... (a)</command>... key in <command>TheCuisBook</command>.
</para>
</listitem><listitem><para>Select this new class category and create the class
  <literal>TheBook</literal> as a kind of <literal>Object</literal>: select the
  <command>TheCuisBook</command> category then in the source code below edit the
  class template to replace <literal>#NameOfClass</literal> with
  <literal>#TheBook</literal> then save the class definition with
  <userinput>Ctrl-s</userinput>.
</para>  
</listitem></itemizedlist>
<para>Open a Workspace, then key in the following code:
</para>
<screen>| myBook |
myBook := TheBook new
</screen>
<para>Cuis-Smalltalk does not save code you key in the Workspace, but code you
execute. Let&#8217;s execute this code: <userinput>Ctrl-a</userinput> then <userinput>Ctrl-p</userinput>, the
Workspace prints the result: <literal>a TheBook</literal>, an instance of a
<literal>TheBook</literal> class.
</para>
<para>Now kill Cuis-Smalltalk abruptly. On GNU/Linux, you can use the
<command>xkill</command> command to terminate Cuis-Smalltalk by clicking at its window.
</para>
<para>Now start Cuis-Smalltalk again, and it immediately informs you there are unsaved
changes:
</para>
<anchor id="ch10_002dRecoverLostChanges1"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-RecoverLostChanges1.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>From there you have three options:
</para>
<itemizedlist>
<listitem><para><emphasis role="bold">Restore lost changes automatically.</emphasis> Cuis-Smalltalk will
  apply all the changes: new class definitions, new methods; edited
  class definitions and method source code; executed code (in
  Workspaces or any places where code can be executed). Often this is
  not really what you want to do, particularly the executed code.
</para>
<indexterm role="cp"><primary>tools</primary><secondary>lost changes</secondary></indexterm></listitem><listitem><para><emphasis role="bold">Restore lost changes manually.</emphasis> In the subsequent
  <command>Lost changes</command> window you are presented with the unsaved
  changes, one per line, in chronological order, with the older ones
  at the top of the list. You select each change (line) you want to
  restore, then you apply your selection with the <command>file in
  selections</command> button.
</para>
<anchor id="ch10_002dRecoverLostChanges2"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-RecoverLostChanges2.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>To file-in the changes related to the creation of the
  <literal>TheBook</literal> class but not the executed code in the Workspace, select
  the two lines related to class definition.
</para>
<para>The contextual menu (mouse right click) of the <command>Lost changes</command>
  window offers a lot of options to filter the changes. Useful when
  the batch of lost changes is important.
</para>
</listitem><listitem><para><emphasis role="bold">Nothing.</emphasis> No changes are restored. Keep in mind that
  unsaved changes aren&#8217;t discarded until you save your image.
</para>
<indexterm role="cp"><primary>tools</primary><secondary>recent changes</secondary></indexterm><para>In case you change your mind and you want to recover changes, do
  ...World menu &#8594; <command>Changes...</command>  &#8594;
  <command>Recently logged Changes...</command>.
</para>
<para>The system presents you a list of image snapshots tagged with a date
  stamp. Pick up the one occurring just before you lost your code,
  most likely at the top of the list. Then in the <command>Recent
  changes</command> window, you proceed as described earlier to cherry pick the
  changes to restore.
</para>
</listitem></itemizedlist>
</sect1>
<sect1 label="" id="The-Change-Set">
<title>The Change Set</title>
<indexterm role="cp"><primary>change set</primary></indexterm>

<para>On a fresh Cuis-Smalltalk installation, each code you edit in the System
Browser is recorded in a <firstterm>Change Set</firstterm>,
</para>
<para>You browse a change set with a tool named the <firstterm>Change Sorter</firstterm>:
...World menu &#8594; <command>Changes...</command>  &#8594;
<command>Change Sorter</command>...
</para>
<anchor id="ch10_002dChangeSet1"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-ChangeSet1.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>The <literal>TheBook</literal> class we added to Cuis-Smalltalk in the previous section
is a change made to the core of the system. By default, it is recorded
in a change set automatically created by the system. In
<link linkend="ch10_002dChangeSet1">ch10-ChangeSet1</link> at the top right, observe the class
<literal>TheBook</literal>, it belongs to a change set named
<command>4439-CuisCore-AuthorName-2020Nov16-13h40m</command>.  In the left pane,
each unsaved change set is marked with a <command>---&gt;</command>. Here it tells us
the change was not saved on disk. To save the change set, just use its
contextual menu and use one of the <command>file out</command> entries. The change
set will be saved along the Cuis-Smalltalk image under its system name with
<command>AuthorName</command> substituted with the real author name.
</para>
<anchor id="ch10_002dChangeSet2"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-ChangeSet2.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Observe <link linkend="ch10_002dChangeSet2">ch10-ChangeSet2</link>, after we added the method
<literal>pages</literal> to the <literal>TheBook</literal> class, the middle pane lists the
added or modified methods. When a method is selected its source code
is printed in the bottom pane.
</para>
<para>Let&#8217;s say we save the change set &#8211; <command>File out</command> entries in the
change sorter tool menu. This creates a new file
<filename>4451-CuisCore-HilaireFernandes-2020Nov14-21h08m-hlsf.001.cs.st</filename>
along the Cuis-Smalltalk image file:
</para>
<anchor id="changeSetContents"/>
<screen>From Cuis 5.0 [latest update: #4450] on 18 November 2020 at 9:05:09 am'!
!classDefinition: #TheBook category: 'TheCuisBook'!
Object subclass: #TheBook
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'TheCuisBook'!

!TheBook methodsFor: 'as yet unclassified' stamp: 'hlsf 11/18/2020 09:04:58'!
pages
   ^ 151! !
</screen>

<para>To load this change set back in a new image, you use the <firstterm>File
List</firstterm> tool ...World menu &#8594; <command>Open</command> &#8594;
<command>File List</command>... Browse the folder containing the change set file
to load, then select it, from there you have three options to
manipulate it.
</para>
<anchor id="ch10_002dFileListChangeSet"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-FileListChangeSet.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<itemizedlist>
<listitem><para><command>code</command>. It opens a kind of System Browser limited to
  the code in the change set file. It is a very handy tool to read and
  to learn the code from the change set.
</para>
</listitem><listitem><para><command>contents</command>. It opens a <firstterm>Change List</firstterm> tool to review
  the modifications to the image this change set will produce once
  installed. It also let you cherry pick the individual changes you
  want to install and to discard. Each line you cherry pick represents
  a class or a method addition/modification. Once you select the code
  to install, press the <command>file in selections</command> button to proceed
  with the installation.
</para>
<para>Consider a co-developer modifying the <literal>TheBook</literal> class, she
  added an instance variable <literal>pages</literal> and adjusted the
  <literal>pages</literal> methods accordingly. She filed out her changes then
  shared the file with you. Observe in <link linkend="ch10_002dChangeList">ch10-ChangeList</link> how you
  will review her changes with the Change List tool. Our code that
  will be removed from the image is shown in red stroked, and her code
  that will be installed is shown in green.
</para>
<anchor id="ch10_002dChangeList"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-ChangeList.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


</listitem><listitem><para><command>install</command>. It just installs the complete change set
  without interactivity.
</para>  
</listitem></itemizedlist>
<para>The change set way of managing the source code is used by the
developers of Cuis-Smalltalk, to work on its core image. When you want to
write an application, a dedicated tool or even a set of classes
covering a specific domain, you really want to use something else to
manage the code: a package.
</para>
</sect1>
<sect1 label="" id="The-Package">
<title>The Package</title>
<indexterm role="cp"><primary>package</primary></indexterm>
<indexterm role="cp"><primary>class</primary><secondary>category</secondary></indexterm>
<para>A package can hold a set of classes part of the same class category.
</para>
<para>Let&#8217;s save our <command>Morphic-Learning</command> category as a package using
our Installed Packages Browser.
</para>
<para>...World menu &#8594; <command>Open...</command> &#8594;
<command>Installed Packages</command>...
</para>
<anchor id="ch10_002dPackage_002dwith_002drequirement"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-Package-with-requirement.png" format="PNG"></imagedata></imageobject></inlinemediaobject>



<indexterm role="cp"><primary>package</primary><secondary>requirement</secondary></indexterm>
<para>Note that we invoked <literal>Feature require: 'SVG'</literal>
earlier. Looking at the package names, we can observe several things
of note:
</para>
<itemizedlist>
<listitem><para>Each package is versioned; <command>SVG</command> has version
  1, revision 19.
</para>  
</listitem><listitem><para>There are packages <command>YAXO</command>, <command>Color-Extras</command> and
  <command>LinearAlgebra</command> which we never asked for.
</para>  
</listitem><listitem><para>Looking at the lower pane, note that those packages are
  <emphasis role="bold">required</emphasis> by the package <command>SVG</command>.
</para>  
</listitem></itemizedlist>
<para>Now this is important.  When a packaged Feature is required, it may
specify that it also requires other packages to work properly, and
in fact to specify that those packages be up to a specific version level.
</para>
<para>This is the key to being able to safely compose packages which have
requirements.
</para>
<para>OK, let&#8217;s click on the <command>New</command> button and type
<command>Morphic-Learning</command> into the prompt.  This results in a new
package with the same name as our <command>Morphic-Learning</command> category.
Note that this is version 1, revision 0 (1.0 at right) and that the
package has yet to be saved.
</para>
<anchor id="ch10_002dNewPackage_002dMorphic_002dLearning"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-NewPackage-Morphic-Learning.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Let&#8217;s say that in our clock morph we want to use color named as in the
<command>Color-Extra</command> package. So to be able to load our
<command>Morphic-Learning</command> package which makes use of this we need to
select our new package and click on the <command>add Requirement</command> button
at center, right.
</para>
<para>This brings up a list of loaded packages to choose from.
</para>
<anchor id="ch10_002dAdd_002dRequirement"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-Add-Requirement.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Now when we <command>save</command> our package, we see the pathname where the package
file was created.  We can now safely email this file, check it into a version
control system, make a copy to our backup thumb drive.
</para>
<anchor id="ch10_002dSaved_002dwith_002drequirement"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-Saved-with-requirement.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>As mentioned above, package files are just text files with a special format
which Cuis-Smalltalk knows how to load.  If you open a File List browser and
view the package file, you will see information on how the package
was created, what it provides and requires, and, if you filled in the
comment box in the Installed Packages browser, a description.
</para>
<anchor id="exeDescribePackage"/>
<para><emphasis>Type &#8220;Morphic
Toys&#8221; into the comment box&#44; re-save your package&#44; and
(re)select the package in a File List to see your package
description.</emphasis>
</para>


<anchor id="exeSavePkgSpacewar"/>
<para><emphasis>If you have
not already done so&#44; create and save a <link linkend="Spacewar_0021-package">Spacewar!
package</link>. There are no additional requirements to specify.</emphasis>
</para>


<!-- explain how to include class extension in a package -->
<indexterm role="cp"><primary>package</primary><secondary>prefix</secondary></indexterm><para>There are other interesting things we can do with packages.
We can include several class categories in a single
package. Consider we want to span our CuisBook classes in two
categories <command>TheCuisBook-Models</command> and <command>TheCuisBook-Views</command>. A
new package created with the name <command>TheCuisBook</command> includes these
two class categories; this label is a <firstterm>prefix</firstterm> to search for the
matching categories to include in the package.
</para>
<para>Therefore, often, a package comes with several categories to organize
the classes in matching domains. We encourage to do so. When an
application or framework grows, to keep a sound organisation, you may
fell the need to reshape the class categories: rename, split, merge,
etc. As long as you keep the same prefix in the class categories and
the package name, your classes will be safe in the same package. In
the System Browser, you can drag and drop any class in any class
category to reorganize.
</para>
<anchor id="twoCategoriesOnePackage"/>
<para><emphasis>Create a <command>TheCuisBook</command> package from the two class
categories <command>TheCuisBook-Models</command> and
<command>TheCuisBook-Views</command>. The former contains a <literal>TheBook</literal>
class and the later a <literal>TheBookMorph</literal> class. Save the package
on disk.</emphasis>
</para>


<indexterm role="cp"><primary>package</primary><secondary>system extension</secondary></indexterm><para>Imagine we need to print the page number of the <literal>TheBook</literal> table
of contents as lower cased roman number, as we do with the printed
version of this book. The code is very simple:
</para>
<screen>4 printStringRoman asLowercase
&#8658; 'iv'
</screen>
<para>Instead of invoking this sequence of messages each time we need it, we
 add a dedicated message to the <literal>Integer</literal> class:
</para>
<screen>Integer&gt;&gt;printStringToc
   ^ self printStringRoman asLowercase
</screen>
<para>Now within our <literal>TheBook</literal>&#8217;s methods we just do things like:
</para>
<screen>../..
 aPage := Page new.
 aPage number: 1 printStringToc.
 ../..
</screen>
<para>Now we are facing a problem. For the need of the <command>TheBook</command>
package we extend the <literal>Integer</literal> class with a method
<literal>printStringToc</literal>, however this method addition is part of the
Cuis-Smalltalk core system and its associated default change set. See
<link linkend="ch10_002dChangeSetToCore">ch10-ChangeSetToCore</link>, the Change Sorter tool exactly shows that.
</para>
<anchor id="ch10_002dChangeSetToCore"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-ChangeSetToCore.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Therefore when saving our <command>TheBook</command> package this method is not
included and it is lost when quitting Cuis-Smalltalk. To include it in our
package we categorize it in a method category with the
<command>*TheCuisBook</command> prefix. <command>*TheCuisBook-printing</command> is a good
candidate. In the System Browser method pane, over
<literal>printStringToc</literal>, do ...Contextual menu &#8594;
<command>more...</command> &#8594; <command>change category...</command> and key in
<command>*TheCuisBook-printing</command>.
</para>
<para>Now the Change Sorter writes about <literal>Integer&gt;&gt;printStringToc</literal>:
<citetitle>Method was moved to some other package</citetitle>. The Installed Packages
tools now tells us we have an extension, use its <command>browse</command> button
to get an update on the package contents.
</para>
<anchor id="ch10_002dBrowsePackageChange"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-BrowsePackageChange.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Observe how each category &#8211; class or method one &#8211; of an extension is
prefixed with a <command>*</command>.
</para>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
In addition to adding a package preload <emphasis>requirement</emphasis>,
you can also select a requirement and <command>delete</command> or <command>update</command>
it using the buttons at the lower right.  Sometimes a package changes
which your code depends on and you have to change your code to accord.
When this happens, to want to be sure to require the newer, changed
version.  Selecting a requirement and pressing <command>update</command>
will update the requirement to use the latest loaded package version.
</para>
</sect1>
<sect1 label="" id="Daily-Workflow">
<title>Daily Workflow</title>

<para>For our Spacewar! game, we created a dedicated package
<filename>Spacewar!.pck.st</filename> file. This is the way to go when writing
external package: define a dedicated package and from time to time
save your work with the <command>save</command> button in the Installed Packages
tool (See <link linkend="ch02_002dInstalledPackages">ch02-InstalledPackages</link>).
</para>
<para>Cuis-Smalltalk uses GitHub to host, version, diff its core development and to
manage a set of external packages (i.e. code that is maintained
independently and outside Cuis-Smalltalk but closely related to it).
</para>
<para>Package files are simple text files, encoded for latin alphabet (ISO
8859-15) and handled without problems by GitHub. Cuis-Smalltalk uses the LF
(ascii code 10) newline convention, as preferred in GitHub. This
allows Git/GitHub to diff versions, and merge branches.
</para>
<para>Separate GitHub repositories are used for projects, i.e. package or
set of closely related packages that are always loaded and maintained
together as a whole.
</para>
<para>Your daily workflow with Cuis-Smalltalk to develop an external package will
look like:
</para>
<orderedlist numeration="arabic">
<listitem><para>Start with a standard, fresh, Cuis image. Never save the
  image.
</para>
</listitem><listitem><para>Set up your preferred version control system to manage your
  external packages. The recommendation is to use a GitHub repository
  with a name beginning with &#8217;Cuis-Smalltalk-&#8217;, so it will be easy for
  anybody to find it. But beside this consideration, using any other
  version control system is fine.
</para>
</listitem><listitem><para>Install the necessary packages from the Cuis-Smalltalk Git
  repositories.
</para>
</listitem><listitem><para>Develop. Modify and/or create packages.
</para>
</listitem><listitem><para>Save own packages (to your preferred repositories).
</para>
</listitem><listitem><para>add / commit / push accordingly to your version control system
</para>
</listitem><listitem><para>Fileout changes that are not part of any package. These are
  automatically captured in numbered changesets, separated from
  changes to packages.
</para>
</listitem><listitem><para>Exit the image. Usually without saving.
</para>
</listitem></orderedlist>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
Not to save the image is just best practice advice for you
when your primary goal is to create new code. We already discussed the
caveats of saving the image concerning code management
(See <link linkend="ch09_002dImage">The Image</link>).  But from time to time, you&#8217;ll find
yourself in the position of an explorer when you open multiple code
browsers and workplaces to figure something out. In this case, the
state of the system, the open windows and code snippets, holds the
value you care about, and saving the image is the right way to
preserve the system&#8217;s state.
<footnote><para>For more insight regarding the
policy of saving the image, read this discussion in the Cuis community
<ulink url="https://lists.cuis.st/mailman/archives/cuis-dev/2023-July/007841.html">there</ulink>
and
<ulink url="https://lists.cuis.st/mailman/archives/cuis-dev/2023-August/007884.html">there</ulink></para></footnote>
</para>
<sect2 label="">
<title>Automate your image</title>

<para>As described in the daily workflow, it is a good habit to not save the
whole image but only the modified package of the edited source
code. However, each time we start a coding session, it is tedious to
set up the image to fit our personal needs and taste.
</para>
<para>Things one may want to personalize in the image are:
</para>
<itemizedlist>
<listitem><para>Preferences adjustments,
</para>
</listitem><listitem><para>Placement of tools like System Browser, Workspace, Transcript,
</para>
</listitem><listitem><para>Default contents in the Workspace, ready to be executed,
</para>
</listitem><listitem><para>Installation of Packages.
</para>
</listitem></itemizedlist>
<indexterm role="cp"><primary>command line option</primary><secondary>-s (run a script)</secondary></indexterm><indexterm role="cp"><primary>start-up script</primary></indexterm>

<para>We want to record these image preferences in a
<filename>setUpEnvironment.st</filename> script to be executed at start up. On
GNU/Linux, you ask Cuis-Smalltalk to run a script with the <option>-s</option>, for
example <command>squeakVM Cuis5.0.image -s setUpEnvironement.st</command> where
<filename>setUpEnvironement.st</filename>. is a file containing Smalltalk code. A
real life example may look like:
</para><screen>../cogspur/squeak Cuis5.0-4426 -s ../scripts/setUpEnvironment.st
</screen>
<para>We describe in detail an example of a set up script organizing the
environment as seen in <link linkend="ch10_002dImageSetUp">ch10-ImageSetUp</link>. It is interesting
Smalltalk code poking around heterogeneous areas of Cuis-Smalltalk like the
developer tools, the Morph system, the preferences and collection
handling.
</para>
<anchor id="ch10_002dImageSetUp"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-ImageSetUp.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<indexterm role="cp"><primary>morph</primary><secondary>world</secondary></indexterm><para>Let&#8217;s start by removing the open windows:
</para>
<screen>| list |
&quot;Delete all windows but the taskbar&quot;
self runningWorld doOneCycleNow.
list := UISupervisor ui submorphs reject: [:aMorph |
   aMorph is: #TaskbarMorph].
list do: [:each | each delete].
</screen>
<para>The whole user interface world of Cuis-Smalltalk is a kind of Morph, a
<literal>WorldMorph</literal> instance. Its submorphs are windows, menus, the
taskbar or any kind of morph the user can interact with. To access
this <literal>WorldMorph</literal> instance you ask to the <literal>UISupervisor</literal>
with the <literal>#ui</literal> message. Once we select all the morphs in the world
but the taskbar &#8211; really <literal>#reject:</literal> it &#8211; we <literal>#delete</literal> them
from the world.
</para>
<para>Next, we change the preferences:
</para>
<screen>| list morph |
../..
&quot;Change to Dark theme&quot;
Feature require: #'Theme-Themes'.
DarkTheme beCurrent.
&quot;Adjust font size&quot;
Preferences at: #defaultFontSize put: 12.
&quot;Adjust taskbar size&quot;
morph := UISupervisor ui taskbar.
morph scale: 1 / 2.
Display fullScreenMode: true.
self runningWorld doOneCycleNow.
</screen>
<para>We require Theme-Themes package; as it is not installed on the default
image, it will be searched on the disk for installation. Regarding the
taskbar access, remember we deleted all the morphs but the taskbar
from the world, therefore the taskbar is really the first in the sub
morphs collection of the world. Finally, we update the scale of the
taskbar and we request Cuis-Smalltalk to display itself full screen. As we
changed several visual parts, we request one update cycle of the
environment (i.e. the running world in Cuis-Smalltalk terminology).
</para>
<para>Before installing the tools, we ask a <literal>RealEstateAgent</literal> the free
area. Sadly this agent does not take into consideration the area
occupied by the taskbar, so we need to tweak its answer. Then we
compute a quarter of this free area extent (half in width and half
in height make a quarter of the whole free area):
</para>
<screen>| list morph area extent |
../..
&quot;Compute the available free space for windows placement&quot;
area := RealEstateAgent maximumUsableArea
   extendBy: 0 @ morph morphHeight negated.
extent := area extent // 2.
</screen>
<para>Now we are ready to install a few tools. First three browsers each
occupying a quarter of the screen:
</para>
<screen>&quot;Open a few System Browsers&quot;
BrowserWindow openBrowser
   morphPosition: 0 @ 0;
   morphExtent: extent.
BrowserWindow openBrowser
   morphPosition: area width // 2 @ 0;
   morphExtent: extent.
&quot;Open a System Browser on a specific class&quot;
morph := BrowserWindow openBrowser
   morphPosition: area extent // 2;
   morphExtent: extent.
morph model setClass: Integer selector: nil.
</screen>
<para>Then in the remaining free quarter, we install a workspace occupying
two thirds of the area and a transcript one third. The workspace is
installed with some default contents. We need to hack a bit because
when asking for a new Workspace, Cuis-Smalltalk does not answer the created
instance, we have to search it in the windows of the world.
</para>
<screen>&quot;Open a Workspace with some default contents&quot;
morph := Workspace openWorkspace.
morph model actualContents: '&quot;Some code&quot;
1 + 2.
&quot;Other code&quot;
5 * 3.'.
morph
   morphPosition: 0 @ (area height // 2);
   morphExtent: extent x @ (2 / 3 * extent y).
&quot;Open a transcript for logs&quot;
TranscriptWindow openTranscript
   morphPosition: 0 @ (area height // 2 + (2 / 3 * extent y));
   morphExtent: extent x @ (1 / 3 * extent y).
</screen>
<para>Of course you should adjust the argument of the <literal>#actualContents:</literal>
message to meaningful code for your usage.
</para>
</sect2>
</sect1>
<sect1 label="" id="Source-Code-File">
<title>Source Code File</title>
<indexterm role="cp"><primary><filename>.st</filename></primary></indexterm>
<indexterm role="cp"><primary><filename>.pck.st</filename></primary></indexterm>
<indexterm role="cp"><primary>file extension</primary><secondary><filename>.st</filename></secondary></indexterm><indexterm role="cp"><primary>file extension</primary><secondary><filename>.st.pck</filename></secondary></indexterm>
<para>In this chapter, you encountered files produced by the Cuis-Smalltalk
management tools. Some come with the extension <filename>.pck.st</filename> and
others with the extension <filename>.st</filename>. They both contain Smalltalk code
but serve different purposes.
</para>
<para>Files with extension <filename>.pck.st</filename> are Cuis-Smalltalk package files. They
have a preamble with package information, like feature provided,
version information, a description for the package and the package
requirements.
</para>
<para>Smalltalk code files can be installed by selecting them in the File
List Browser and clicking on <command>install</command> button.
</para>
<para>When a package is installed, its dependencies are also installed and
the loaded packaged appears in the Package List tool. Package files
<filename>.pck.st</filename> are created using the Packages List tool in
Cuis-Smalltalk.
</para>
<para>Files with extension <filename>.st</filename> contained serialized Smalltalk code &#8211;
classes and methods. They are created when you <firstterm>file out</firstterm> a
Smalltalk system category, class or method. You can serialize code in
the System Browser by selecting a <emphasis role="bold">system
category</emphasis>, <emphasis role="bold">class</emphasis> or <emphasis role="bold">method</emphasis> &#8594; right click and
select <command>fileOut</command> from the context menu.
</para>
<para>Unlike <filename>.pck.st</filename> files, <filename>.st</filename> files don&#8217;t contain any
dependencies, description, or package information, only serialized
Smalltalk code. <filename>.st</filename> files are around since Smalltalk’s early
days, while <filename>.pkg.st</filename> were added with the Cuis-Smalltalk package
functionality.
</para>
<para>In addition to <command>install</command>, selecting a code file in the File List
Browser also adds buttons to inspect the <command>code</command> and to treat code
<command>contents</command> like a Change Sorter. When inspecting the code, a
browser shows what code is different between the file and the running
image and allows one to import individual classes or methods with the
help of the context menu.
<!-- -->
</para></sect1>
</chapter>
<chapter label="" id="Debug-and-Exception-Handling">
<title>Debug and Exception Handling</title>

<blockquote><attribution>Dan Ingalls</attribution>
<para>Reactive Principle: Every component accessible to the user
should be able to present itself in a meaningful way
for observation and manipulation.
</para></blockquote>



<para>The quote above is worth repeating.
</para>
<para>We think of Morphs and &#8220;data objects&#8221; as able to present themselves
to be inspected, but Smalltalk&#8217;s runtime state is also presentable.
</para>



<sect1 label="" id="Inspecting-the-Unexpected">
<title>Inspecting the Unexpected</title>
<indexterm role="cp"><primary>exception</primary></indexterm>
<para>We have seen how various exceptional situations cause the appearance of
a debugger window.  Indeed, <literal>Exception</literal>s are also 
objects which remember their context and can present it.  Above, we have
seen how to generate <literal>MessageNotUnderstood</literal> and <literal>ZeroDivide</literal>
Exception instances.
</para>
<para>This is another area where the actual mechanics are complex, but the basic ideas are simple.
</para>
<indexterm role="cp"><primary>block</primary><secondary><literal>ensure:</literal></secondary></indexterm><para>Exception instances, being objects, also have classes.  The <literal>BlockClosure</literal>
has a method category <command>exceptions</command> which gathers some handy methods
which allow one to <literal>ensure:</literal> cleanup or capture and use exceptions
(<literal>on:do:</literal> and friends).
</para>
<anchor id="ensure"/>
<screen>FileEntry&gt;&gt;readStreamDo: blockWithArg 
  &quot;Raise FileDoesNotExistException if not found.&quot;
  | stream result |
  stream := self readStream.
  <emphasis role="bold">[</emphasis> result := blockWithArg value: stream <emphasis role="bold">]</emphasis>
	<emphasis role="bold">ensure:</emphasis> <emphasis role="bold">[</emphasis> stream ifNotNil: [ :s | s close ]<emphasis role="bold">]</emphasis>.
  ^ result
</screen>

<para>Exceptions are created and <firstterm>signal</firstterm>ed.  Let&#8217;s make one and look at it.
</para>
<anchor id="ch10_002d01_002dZeroDivide"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-01-ZeroDivide.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Again, we can use an Inspector on any object, and <literal>Exception</literal>s are
no exception!  Now you know how to capture one when you need to.
</para>
<para><literal>Exception</literal>s, like <literal>MorphicEvent</literal>s are a change,
an exception, to typical control flow.
</para>
<para>We noted above the special
pseudo-variable, <literal>thisContext</literal>.  Signalling an exception
captures this.
</para>
<anchor id="signal"/>
<screen>Exception&gt;&gt;signal

  ^ self signalIn: thisContext

</screen>

<para>Just as Smalltalk code has special view windows which we call <command>Browser</command>s,
<literal>Exception</literal>s have an enhanced viewer we call the <command>Debugger</command>.
Let us look at how to use this very useful viewer.
</para>
</sect1>
<sect1 label="" id="The-Debugger">
<title>The Debugger</title>
<indexterm role="cp"><primary>debugger</primary><see>tools</see></indexterm>
<indexterm role="cp"><primary>tools</primary><secondary>debugger</secondary></indexterm><para>First, we need a fairly simple code example to look at.  Please type
or copy the following into a Workspace.
</para>
<anchor id="childNames"/>
<screen>| fileNames |
fileNames := OrderedCollection new.
(DirectoryEntry smalltalkImageDirectory) 
    childrenDo: [ :f | fileNames add: f name ].
fileNames asArray.
</screen>

<para>Now, you can <userinput>Ctrl-a</userinput> (<emphasis>select <emphasis role="bold">A</emphasis>ll</emphasis>) and <userinput>Ctrl-p</userinput>
(<emphasis>select <emphasis role="bold">P</emphasis>rint-it</emphasis>) to see the result.
</para>
<anchor id="ch10_002d02_002dDirChildNames"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-02-DirChildNames.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<indexterm role="cp"><primary>file</primary></indexterm>
<indexterm role="cp"><primary>string</primary><secondary>file entry</secondary></indexterm><para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
The <literal>String</literal> class has several method category names
starting with <command>fileman-</command> for converting pathnames (system names
for files and directories) into <literal>FileEntry</literal> and
<literal>DirectoryEntry</literal> objects.  <literal>String&gt;&gt;asFileEntry</literal> gives
examples.
</para>
<para>Now that we know what to expect, let us step through processing of the code
using the debugger.
Remove the result, then <userinput>Ctrl-a</userinput> (<emphasis>select <emphasis role="bold">A</emphasis>ll</emphasis>) and
<userinput>Ctrl-Shift-D</userinput> (<emphasis>select <emphasis role="bold">D</emphasis>ebug-it</emphasis>).
</para>
<anchor id="ch10_002d03_002dDebugIt"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-03-DebugIt.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<indexterm role="cp"><primary>execution stack</primary></indexterm>
<para>The top pane in the debugger shows a view of the <firstterm>execution stack</firstterm>
for this bit of execution context.  The way to think of this, the
<firstterm>model of execution</firstterm>, is that each time a method sends a message,
it and its current state, arguments and local variables, are placed on
a <emphasis>stack</emphasis> until the result of that message is received.  If that
message causes another message to be sent, then the new state is
pushed onto the stack.  When a result is returned, the <firstterm>stack
frame</firstterm> is <emphasis>poped</emphasis> and processing continues.  This works like a
stack of trays in a cafeteria.
</para>
<para>The stack frames are displayed to show the stacked receiver and
method.  The focus object, the receiver, for the selected stack frame
has an inspector in the lower left debugger panes at the bottom or the
window.
</para>
<para>The next two lower panes are an inspector for the
arguments and local variables, or <firstterm>temporaries</firstterm>, of the context frame.
</para>
<para>The larger area displays the code being processed and
hilights the next message to be sent.
</para>
<para>The stack of (framed) execution contexts gives a history of the
computation so far.  You can select any frame, view instance values
in the receiver, view the arguments and method variables at that
point.
</para>
<para>The two rows of buttons above the code pane give additional views
and control of how the execution processing is to proceed.
</para>
<para>Notable buttons in the second row:
</para>
<itemizedlist>
<listitem><para><emphasis role="bold">Proceed.</emphasis> Continue execution
</para> 
</listitem><listitem><para><emphasis role="bold">Restart.</emphasis> Start execution of the current method from
 the beginning.
 

 You can edit a method shown in the code pane, save it, and restart it!
</para>
</listitem><listitem><para><emphasis role="bold">Into.</emphasis> Step Into the code of the next message send.
</para>
</listitem><listitem><para><emphasis role="bold">Over.</emphasis> Step Over the message send.
 

 Do the next message send, but stay in the current method.
</para>
</listitem><listitem><para><emphasis role="bold">Through.</emphasis> Step into a block of code by going through &#8211;
 skipping &#8211; the intermediate message sends.
 

 Useful when you need to examine what is going on in a block of code,
 argument of the stepped message, for example the <literal>#do:</literal>
 message.
</para>
</listitem></itemizedlist>
<para>Now, we are going to play a bit.  If you get out of synch with the
instructions here, just close the debugger and start with Debug-It again.
</para>
<anchor id="ch10_002d04_002dStepInto"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-04-StepInto.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>As you <firstterm>single step</firstterm> the debugger, hilighting of the <emphasis>next</emphasis> message
send changes.  Press <userinput>Over</userinput> three times.  You should see the line
starting with <emphasis>childrenDo:</emphasis> hilighted.  Now press <userinput>Into</userinput>.
</para>
<anchor id="ch10_002d05_002dFocusObjAndArgs"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-05-FocusObjAndArgs.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>The stack area shows the focus object is a <literal>DirectoryEntry</literal>.
Inspect its instance values by selecting lines in the lower
left pane.
</para>
<para>The stack area shows the focus method is <literal>DirectoryEntry&gt;&gt;childrenDo:</literal>.
This is the method displayed in the code pane.
</para>
<para>The argument to <literal>childrenDo:</literal> is <literal>aBlock</literal>.  There are no
method variables to display.
</para>
<para>If you press <userinput>Over</userinput> again and <userinput>Into</userinput>, you should see the
context where <literal>do:</literal> is being processed.
</para>
<para>This might be a good place to investigate the inspectors, look up and down the
stack, and play around a bit.  By this time you should feel confident
that you understand the basics of what is displayed here.
</para>
<para>You are in control!
</para>
<para>Let&#8217;s look briefly at another way of doing this.
</para>
</sect1>
<sect1 label="" id="Halt_0021">
<title>Halt!</title>

<indexterm role="cp"><primary>breakpoint</primary><see>Tools, debugger</see></indexterm>
<indexterm role="cp"><primary>tools</primary><secondary>debugger</secondary><tertiary>breakpoint</tertiary></indexterm><indexterm role="cp"><primary><literal>halt</literal></primary></indexterm>

<para>A <firstterm>breakpoint</firstterm> is a place in code where one wishes to pause code
processing and look around.  One does not always want to single step
to find a problem, especially one that occurs only once in a while.  A
breakpoint set where the problem occurs is quite handy.
</para>
<para>In Smalltalk, one uses the <literal>halt</literal> method to set a breakpoint.
The message <literal>#halt</literal> is sent to an object which is the
debugger&#8217;s initial focus.
</para>
<para>Please change the Workspace code to add a <literal>#halt</literal> as follows.
</para>
<anchor id="breakpoint"/>
<screen>| fileNames |
fileNames := OrderedCollection new.
(DirectoryEntry smalltalkImageDirectory) 
    childrenDo: [ :f | fileNames add: f name. fileNames halt ].
fileNames asArray.
</screen>

<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
The object which receives the <literal>#halt</literal> message
becomes the focus object of the debugger.
</para>
<para>Let&#8217;s again <userinput>Ctrl-a</userinput> (<emphasis>select <emphasis role="bold">A</emphasis>ll</emphasis>) and <userinput>Ctrl-p</userinput>
(<emphasis>select <emphasis role="bold">P</emphasis>rint-it</emphasis>).
</para>
<anchor id="ch10_002d06_002dHalt"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-06-Halt.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Press <userinput>Over</userinput> twice to step over the breakpoint.
</para>
<anchor id="ch10_002d07_002dOver"/>
<inlinemediaobject><imageobject><imagedata fileref="ch10-07-Over.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Well, this looks familiar.  I know what to do here.
</para>
<para>Note that the <literal>halt</literal> is inside a loop.  While in the loop, each
time you press <userinput>Proceed</userinput> you will <emphasis>hit</emphasis> the breakpoint in the
next iteration of the loop.
</para>
<para>In many programming envionments, to make a change you need to kill a
process, recompile code, then start a new process.
</para>
<para>Smalltalk is a <emphasis>live</emphasis> environment.  You can break, then change or
write code (the <userinput>Create</userinput> button at mid-right), restart the stack
frame, and continue processing &#8211; all without unwinding the context
stack!
</para>
<para>As an analogy, in many programming languages, it is like you stub your
toe and visit a physician.  The doctor says &#8220;Yes. you stubbed your
toe.&#8221; then takes out a gun, shoots you, and sends your mother a note
&#8220;have another child.&#8221;  Smalltalk is much more friendly!
</para>
<para>Note that with great power comes great
responsibility<footnote><para><ulink url="https://quoteinvestigator.com/2015/07/23/great-power/">https://quoteinvestigator.com/2015/07/23/great-power/</ulink></para></footnote>.
In an open system, you can place a breakpoint anywhere, including
places which can break the user interface!  For example, it could be a
bad thing to put a breakpoint in the code for the Debugger!
</para>
<!-- -->
</sect1>
</chapter>
<chapter label="" id="Sharing-Cuis">
<title>Sharing Cuis</title>

<blockquote><attribution>Kent Beck, <ulink url="https://1lib.us/book/2083614/6104eb">&#8220;Smalltalk Best Practice Patterns&#8221;(1997)</ulink></attribution>
<para>Programming is hardly ever a solitary communion between one man and
one machine. Caring about other people is a conscious decision, and
one that requires practice.
</para></blockquote>
<blockquote><attribution>Dave Thomas, <ulink url="http://rmod-files.lille.inria.fr/FreeBooks/WithStyle/SmalltalkWithStyle.pdf">&#8220;Smalltalk With Style&#8221;(1996)</ulink></attribution>
<para>Programming remains an intensively collaborative process between
groups of program readers and writers.
</para></blockquote>
<blockquote><attribution>Oscar Nierstrasz, <ulink url="http://scg.unibe.ch/download/st/07BestPractice.pdf">&#8220;Best Practice Patterns - talk slides&#8221;(2009)</ulink></attribution>
<para>Let your code talk — Names matter. Let the code say what it means.
Introduce a method for everything that needs to be done. Donʼt be
afraid to delegate, even to yourself.
</para></blockquote>





<para>This book is an invitation.
</para>
<para>We hope that you are using Cuis-Smalltalk to discover pathways of interest
and are enjoying the journey. If so, at some point you have done
something wonderful and probably want to share it.
</para>
<para>Sharing requires communicating intent.
</para>
<para>Good writing takes practice. Good writers read.
</para>


<sect1 label="" id="Golden-Rules-of-the-Smalltalk-Guild">
<title>Golden Rules of the Smalltalk Guild</title>

<para>Basic questions, that appear to be the golden rules of the Smalltalk
intergalactic guild<footnote><para><emphasis>Don&#8217;t panic</emphasis>, at this stage of the
book, the authors are still looking to find all the questions that
really matter.</para></footnote>:
</para>
<itemizedlist><listitem><para>Are methods short and understandable?
 </para></listitem><listitem><para>Does a line of code read like a sentence?
 </para></listitem><listitem><para>Do method names say what they do, rather than how they do it?
 </para></listitem><listitem><para>Do class and instance variable names indicate their role(s)?
 </para></listitem><listitem><para>Are there useful class comments?
 </para></listitem><listitem><para>Can we make something simpler?  Leave something out?
</para></listitem></itemizedlist>
<para>Now, we have been doing Smalltalk code for a while
and so tend to follow good practices, but let&#8217;s
take another look at our code and see
if we can make it easier for a reader to understand.
</para>

</sect1>
<sect1 label="" id="Refactoring-to-Improve-Understanding">
<title>Refactoring to Improve Understanding</title>
<indexterm role="cp"><primary>refactoring</primary></indexterm>
<para>Browsing through the code, I note a method named <literal>#left</literal>, which seems perhaps
like an abbreviation.  I can ask for <emphasis>senders</emphasis> to see how <literal>#left</literal> is used
in code elsewhere.
</para>
<anchor id="ch11_002d01_002dSendersOfLeft"/>
<inlinemediaobject><imageobject><imagedata fileref="ch11-01-SendersOfLeft.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>I notice that most uses of <literal>#left</literal> are to indicate a position,
not take an action.  How can I fix that?
</para>
<para>Because people frequently want to change things for the better,
there are a number of handy tools to help do this.
</para>
<para>Now I could look at our uses of <literal>#left</literal> in Spacewars!, but the Cuis IDE
already knows how to do this!
</para>
<para>If I right-click on the Method Pane in the Browser, I get a context menu
with selections to help me out. Here I choose <emphasis role="bold">Rename</emphasis>.
</para>
<anchor id="ch11_002d02_002dRenameLeft"/>
<inlinemediaobject><imageobject><imagedata fileref="ch11-02-RenameLeft.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Now the tools that help us refactor code are quite powerful, so
restraint is called for.  I don&#8217;t want to change all uses of
<literal>#left</literal> in the Cuis-Smalltalk system, just in the <command>Spacewar!</command>
category.
</para>
<anchor id="ch11_002d03_002dRenameInCategory"/>
<inlinemediaobject><imageobject><imagedata fileref="ch11-03-RenameInCategory.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Of course, when making changes one wants to see that the result is
what one expects.
</para>
<anchor id="ch11_002d04_002dturnLeft"/>
<inlinemediaobject><imageobject><imagedata fileref="ch11-04-turnLeft.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>As I am not perfect, I tend to save the Cuis-Smalltalk image before I make
large changes using powerful tools.  If something happens that
I did not want, I can then quit the image without saving and
restart the saved image which remembers the world before I made the change.
</para>
<anchor id="exeRenameMethod"/>
<para><emphasis>Rename <literal>#right</literal> to
<literal>#turnRight</literal>.</emphasis>
</para>


<para>Looking around some more in the Browser, I notice the method
<literal>SpaceShip&gt;&gt;nose</literal>.
</para>
<para>Where did I use this?  Ah, senders..
</para>
<anchor id="ch11_002d05_002dnoseSenders"/>
<inlinemediaobject><imageobject><imagedata fileref="ch11-05-noseSenders.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>Hmmm, perhaps something more specific.  How about <literal>#noseDirection</literal>?
How does that look?
</para>
<anchor id="ch11_002d06_002dnoseDirection"/>
<inlinemediaobject><imageobject><imagedata fileref="ch11-06-noseDirection.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
World menu &#8594; <command>Help</command> is your friend.
The <command>Terse Guide to Cuise</command> gives access to a large sample
of code usages. The <command>Class Comment Browser</command> is an alternate
way to find interesting class information.  There are also more notes
on code maganement and how we use GitHub.
</para>
<para>&#160;<inlinemediaobject><imageobject><imagedata fileref="note.png" format="PNG"></imagedata></imageobject></inlinemediaobject>
We want to share with you! Please visit packages at the main Cuis-Smalltalk
repository at <ulink url="https://github.com/Cuis-Smalltalk">https://github.com/Cuis-Smalltalk</ulink>, search GitHub
for repositories with names starting with <emphasis role="bold">Cuis-Smalltalk-</emphasis>,
and perhaps take a look at tutorials and information
in <ulink url="https://github.com/Cuis-Smalltalk/Learning-Cuis">https://github.com/Cuis-Smalltalk/Learning-Cuis</ulink>.
</para>
<para>There is much more to explore, but this book is an <emphasis>introduction</emphasis>
and we have to stop writing text somewhere.  This is a good place.
We want to get back to writing code!
And we look forward to seeing <emphasis>your</emphasis> projects!
</para>
<para>Welcome to Cuis-Smalltalk!
<!--================================================================ -->
<!--: Part Four -->
<!-- @part Part Four @*Appendices -->
<!-- Copyrighted document used in the book -->
<!-- Documents avec copyright -->
</para></sect1>
</chapter>
<appendix label="" id="Documents-Copyright">
<title>Documents Copyright</title>

<para>Part of the syntax chapter from the <emphasis>Squeak by Example</emphasis> book was
borrowed and edited in the present book.


Copyright &#169; 2007, 2008, 2009 by Andrew P. Black,
St&#233;phane Ducasse, Oscar Nierstrasz and Damien Pollet.
</para>
<bridgehead renderas="sect2"><link linkend="ch01_002dSpacewarPDP">ch01-SpacewarPDP</link></bridgehead>
<para>Spacewar running on PDP-1, Joi Ito, 12 May 2007, resized,


https://www.flickr.com/photos/35034362831@N01/494431001


https://creativecommons.org/licenses/by/2.0/deed.en
</para>
<bridgehead renderas="sect2"><link linkend="goldberg1">Adele Goldberg quote</link></bridgehead>
<para>Oral History of Adele Goldberg, Computer History Museum, 10 May 2010
</para>
<bridgehead renderas="sect2">Cuis-Smalltalk mascot</bridgehead>
<informalfigure><mediaobject><imageobject><imagedata fileref="CuisLogo.png" format="PNG"></imagedata></imageobject></mediaobject></informalfigure>


<para>The southern mountain cavy (Microcavia australis) is a species of
South American rodent in the family Caviidae.


Copyright &#169; Euan Mee
<!-- Summary of syntax -->
</para></appendix>
<appendix label="" id="Summary-of-Syntax">
<title>Summary of Syntax</title>

<informaltable><tgroup cols="3"><colspec colwidth="49*"></colspec><colspec colwidth="1*"></colspec><colspec colwidth="50*"></colspec><thead><row><entry><para>Syntax </para></entry><entry></entry><entry><para>What it represents
   </para></entry></row></thead><tbody><row><entry><para><literal>startPoint</literal>                 </para></entry><entry></entry><entry><para>a variable name
   </para></entry></row><row><entry><para><literal>Transcript</literal>                 </para></entry><entry></entry><entry><para>a global variable name
   </para></entry></row><row><entry><para><literal>self</literal>                       </para></entry><entry></entry><entry><para>pseudo-variable
   </para></entry></row><row><entry></entry><entry></entry><entry></entry></row><row><entry><para><literal>1</literal>                          </para></entry><entry></entry><entry><para>decimal integer
   </para></entry></row><row><entry><para><literal>2r101</literal>                      </para></entry><entry></entry><entry><para>binary integer (radix 2)
   </para></entry></row><row><entry><para><literal>16r1a</literal>                      </para></entry><entry></entry><entry><para>hexadecimal integer (radix 16)
   </para></entry></row><row><entry><para><literal>1.5</literal>                        </para></entry><entry></entry><entry><para>floating point number
   </para></entry></row><row><entry><para><literal>2.4e7</literal>                      </para></entry><entry></entry><entry><para>exponential notation
   </para></entry></row><row><entry><para><literal>$a</literal>                         </para></entry><entry></entry><entry><para>the character ‘a’
   </para></entry></row><row><entry><para><literal>'Hello'</literal>                    </para></entry><entry></entry><entry><para>the string “Hello”
   </para></entry></row><row><entry><para><literal>#Hello</literal>                     </para></entry><entry></entry><entry><para>the symbol #Hello
   </para></entry></row><row><entry><para><literal>#(1 2 3)</literal>                   </para></entry><entry></entry><entry><para>a literal array
   </para></entry></row><row><entry><para><literal>{1. 2. 1 + 2}</literal>            </para></entry><entry></entry><entry><para>a dynamic array
   </para></entry></row><row><entry></entry><entry></entry><entry></entry></row><row><entry><para><literal>&quot;a comment&quot;</literal>                </para></entry><entry></entry><entry><para>a comment
   </para></entry></row><row><entry></entry><entry></entry></row><row><entry><para><literal>|xy|</literal>                       </para></entry><entry></entry><entry><para>declaration of variables x and y
   </para></entry></row><row><entry><para><literal>x &#x2190; 1</literal>, <literal>x := 1</literal>              </para></entry><entry></entry><entry><para>assign 1 to x
   </para></entry></row><row><entry><para><literal>[x + y]</literal>                    </para></entry><entry></entry><entry><para>a block that evaluates to x+y
   </para></entry></row><row><entry><para><literal>&lt;primitive: 1&gt;</literal>             </para></entry><entry></entry><entry><para>virtual machine primitive or annotation
   </para></entry></row><row><entry></entry><entry></entry><entry></entry></row><row><entry><para><literal>3 factorial</literal>                </para></entry><entry></entry><entry><para>a unary message
   </para></entry></row><row><entry><para><literal>3+4</literal>                        </para></entry><entry></entry><entry><para>a binary message
   </para></entry></row><row><entry><para><literal>2 raisedTo: 6 modulo: 10</literal>   </para></entry><entry></entry><entry><para>a keyword message
   </para></entry></row><row><entry></entry><entry></entry><entry></entry></row><row><entry><para><literal>&#x2191; true</literal>, <literal>^ true</literal>                     </para></entry><entry></entry><entry><para>return the value true
   </para></entry></row><row><entry><para><literal>Transcript show: 'hello'. Transcript cr</literal> </para></entry><entry></entry><entry><para>expression separator (.)
   </para></entry></row><row><entry><para><literal>Transcript show: 'hello'; cr</literal> </para></entry><entry></entry><entry><para>message cascade (;)
   </para></entry></row><row><entry><para><literal>BoxedMorph new :: color: Color blue; openInWorld</literal>      </para></entry><entry></entry><entry><para>message cascade (::)
   </para></entry></row><row><entry><para><literal>`{ 3@4 . 56 . 'click me'}`</literal>   </para></entry><entry></entry><entry><para>the compound literal <literal>#(3@4 56 'click me')</literal>
</para></entry></row></tbody></tgroup></informaltable>

<variablelist><indexterm role="cp"><primary>variable</primary><secondary>local</secondary></indexterm><varlistentry><term><emphasis role="bold">Local variables.</emphasis>
</term><listitem>
<para><literal>startPoint</literal> is a variable name, or identifier. By
 convention, identifiers are composed of words in “camelCase” (i.e.,
 each word except the first starting with an upper case letter). The
 first letter of an instance variable, method or block argument, or
 temporary variable must be lower case. This indicates to the reader
 that the variable has a private scope.
</para>
<indexterm role="cp"><primary>variable</primary><secondary>shared</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Shared variables</emphasis>
</term><listitem>
<para>Identifiers that start with upper case letters are global variables,
 class variables, pool dictionaries or class
 names. <literal>Smalltalk</literal> is a global variable, an instance of the
 class <literal>SystemDictionary</literal>.
</para>
<indexterm role="cp"><primary>receiver</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">The receiver.</emphasis>
</term><listitem>
<para><literal>self</literal> is a keyword that refers to the object inside which
 the current method is executing. We call it “the receiver” because
 this object will normally have received the message that caused the
 method to execute. self is called a “pseudo-variable” since we cannot
 assign to it.
</para>
<indexterm role="cp"><primary>integer (see number)</primary></indexterm>
<indexterm role="cp"><primary>number</primary><secondary>integer</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Integers.</emphasis>
</term><listitem>
<para>In addition to ordinary decimal integers like <literal>42</literal>, Cuis-Smalltalk
 also provides a radix notation. <literal>2r101</literal> is 101 in radix 2
 (i.e., binary), which is equal to decimal 5.
</para>
<indexterm role="cp"><primary>float (see number)</primary></indexterm>
<indexterm role="cp"><primary>number</primary><secondary>float</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Float point numbers.</emphasis>
</term><listitem>
<para>Floating point numbers can be specified with their base-ten exponent:
 <literal>2.4e7</literal> is 2.4 × 10<superscript>7</superscript>.
</para>
<indexterm role="cp"><primary>character</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Characters.</emphasis>
</term><listitem>
<para>A dollar sign introduces a literal character: <literal>$a</literal> is the
 literal for ‘a’. Instances of non-printing characters can be obtained
 by sending appropriately named messages to the <literal>Character</literal>
 class, such as <literal>Character space</literal> and <literal>Character
 tab</literal>.
</para>
<indexterm role="cp"><primary>string</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Strings.</emphasis>
</term><listitem>
<para>Single quotes are used to define a literal string. If you want a
 string with a quote inside, just double the quote, as in
 <literal>'G''day'</literal>.
</para>
<indexterm role="cp"><primary>symbol</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Symbols.</emphasis>
</term><listitem>
<para>Symbols are like Strings, in that they contain a sequence of
 characters.  However, unlike a string, a literal symbol is guaranteed
 to be globally unique. There is only one Symbol object
 <literal>#Hello</literal> but there may be multiple String objects with the
 value <literal>'Hello'</literal>.
</para>
<indexterm role="cp"><primary>array</primary><secondary>static</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Static arrays.</emphasis>
</term><listitem>
<para>Static arrays or Compile-time arrays are defined by <literal>#( )</literal>,
 surrounding space-separated literals. Everything within the
 parentheses must be a compile-time constant. For example,
 <literal>#(27 #(true false) abc)</literal> is a literal array of three
 elements: the integer <literal>27</literal>, the compile-time array containing the two
 booleans, and the symbol <literal>#abc</literal>.
</para>
<indexterm role="cp"><primary>array</primary><secondary>dynamic</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Dynamic arrays.</emphasis>
</term><listitem>
<para>Dynamic arrays or Run-time arrays. Curly braces { } define a
 (dynamic) array at run-time.  Elements are expressions separated by
 periods. So <literal>{ 1. 2. 1+2 }</literal> defines an array with
 elements <literal>1</literal>, <literal>2</literal>, and the result of evaluating
 <literal>1+2</literal>. (The curly-brace notation is peculiar to the Squeak
 family dialect of Smalltalk! In other Smalltalks you must build up
 dynamic arrays explicitly.)
</para>
<indexterm role="cp"><primary>comment</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Comments.</emphasis>
</term><listitem>
<para>Comments are enclosed in double quotes. <literal>&quot;hello&quot;</literal> is a
 comment, not a string, and is ignored by the Cuis-Smalltalk
 compiler. Comments may span multiple lines.
</para>
<indexterm role="cp"><primary>variable</primary><secondary>local</secondary><tertiary>declaration</tertiary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Local variable declarations.</emphasis>
</term><listitem>
<para>Vertical bars | | enclose the declaration of one or more local
 variables in a method (and also in a block).
</para>
<indexterm role="cp"><primary>variable</primary><secondary>assignment</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Assignment.</emphasis>
</term><listitem>
<para><literal>:=</literal> assigns an object to a variable. In the printed
 version of the book we wrote &#x2190; instead. Since this character
 is not present in the keyboard, you key in with the underscore
 character key. So, <literal>x := 1</literal> is the same as <literal>x
 &#x2190; 1</literal> or <literal>x _ 1</literal>.
</para>
<indexterm role="cp"><primary>block</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Blocks.</emphasis>
</term><listitem>
<para>Square brackets <literal>[ ]</literal> define a block, also known as a block
 closure or a lexical closure, which is a first-class object
 representing a function. As we shall see, blocks may take arguments
 and can have local variables.
</para>
<indexterm role="cp"><primary>primitive</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Primitives.</emphasis>
</term><listitem>
<para><literal>&lt;primitive: ...&gt;</literal> denotes an invocation of a virtual
 machine primitive. (<literal>&lt;primitive: 1&gt;</literal> is the VM primitive
 for <literal>SmallInteger&gt;&gt;+</literal>.) Any code following the primitive is
 executed only if the primitive fails. The same syntax is also used
 for method annotations.
</para>
<indexterm role="cp"><primary>message</primary><secondary>unary</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Unary messages.</emphasis>
</term><listitem>
<para>Unary messages consist of a single word (like <literal>#factorial</literal>)
 sent to a receiver (like 3).
</para>
<indexterm role="cp"><primary>message</primary><secondary>binary</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Binary messages.</emphasis>
</term><listitem>
<para>Binary messages are operators (like <literal>+</literal>) sent to a receiver
 and taking a single argument. In <literal>3 + 4</literal>, the receiver is
 <literal>3</literal> and the argument is <literal>4</literal>.
</para>
<indexterm role="cp"><primary>message</primary><secondary>keyword</secondary></indexterm></listitem></varlistentry><varlistentry><term><emphasis role="bold">Keyword messages.</emphasis>
</term><listitem>
<para>Keyword messages consist of multiple keywords (like
 <literal>#raisedTo:modulo:</literal>), each ending with a colon and taking a single
 argument. In the expression <literal>2 raisedTo: 6 modulo: 10</literal>, the
 message selector <literal>raisedTo:modulo:</literal> takes the two arguments
 6 and 10, one following each colon. We send the message to the
 receiver 2.
</para>
<indexterm role="cp"><primary>returned value</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Method return.</emphasis>
</term><listitem>
<para>&#x2191; is used to return a value from a method. (You must type ^ to obtain
 the &#x2191; character.)
</para>
<indexterm role="cp"><primary>sequence</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Sequences of statements.</emphasis>
</term><listitem>
<para>A period or full-stop (.) is the statement separator.  Putting a
 period between two expressions turns them into independent
 statements.
</para>
<indexterm role="cp"><primary>cascade of messages</primary></indexterm>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Cascades.</emphasis>
</term><listitem>
<para>There are two kinds of message cascades.
</para>
<para>Semicolons can be used to send a cascade of messages to the original 
 receiver. In <literal>Transcript show: 'hello'; cr</literal> we first send
 the keyword message <literal>#show: 'hello'</literal> to the receiver
 <literal>Transcript</literal>, and then we send the unary message <literal>#cr</literal> to
 the same receiver.
</para>
<para>It is sometimes useful to send messages to the <emphasis>result</emphasis> of a message send.
 In <literal> BoxedMorph new :: color: Color blue; openInWorld. </literal> we send
 suceeding messages to the new BoxedMorph instance, not the BoxedMorph
 class.
</para>
</listitem></varlistentry><varlistentry><term><emphasis role="bold">Compound Literal</emphasis>
</term><listitem>
<para>Backticks (<literal>`</literal>) can be used to create compound literals at compile time.
 All components of a compound literal must be known when the code is compiled.
</para>
</listitem></varlistentry></variablelist><!-- List of exercises -->
</appendix>
<appendix label="" id="The-Exercises">
<title>The Exercises</title>
<!-- Solutions of exercises -->
<!-- Solutions to the exercises -->
</appendix>
<appendix label="" id="Solutions-to-the-Exercises">
<title>Solutions to the Exercises</title>




<!-- Preface -->

<sect1 label="" id="Preface-_0028Solutions_0029">
<title>Preface</title>
<bridgehead renderas="sect2"><link linkend="exerciseExample">exerciseExample</link></bridgehead>
<para>In the seventies, four versions were developed: Smalltalk-71,
Smalltalk-72, Smalltalk-76 and Smalltalk-80.
</para>
<!-- Chapter 1 -->
</sect1>
<sect1 label="" id="Smallltalk-Philosophy-_0028Solutions_0029">
<title>Smallltalk Philosophy</title>
<bridgehead renderas="sect2"><link linkend="exePlacement">exePlacement</link></bridgehead>
<anchor id="E_002dimg1"/>
<inlinemediaobject><imageobject><imagedata fileref="E-img1.png" format="PNG"></imagedata></imageobject></inlinemediaobject>


<bridgehead renderas="sect2"><link linkend="concatenateUppercase">concatenateUppercase</link></bridgehead>
<screen>Transcript show: 'Hello ', 'my beloved ' asUppercase, 'friend'
</screen>

<bridgehead renderas="sect2"><link linkend="inverseSum">inverseSum</link></bridgehead>
<screen>1 + (1/2) + (1/3) + (1/4)
&#8658; 25/12 
</screen>
<bridgehead renderas="sect2"><link linkend="capWordNumber">capWordNumber</link></bridgehead>
<para>Several messages can be sent one after the other:
</para><screen>Transcript show: 2020 printStringWords capitalized 
</screen>
<!-- Chapter 2 -->
</sect1>
<sect1 label="" id="The-Message-Way-of-Life-_0028Solutions_0029">
<title>The Message Way of Life</title>
<bridgehead renderas="sect2"><link linkend="helloBelle">helloBelle</link></bridgehead>
<screen>'Hello' 
   at: 1 put: $B;
   at: 2 put: $e;
   at: 3 put: $l;
   at: 4 put: $l;
   at: 5 put: $e;
   yourself
</screen>
<bridgehead renderas="sect2"><link linkend="squaredSum">squaredSum</link></bridgehead>
<screen>1 + (1/2) squared + (1/3) squared + (1/4) squared
&#8658;  205 / 144
</screen>
<bridgehead renderas="sect2"><link linkend="stringArith">stringArith</link></bridgehead>
<para>From a System Browser, do from the left panel to the
right ...<option>Kernel-Text</option> &#8594; <literal>CharacterSequence</literal>
&#8594; <literal>arithmetic</literal>... the count of methods in the last
right panel is 6: <literal>*</literal>, <literal>+</literal>, <literal>-</literal>, <literal>/</literal>,
<literal>//</literal> and <literal>\\</literal>.
</para>
<para>An alternative is to search for a class with a keyboard shortcut:
<userinput>Ctrl-Space</userinput> from the Cuis-Smalltalk environment or <userinput>Ctrl-f</userinput> from the
class category of the <firstterm>Browser</firstterm>.
</para>
<!-- Chapter 3 -->
</sect1>
<sect1 label="" id="Class-_002d_002d-model-of-Communicating-Entities-_0028Solutions_0029">
<title>Class, model of Communicating Entities</title>
<bridgehead renderas="sect2"><link linkend="floatInfo">floatInfo</link></bridgehead>
<para>When the <literal>Float</literal> is selected, the wide text pane prints: &#8220;class
definition for Float &#176; 92 instance methods &#176;
34 class methods &#176; 1280 total lines of code&#8221;
</para>
<bridgehead renderas="sect2"><link linkend="cosTable">cosTable</link></bridgehead>
<screen>0 to: Float twoPi by: 1/10 do: [:i |
   Transcript show: i cos; cr]
</screen>
<bridgehead renderas="sect2"><link linkend="multiplyBy1024">multiplyBy1024</link></bridgehead>
<para>1024 is not a random number. It is 2<superscript>10</superscript> then written in base 2 :
10000000000, it is also <literal>1 &lt;&lt; 10</literal>:
</para>
<screen>2^10 &#8658; 1024
1024 printStringBase: 2 &#8658; '10000000000'
1 &lt;&lt; 10 &#8658; 1024 
</screen>
<para>Therefore, to multiply an integer by 1024, we shift left of 10 its digits:
</para>
<screen>360 &lt;&lt; 10 &#8658; 368640 
360 * 1024 &#8658; 368640 
</screen>
<bridgehead renderas="sect2"><link linkend="exeFloatPrecision">exeFloatPrecision</link></bridgehead>
<screen>5.2 + 0.9  - 6.1
&#8658; 8.881784197001252e-16

5.2 + 0.7 + 0.11
&#8658; 6.010000000000001

1.2 * 3  - 3.6
&#8658; -4.440892098500626e-16
</screen>
<bridgehead renderas="sect2"><link linkend="exeZeroDivide">exeZeroDivide</link></bridgehead>
<para>The system returns the error <literal>ZeroDivide</literal>, division by zero.
</para>
<bridgehead renderas="sect2"><link linkend="exeFractionPrecision">exeFractionPrecision</link></bridgehead>
<screen>(52/10) + (9/10)  - (61/10)
&#8658; 0

(52/10) + (7/10)  + (11/100)
&#8658; 601/100 soit 6.01

(12/10) * 3  - (36/10)
&#8658; 0
</screen>
<bridgehead renderas="sect2"><link linkend="selectApples">selectApples</link></bridgehead>
<para>There are different options, with slightly different results:
</para><screen>'There are 12 apples' select: [:i |i isLetter].
&#8658; 'Thereareapples' 
</screen>
<para>Not really satisfying. So another option:
</para><screen>'There are 12 apples' select: [:i |i isDigit not].
&#8658; 'There are  apples'
</screen>
<para>Or even a shorter option with the <literal>#reject:</literal> message:
</para><screen>'There are 12 apples' reject: [:i |i isDigit].
&#8658; 'There are  apples' 
</screen>
<bridgehead renderas="sect2"><link linkend="formatString">formatString</link></bridgehead>
<para>In <literal>String</literal>, search for the method category <option>format</option>, there
you find the <literal>format:</literal> method:
</para><screen>'Joe bought {1} apples and {2} oranges' format: #(5 4)
&#8658;  'Joe bought 5 apples and 4 oranges' 
</screen>


<bridgehead renderas="sect2"><link linkend="spacewarVar">spacewarVar</link></bridgehead>
<para>The <literal>SpaceWar</literal>, <literal>CentralStar</literal> and <literal>SpaceShip</literal>
definitions with their added instance variable should look like:
</para><screen>Object subclass: #SpaceWar
   instanceVariableNames: 'centralStar ships torpedoes'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

Object subclass: #CentralStar
   instanceVariableNames: 'mass'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

Object subclass: #SpaceShip
   instanceVariableNames: 'position heading velocity
      fuel torpedoes mass acceleration'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>
<bridgehead renderas="sect2"><link linkend="spaceShipGetters">spaceShipGetters</link></bridgehead>
<screen>SpaceShip&gt;&gt;position
   ^ position

SpaceShip&gt;&gt;velocity
   ^ position

SpaceShip&gt;&gt;mass
   ^ mass
</screen>
<bridgehead renderas="sect2"><link linkend="spaceShipSetters">spaceShipSetters</link></bridgehead>
<screen>SpaceShip&gt;&gt;position: aPoint
   position := aPoint

SpaceShip&gt;&gt;velocity: aPoint
   velocity := aPoint

Torpedo&gt;&gt;heading: aFloat
   heading := aFloat
</screen>
<bridgehead renderas="sect2"><link linkend="shipHeading">shipHeading</link></bridgehead>
<screen>SpaceShip&gt;&gt;left
&quot;Rotate the ship to its left&quot;
   heading := heading + 0.1

SpaceShip&gt;&gt;right
&quot;Rotate the ship to its right&quot;
   heading := heading - 0.1
</screen>
<bridgehead renderas="sect2"><link linkend="shipAcceleration">shipAcceleration</link></bridgehead>
<screen>SpaceShip&gt;&gt;push
&quot;Init an acceleration boost&quot;
   acceleration := 10

SpaceShip&gt;&gt;unpush
&quot;Stop the acceleration boost&quot;
   acceleration := 0
</screen>

<bridgehead renderas="sect2"><link linkend="initCentralStar">initCentralStar</link></bridgehead>
<screen>CentralStar&gt;&gt;initialize
   super initialize.
   mass := 8000.
</screen>

<!-- Chapter 4 -->
</sect1>
<sect1 label="" id="The-Collection-Way-of-Life-_0028Solutions_0029">
<title>The Collection Way of Life</title>
<bridgehead renderas="sect2"><link linkend="cutString">cutString</link></bridgehead>
<para>Open the protocol browser on the class <literal>String</literal>, search for the
method <literal>allButFirst:</literal> implemented in
<literal>SequenceableCollection</literal>. Read its comment in its source code.
</para><screen>'Hello My Friend' allButFirst: 6
&#8658; 'My Friend'
</screen>
<bridgehead renderas="sect2"><link linkend="exeNegativeIntegers">exeNegativeIntegers</link></bridgehead>
<screen>(-80 to: 50) asArray
</screen>
<bridgehead renderas="sect2"><link linkend="holeSet">holeSet</link></bridgehead>
<screen>(1 to: 100) difference: (25 to: 75)
&#8658; #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
22 23 24 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91
92 93 94 95 96 97 98 99 100) 
</screen>
<bridgehead renderas="sect2"><link linkend="oddNumbers">oddNumbers</link></bridgehead>
<screen>(-20 to: 45) select: [:z | z odd]
</screen>
<bridgehead renderas="sect2"><link linkend="qtyPrime200">qtyPrime200</link></bridgehead>
<screen>((101 to: 200) select: [:n | n isPrime]) size
&#8658; 21 
</screen>
<bridgehead renderas="sect2"><link linkend="multiples7">multiples7</link></bridgehead>
<screen>(1 to: 100) select:[:n | n isDivisibleBy: 7]
&#8658; #(7 14 21 28 35 42 49 56 63 70 77 84 91 98) 
</screen>
<bridgehead renderas="sect2"><link linkend="oddNonPrime">oddNonPrime</link></bridgehead>
<para>This solution, based on set operations and multiple use of the
<literal>#select:</literal> message, is mostly compatible with the knowledge
acquired at this point of the book.
</para><screen>| primeNumbers nonPrimeNumbers |
primeNumbers := (1 to: 100) select: [:n | n isPrime].
nonPrimeNumbers := (1 to: 100) difference: primeNumbers.
nonPrimeNumbers select: [:n | n odd]
&#8658; #(1 9 15 21 25 27 33 35 39 45 49 51 55 57 63 65 69 75
77 81 85 87 91 93 95 99) 
</screen>
<para>A shorter solution with logical operations we have not discussed so
far:
</para><screen>(1 to: 100) select:[:n | n isPrime not and: [n odd]]
</screen>
<bridgehead renderas="sect2"><link linkend="decodeCipher">decodeCipher</link></bridgehead>
<screen>'Zpv!bsf!b!cptt' collect: [:c |
   (c asciiValue - 1) asCharacter]
&#8658; 'You are a boss' 
</screen>
<bridgehead renderas="sect2"><link linkend="alphabetCipher">alphabetCipher</link></bridgehead>
<screen>($A to: $Z) collect: [:c |
   (c asciiValue - 65 + 3 \\ 26 + 65) asCharacter]
</screen>
<para>Each character from A to Z is referenced by the <literal>c</literal> block
parameter and converted to its Ascii
value<footnote><para><ulink url="https://en.wikipedia.org/wiki/ASCII">https://en.wikipedia.org/wiki/ASCII</ulink></para></footnote>:
<literal>c asciiValue</literal>. It is shifted of 65, so the A character
counts as 0 and Z as 25 in the alphabet list. To apply the Caesar
cipher, we send the message <literal>+ 3</literal> to the previous result.
</para>
<para>We are almost good, only the characters X, Y, Z will overflow the
alphabet, indeed these characters will be ciphered as 26, 27, 28. To
fix that we send <literal>\\ 26</literal> to the previous result, it is an
old trick of programming: the reminder of the Euclidean division by 26
frames the value between 0 and 25<footnote><para>It generalizes to the
mathematics field of modular arithmetic,
<ulink url="https://www.wikiwand.com/en/Modular_arithmetic">https://www.wikiwand.com/en/Modular_arithmetic</ulink></para></footnote>.
</para>
<para>Finally we shift back of 65 before converting from the Ascii value to
the character.
</para>

<bridgehead renderas="sect2"><link linkend="encodeCaesar">encodeCaesar</link></bridgehead>
<para>In the solution of <link linkend="alphabetCipher">alphabetCipher</link>, we just need to replace the
characters interval with a string:
</para><screen>'SMALLTALKEXPRESSION' collect: [:c |
   (c asciiValue - 65 + 3 \\ 26 + 65) asCharacter]
&#8658; 'VPDOOWDONHASUHVVLRQ' 
</screen>
<bridgehead renderas="sect2"><link linkend="decodeCaesar">decodeCaesar</link></bridgehead>
<screen>  'DOHDMDFWDHVW' collect: [:c |
    (c asciiValue - 65 - 3 \\ 26 + 65) asCharacter]
&#8658; 'ALEAJACTAEST'
</screen>
<bridgehead renderas="sect2"><link linkend="collFirst">collFirst</link></bridgehead>
<para>The appropriate message is <literal>#first:</literal>, defined in the parent
class <literal>SequenceableCollection</literal>. You need to use the protocol or
hierarchy browser on <literal>Array</literal> to discover it:
</para>
<screen>array1 first: 2
&#8658; #(2 'Apple') 
</screen>
<bridgehead renderas="sect2"><link linkend="fillArray">fillArray</link></bridgehead>
<para>You could simply do a thumb:
</para>
<screen>array1 at: 1 put: 'kiwi'.
array1 at: 2 put: 'kiwi'.
array1 at: 3 put: 'kiwi'.
array1 at: 4 put: 'kiwi'.
</screen>
<para>Or even a bit less thumb:
</para>
<screen>1 to: array1 size do: [:index |
   array1 at: index put: 'kiwi']
</screen>
<para>But if you search for carefully the <literal>Array</literal> protocol, you can
just do:
</para>
<screen>array1 atAllPut: 'kiwi'.
</screen>
<bridgehead renderas="sect2"><link linkend="addAfter">addAfter</link></bridgehead>
<para>In the <literal>OrderedCollection</literal> protocol search for the method
<literal>add:after:</literal>.
</para><screen>coll1 := {2 . 'Apple' . 2@1 . 1/3 } asOrderedCollection .		
coll1 add: 'Orange' after: 'Apple'; yourself.
&#8658;  an OrderedCollection(2 'Apple' 'Orange' 2@1 1/3) 
</screen>
<bridgehead renderas="sect2"><link linkend="setLetters">setLetters</link></bridgehead>
<screen>Set  new
   addAll: 'buenos d&#237;as';
   addAll: 'bonjour';
   yourself.
&#8658;  a Set($e $j $o $a $u $b $  $&#237; $r $d $n $s) 
</screen>
<bridgehead renderas="sect2"><link linkend="nameColor">nameColor</link></bridgehead>
<screen>colors keysDo: [:key |
   colors at: key put: key asString capitalized].
colors
&#8658; a Dictionary(#blue-&gt;'Blue' #green-&gt;'Green' #red-&gt;'Red'
#yellow-&gt;'Yellow' ) 
</screen>
<bridgehead renderas="sect2"><link linkend="initActorsCollections">initActorsCollections</link></bridgehead>
<para>When the game starts there is no fired torpedoes, therefore
<literal>torpedoes</literal> is an empty <literal>OrderedCollection</literal>,
instantiated with the <literal>#new</literal> class message.
</para>
<para>In the other hand, the <literal>ships</literal> is an <literal>Array</literal>
containing only two elements, the player ships. We use the
<literal>#with:with</literal> class message to instantiate and populate the array
with two ships created in the argument message.
</para>
<para>For the readability, we split the code in several lines with the
appropriate indentation.
</para>
<screen>   torpedoes := OrderedCollection new.
   ships := Array 
      with: SpaceShip new
      with: SpaceShip new.
</screen>
<bridgehead renderas="sect2"><link linkend="updateShipsTorpedoes">updateShipsTorpedoes</link></bridgehead>
<screen>SpaceWar&gt;&gt;stepAt: msSinceLast
  ships do: [:each | each update: msSinceLast / 1000 ].
  ships do: [:each | each unpush ].
  torpedoes do: [:each | each update: msSinceLast / 1000 ].
</screen>


<!-- Chapter 5 -->
</sect1>
<sect1 label="" id="Control-Flow-Messaging-_0028Solutions_0029">
<title>Control Flow Messaging</title>
<bridgehead renderas="sect2"><link linkend="blockDivisor">blockDivisor</link></bridgehead>
<screen>| divisors |
divisors := [:x | (1 to: x) select: [:d | x \\ d = 0] ].
divisors value: 60.
&#8658; #(1 2 3 4 5 6 10 12 15 20 30 60)
divisors value: 45
&#8658; #(1 3 5 9 15 45)
</screen>
<bridgehead renderas="sect2"><link linkend="implementingAndOr">implementingAndOr</link></bridgehead>
<para>Check the implementations in <literal>Boolean</literal>, <literal>True</literal> and
<literal>False</literal>.
</para>
<bridgehead renderas="sect2"><link linkend="categorizeTeleport">categorizeTeleport</link></bridgehead>
<para>Once the method is edited and saved, in the <command>Method</command> pane select
its name <command>teleport:</command> then do ...right click
&#8594; <command>more...</command> &#8594; <command>change category...</command> &#8594;
<command>events</command>...
</para>
<bridgehead renderas="sect2"><link linkend="categorizeControls">categorizeControls</link></bridgehead>
<para>In the <command>Method</command> pane, select one uncategorized control method,
then do ...right click &#8594; <command>more...</command>
&#8594; <command>change category</command> &#8594; <command>new...</command> key-in
<command>control</command>.
</para>
<para>To categorized the remaining uncategorized control methods, repeat but
select <command>control</command> at the last step as this category now exists.
</para>
<bridgehead renderas="sect2"><link linkend="shipCollision">shipCollision</link></bridgehead>
<para>We do not need an iterator to detect a collision between two
ships. However we use an iterator to take action on each ship when a
collision is detected.
</para><screen>SpaceWar&gt;&gt;collisionsShips
| positionA position B |
   positionA := ships first morphPosition.
   positionB := ships second  morphPosition.
   (positionA dist: positionB) &lt; 25 ifTrue: [
      ships do: [:each |
         each flashWith: Color red.
         self teleport: each]
   ]
</screen>
<para>Local variables only used to ease the code source formatting in
printed book.
</para>
<bridgehead renderas="sect2"><link linkend="torpedoSunCollision">torpedoSunCollision</link></bridgehead>
<para>You just need to pick the appropriate code snippets from the
referenced exercise and examples.
</para><screen>SpaceWar&gt;&gt;collisionsTorpedoesStar
| position |
   position := centralStar morphPosition.
   torpedoes do: [:each | 
      (each morphPosition dist: position) &lt; 8 ifTrue: [
         each flashWith: Color orange.
         self destroyTorpedo: each]]
</screen>

<!-- Chapter 6 -->
</sect1>
<sect1 label="" id="Visual-with-Morph-_0028Solutions_0029">
<title>Visual with Morph</title>

<bridgehead renderas="sect2"><link linkend="allActorsMorph">allActorsMorph</link></bridgehead>
<para>Just replace all <literal>Object</literal> occurrences with <literal>PlacedMorph</literal>:
</para>
<screen>PlacedMorph subclass: #SpaceWar
   instanceVariableNames: 'centralStar ships torpedoes'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

PlacedMorph subclass: #CentralStar
   instanceVariableNames: 'mass'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

PlacedMorph subclass: #SpaceShip
   instanceVariableNames: 'name position heading velocity
      fuel torpedoes mass acceleration'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>

<bridgehead renderas="sect2"><link linkend="refactoryShipTorpedo">refactoryShipTorpedo</link></bridgehead>

<screen>Mobile subclass: #SpaceShip
   instanceVariableNames: 'name fuel torpedoes'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

Mobile subclass: #Torpedo
   instanceVariableNames: 'lifeSpan'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
</screen>

<!-- Chapter 7 -->
</sect1>
<sect1 label="" id="The-Fundamentals-of-Morph-_0028Solutions_0029">
<title>The Fundamentals of Morph</title>

<bridgehead renderas="sect2"><link linkend="exeCrossMorph">exeCrossMorph</link></bridgehead>
<para>The <literal>drawOn:</literal> method is modified to draw two distinct,
unconnected lines:
</para>
<screen>LineExampleMorph&gt;&gt;drawOn: aCanvas
   aCanvas strokeWidth: 20 color: Color green do: [
      aCanvas
         moveTo: 0 @ 0;
         lineTo: 200 @ 200;
         moveTo: 200 @ 0;
         lineTo: 0 @ 200 ]
</screen>
<para>Learn how the <literal>#moveTo:</literal> message moves the pencil to a given
position with the pen up, then the <literal>#lineTo:</literal> asks the pencil to
draw from that previous position to this new position.
</para>
<bridgehead renderas="sect2"><link linkend="exeRectMorph">exeRectMorph</link></bridgehead>
<para>We create a <literal>RectangleExampleMorph</literal>, subclass of
<literal>PlacedMorph</literal>:
</para><screen>PlacedMorph subclass: #RectangleExampleMorph
   instanceVariableNames: 'fillColor'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'
</screen><para>Then its necessary methods to initialize and to draw the morph:
</para><screen>initialize
   super initialize .
   fillColor := Color random alpha: 0.5

drawOn: aCanvas
   aCanvas
      strokeWidth: 1
      color: Color blue
      fillColor: fillColor
      do: [
         aCanvas moveTo: 0 @ 0;
            lineTo: 200 @ 0;
            lineTo: 200 @ 100;
            lineTo: 0 @ 100;
            lineTo: 0 @ 0]
</screen>
<anchor id="E_002dexeRectMorph"/>
<inlinemediaobject><imageobject><imagedata fileref="E-exeRectMorph.png" format="PNG"></imagedata></imageobject></inlinemediaobject>



<bridgehead renderas="sect2"><link linkend="exeFancyClock">exeFancyClock</link></bridgehead>
<para>Among the clock parts (submorphs) we only need to modify the drawing
of the <literal>ClockSecondHandMorph</literal> class. The disc is surrounded with a
thin red line and filled in yellow.
</para><screen>ClockSecondHandMorph&gt;&gt;drawOn: aCanvas
   aCanvas strokeWidth: 1.5 color: Color red do: [
      aCanvas
         moveTo: 0 @ 0;
         lineTo: 85 @ 0 ].
   aCanvas ellipseCenter: 0 @ -70 radius: 3 @ 3 
      borderWidth: 1 
      borderColor: Color red fillColor: Color yellow
</screen>
<bridgehead renderas="sect2"><link linkend="exeGasExhaust">exeGasExhaust</link></bridgehead>
<para>On top of the <literal>drawOn:</literal> method, we also want the acceleration
variable to take a range of values between 0 and 50.
</para>
<screen>SpaceShip&gt;&gt;push
&quot;Init an accelaration boost&quot;
   fuel isZero ifTrue: [^ self].
   fuel := fuel - 1.
   acceleration := (acceleration + 10) min: 50
</screen>
<screen>SpaceShip&gt;&gt;unpush
&quot;Stop the accelaration boost&quot;
   acceleration := acceleration - 5 max: 0
</screen>
<screen>drawOn: canvas
../..
&quot;Draw gas exhaust&quot;
   acceleration ifNotZero: [
      canvas
         line: c
         to: 0&#160;acceleration
         width: 1 + acceleration / 8
         color: Color orange].
</screen>

<bridgehead renderas="sect2"><link linkend="exeTorpedoExtent">exeTorpedoExtent</link></bridgehead>
<para>The width of the torpedo is 4 pixels and its height 8 pixels:
</para><screen>Torpedo&gt;&gt;morphExtent
   ^ `4 @ 8`
</screen>
<bridgehead renderas="sect2"><link linkend="exeTorpedoDrawing">exeTorpedoDrawing</link></bridgehead>
<para>The <literal>Torpedo</literal>&#8217;s <literal>drawOn:</literal> method is very similar to the
one in <literal>SpaceShip</literal> class:
</para><screen>Torpedo&gt;&gt;drawOn: canvas
   | a b c |
   a := 0 @ -4.
   b := -2 @ 4.
   c := 2 @ 4.
   canvas line: a to: b width: 2 color: color.
   canvas line: c to: b width: 2 color: color.
   canvas line: a to: c width: 2 color: color.
</screen>
<bridgehead renderas="sect2"><link linkend="exeSpaceShipClassSideDiagram">exeSpaceShipClassSideDiagram</link></bridgehead>
<para>We use a local variable because we use two times the vertices, one to
draw the ship and a second time to draw the gas exhaust.
</para><screen>SpaceShip&gt;&gt;drawOn: canvas
   | vertices  |
   vertices := self class vertices.
   canvas line: vertices first to: vertices second width: 2 color: color.
   canvas line: vertices second to: vertices third width: 2 color: color.
   canvas line: vertices third to: vertices fourth width: 2 color: color.
   canvas line: vertices fourth to: vertices first width: 2 color: color.
   &quot;Draw gas exhaust&quot;
   acceleration ifNotZero: [
      canvas line: vertices third to: 0@35 width: 1 color: Color gray]
</screen>
<bridgehead renderas="sect2"><link linkend="exeDrawMobile">exeDrawMobile</link></bridgehead>
<para>You need both to iterate each vertex of the <literal>vertices</literal> array
and access the subsequent vertex by index. The arithmetic reminder
operation <literal>#\\</literal> is needed to keep the index in the boundary of the
collection.
</para>
<para>When <literal>size</literal> is 4 (Space ship diagram), the argument
<literal>(i \\ size + 1)</literal> takes alternatively the following values:
</para>
<itemizedlist>
<listitem><para><emphasis role="bold">i = 1</emphasis> =&gt; 1 \\ 4 + 1 = 1 + 1 = <emphasis role="bold">2</emphasis>
</para>
</listitem><listitem><para><emphasis role="bold">i = 2</emphasis> =&gt; 2 \\ 4 + 1 = 2 + 1 = <emphasis role="bold">3</emphasis>
</para>
</listitem><listitem><para><emphasis role="bold">i = 3</emphasis> =&gt; 3 \\ 4 + 1 = 3 + 1 = <emphasis role="bold">4</emphasis>
</para>
</listitem><listitem><para><emphasis role="bold">i = 4</emphasis> =&gt; 4 \\ 4 + 1 = 0 + 1 = <emphasis role="bold">1</emphasis>
</para>
</listitem></itemizedlist>
<screen>Mobile&gt;&gt;drawOn: canvas polygon: vertices
   | size |
   size := vertices size.
   vertices withIndexDo: [: aPoint :i |
      canvas
         line: aPoint
         to: ( vertices at: (i  \\ size + 1) )
         width: 2
         color: color]
</screen>
<bridgehead renderas="sect2"><link linkend="exeAccurateDetection">exeAccurateDetection</link></bridgehead>
<para>Just replace each morph position distance approach with the
intersection detection between the morphs&#8217; display bounds:
</para>
<screen>SpaceWar&gt;&gt;collisionsShips
   (ships first collides: ships second)
   ../..

SpaceWar&gt;&gt;collisionsShipsTorpedoes
   ships do: [:aShip | 
      torpedoes do: [:aTorpedo |
         (aShip collides: aTorpedo)
   ../..

SpaceWar&gt;&gt;collisionsTorpedoesStar
   torpedoes do: [:each | 
      (each collides: centralStar)
   ../..
</screen>

<!-- Chapter 8 -->
</sect1>
<sect1 label="" id="Events-_0028Solutions_0029">
<title>Events</title>

<bridgehead renderas="sect2"><link linkend="handleMouseOver">handleMouseOver</link></bridgehead>
<para>The method <literal>handlesMouseOver:</literal>, implemented in the
<literal>SpaceWar</literal> morph class, returns true so the game play is
informed of mouse over events in dedicated methods.
</para><screen>SpaceWar&gt;&gt;handlesMouseOver: event
   ^ true
</screen>
<bridgehead renderas="sect2"><link linkend="mouseEnter">mouseEnter</link></bridgehead>
<para>You need to browse the <literal>Morph&gt;&gt;handlesMouseOver:</literal> method and
read the comment. It writes about a <literal>#mouseEnter:</literal> message; we
implement the matching method in <literal>SpaceWar</literal> class with the
behaviors previously described:
</para><screen>SpaceWar&gt;&gt;mouseEnter: event
   event hand newKeyboardFocus: self.	
   self startStepping
</screen>
<bridgehead renderas="sect2"><link linkend="mouseLeave">mouseLeave</link></bridgehead>
<para>The message <literal>#mouseLeave:</literal> is sent to our <literal>SpaceWar</literal> instance
each time the mouse cursor move out (leaves) of the game
play. Therefore we add the homonym method to the <literal>SpaceWar</literal>
class:
</para><screen>SpaceWar&gt;&gt;mouseLeave: event
   event hand releaseKeyboardFocus: self.
   self stopStepping
</screen>
<bridgehead renderas="sect2"><link linkend="keyboardEvent">keyboardEvent</link></bridgehead>
<para>The <literal>#handlesKeyboard</literal> message is sent to a morph to know if it
wants to receive keyboard event. The morph responds true to this
message to state its interest on keyboard event. We implement the
method in the <literal>SpaceWar</literal> class:
</para><screen>SpaceWar&gt;&gt;handlesKeyboard
   ^ true
</screen>
<bridgehead renderas="sect2"><link linkend="secondShipControl">secondShipControl</link></bridgehead>
<para>We designate the characters as <literal>$w $a $s $d</literal>. We append the
code below to the method <literal>SpaceWar&gt;&gt;keyStroke:</literal>
</para><screen>key = $w ifTrue: [^ ships second push].
key = $d ifTrue: [^ ships second right].
key = $a ifTrue: [^ ships second left].
key = $s ifTrue: [^ ships second fireTorpedo]
</screen>
<!-- Chapter 9 -->
</sect1>
<sect1 label="" id="Code-Management-_0028Solutions_0029">
<title>Code Management</title>

<bridgehead renderas="sect2"><link linkend="twoCategoriesOnePackage">twoCategoriesOnePackage</link></bridgehead>
<orderedlist numeration="arabic">
<listitem><para>In the System Browser, create two class categories: in its
  most left pane menu select <command>add item... (a)</command> and key in one
  category name at a time.
</para>
</listitem><listitem><para>Create two classes, in each category: <literal>TheCuisBook</literal>
  subclass of <literal>Object</literal> and <literal>TheBookMorph</literal> subclass of
  <literal>PlacedMorph</literal>.
</para>
<para>The two operations above are doable in one shot. Select any existing
  category and key in the class definition with the category name:
</para>
<screen>PlacedMorph subclass: #TheBookMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: '<emphasis role="bold">TheCuisBook-Views</emphasis>'
</screen>
<para>Once you save the class definition, the <literal>TheBookMorph</literal> class is
   created &#8211; obviously &#8211; but also the <command>TheCuisBook-Views</command>
   category!
</para>
</listitem><listitem><para>Go to the Installed Packages tool ...World menu
   &#8594; <command>Open...</command> &#8594; <command>Installed Packages</command>...,
   press the <command>new</command> button and key in <command>TheCuisBook</command>.
</para>
</listitem><listitem><para>Press the <command>save</command> button, you are done!
</para>
</listitem></orderedlist><!-- List of examples -->
</sect1>
</appendix>
<appendix label="" id="The-Examples">
<title>The Examples</title>
<!-- List of figures -->
</appendix>
<appendix label="" id="The-Figures">
<title>The Figures</title>
<!-- The Spacewar source code -->
</appendix>
<appendix label="" id="Spacewar_0021-Source-Code">
<title>Spacewar! Source Code</title>
<para>In the raw source code below, understand the &#8220;_&#8221; character as &#8220;:=&#8221;.
</para><screen>'From Cuis6.0 [latest update: #6154] on 27 January 2024 at 5:42:28 pm'!
'Description SpaceWar!! game code'!
!provides: 'Spacewar!!' 1 96!
SystemOrganization addCategory: #'Spacewar!!'!


!classDefinition: #Mobile category: #'Spacewar!!'!
PlacedMorph subclass: #Mobile
	instanceVariableNames: 'acceleration color velocity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Spacewar!!'!
!classDefinition: 'Mobile class' category: #'Spacewar!!'!
Mobile class
	instanceVariableNames: 'vertices'!

!classDefinition: #SpaceShip category: #'Spacewar!!'!
Mobile subclass: #SpaceShip
	instanceVariableNames: 'name fuel torpedoes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Spacewar!!'!
!classDefinition: 'SpaceShip class' category: #'Spacewar!!'!
SpaceShip class
	instanceVariableNames: ''!

!classDefinition: #Torpedo category: #'Spacewar!!'!
Mobile subclass: #Torpedo
	instanceVariableNames: 'lifeSpan'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Spacewar!!'!
!classDefinition: 'Torpedo class' category: #'Spacewar!!'!
Torpedo class
	instanceVariableNames: ''!

!classDefinition: #SpaceWar category: #'Spacewar!!'!
PlacedMorph subclass: #SpaceWar
	instanceVariableNames: 'color ships torpedoes centralStar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Spacewar!!'!
!classDefinition: 'SpaceWar class' category: #'Spacewar!!'!
SpaceWar class
	instanceVariableNames: ''!

!classDefinition: #CentralStar category: #'Spacewar!!'!
Morph subclass: #CentralStar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Spacewar!!'!
!classDefinition: 'CentralStar class' category: #'Spacewar!!'!
CentralStar class
	instanceVariableNames: ''!


!Mobile commentStamp: 'hlsf 10/25/2020 09:16:19' prior: 0!
An abstract mobile with a mass and inner acceleration, subject to a gravity pull.!

!SpaceShip commentStamp: 'hlsf 10/25/2020 09:19:28' prior: 0!
A ship comes with a torpedo inventory and a fuel tank.
Player controls its heading and acceleration, and he can fire torpedo.!

!Torpedo commentStamp: 'hlsf 10/25/2020 09:18:37' prior: 0!
A torpedo comes with a lifespan and an automatic acceleration handling!

!SpaceWar commentStamp: 'hlsf 11/1/2020 10:06:46' prior: 0!
I am the view and controler of the game.
My submorphs are the elements of the game.

To start the game execute: &quot;SpaceWar new openInWorld&quot;

Ship Controls
Green: left, right, up down arrows
Red: a, d, w, s keys!

!CentralStar commentStamp: '&lt;historical&gt;' prior: 0!
I am the central start of the game generating a gravity field.!

!Mobile methodsFor: 'accessing' stamp: 'hlsf 10/1/2020 08:34:04'!
color: aColor
	&quot;Set the receiver's color. &quot;
	color = aColor ifFalse: [
		color _ aColor.
		self redrawNeeded ]! !

!Mobile methodsFor: 'accessing' stamp: 'hlsf 2/14/2022 13:48:54'!
direction
&quot;I am an unit vector representing the noze direction of the mobile&quot;
	^Point rho: 1 theta: self heading! !

!Mobile methodsFor: 'accessing' stamp: 'hlsf 2/14/2022 13:48:44'!
heading
	^ location radians - Float halfPi! !

!Mobile methodsFor: 'accessing' stamp: 'hlsf 2/14/2022 13:53:10'!
heading: aHeading
	self rotation: aHeading + Float halfPi! !

!Mobile methodsFor: 'accessing' stamp: 'hlsf 10/1/2020 08:34:23'!
mass
	^ 1! !

!Mobile methodsFor: 'accessing' stamp: 'hlsf 1/27/2024 15:47:36'!
starMass
	^ owner starMass! !

!Mobile methodsFor: 'accessing' stamp: 'hlsf 8/23/2021 11:55:02'!
velocity: aVector
	velocity _ aVector ! !

!Mobile methodsFor: 'computing' stamp: 'hlsf 1/27/2024 15:47:23'!
gravity
&quot;Compute the gravity acceleration vector&quot;
	| position |
	position := self morphPosition.
	^ [-10 * self mass * self starMass / (position r raisedTo: 3) * position]
		on: Error do: [0 @ 0]! !

!Mobile methodsFor: 'computing' stamp: 'hlsf 8/23/2021 11:52:21'!
update: t
&quot;Update the mobile position and velocity &quot;
	| ai ag newVelocity |
	&quot;acceleration vectors&quot;
	ai _ acceleration * self direction.
	ag _ self gravity.
	newVelocity _ (ai + ag) * t + velocity.
	self morphPosition: (0.5 * (ai + ag) * t squared) 
		+ (velocity * t) 
		+ self morphPosition.
	velocity _ newVelocity.
	
	&quot;Are we out of screen?
	If so we move the mobile to the other corner and slow it down by a factor of 2&quot;
	(self isInOuterSpace and: [self isGoingOuterSpace]) ifTrue: [
		velocity _ velocity / 2.
		self morphPosition: self morphPosition negated]! !

!Mobile methodsFor: 'initialization' stamp: 'hlsf 10/1/2020 08:37:29'!
initialize
	super initialize.
	color _ Color gray.
	velocity _ 0 @ 0.
	acceleration _ 0.! !

!Mobile methodsFor: 'testing' stamp: 'hlsf 10/8/2020 22:21:33'!
isGoingOuterSpace
&quot;is the mobile going crazy in direction of the outer space?&quot;
	^ (self morphPosition dotProduct: velocity) &gt; 0 ! !

!Mobile methodsFor: 'testing' stamp: 'jmv 10/28/2021 15:04:22'!
isInOuterSpace
&quot;Is the mobile located in the outer space? (outside of the game play area)&quot;
	^(owner morphLocalBounds containsPoint: self morphPosition) not! !

!Mobile methodsFor: 'drawing' stamp: 'hlsf 8/23/2021 11:50:43'!
drawOn: canvas polygon: vertices
	| size |
	size _ vertices size.
	vertices withIndexDo: [: aPoint :i |
		canvas 
			line: aPoint 
			to: ( vertices at: (i  \\ size + 1) ) 
			width: 2 
			color: color] ! !

!Mobile methodsFor: 'geometry' stamp: 'jmv 10/28/2021 14:53:01'!
morphLocalBounds

	^Rectangle encompassing: self class vertices! !

!Mobile class methodsFor: 'as yet unclassified' stamp: 'hlsf 12/19/2020 23:21:09'!
vertices
	^ vertices ! !

!SpaceShip methodsFor: 'control' stamp: 'hlsf 2/14/2022 13:53:33'!
fireTorpedo
&quot;Fire a torpedo in the direction of the ship heading with a combined velocity&quot;
	| torpedo | 
	torpedoes isZero ifTrue: [ ^ self].
	torpedoes _ torpedoes - 1.
	torpedo _ Torpedo new.
	torpedo 
		morphPosition: self morphPosition + self nose;
		heading: self heading;
		velocity: velocity;
		color: color muchLighter .
	owner addTorpedo: torpedo.! !

!SpaceShip methodsFor: 'control' stamp: 'hlsf 2/14/2022 14:09:51'!
left
&quot;Rotate the ship to its left&quot;
	self heading: self heading - 0.1! !

!SpaceShip methodsFor: 'control' stamp: 'hlsf 1/27/2024 15:39:46'!
push
&quot;Init an accelaration boost&quot;
	fuel isZero ifTrue: [^ self].
	fuel := fuel - 1.
	acceleration := (acceleration + 10) min: 50! !

!SpaceShip methodsFor: 'control' stamp: 'hlsf 2/14/2022 14:10:08'!
right
&quot;Rotate the ship to its right&quot;
	self heading: self heading + 0.1! !

!SpaceShip methodsFor: 'control' stamp: 'hlsf 1/27/2024 15:39:56'!
unpush
&quot;Stop the accelaration boost&quot;
	acceleration := acceleration - 5 max: 0! !

!SpaceShip methodsFor: 'drawing' stamp: 'hlsf 1/27/2024 17:42:24'!
drawOn: canvas
	| vertices  |
	vertices := self class vertices.
	super drawOn: canvas polygon: vertices.
	&quot;Draw gas exhaust&quot;
	acceleration ifNotZero: [
		canvas line: vertices third to: 0@acceleration  width: 1 + acceleration / 8 color: Color orange].! !

!SpaceShip methodsFor: 'drawing' stamp: 'hlsf 12/15/2020 21:16:09'!
nose
	^ self direction * 40! !

!SpaceShip methodsFor: 'initialization' stamp: 'hlsf 2/14/2022 13:50:54'!
initialize
	super initialize.
	self resupply! !

!SpaceShip methodsFor: 'initialization' stamp: 'hlsf 2/16/2023 11:54:41'!
resupply
	fuel _ 500.
	torpedoes _ 10! !

!SpaceShip class methodsFor: 'as yet unclassified' stamp: 'hlsf 12/19/2020 23:21:16'!
initialize
&quot;SpaceShip initialize&quot;
	vertices _ {0@-15 . -10@15. 0@10. 10@15}! !

!Torpedo methodsFor: 'computing' stamp: 'hlsf 2/16/2023 11:56:14'!
update: t
&quot;Update the torpedo position&quot;
	super update: t.
	&quot;orientate the torpedo in its velocity direction, nicer effect while inaccurate&quot;
	self heading: (velocity y arcTan: velocity x).
	lifeSpan _ lifeSpan - 1.
	lifeSpan isZero ifTrue: [owner destroyTorpedo: self].
	acceleration &gt; 0 ifTrue: [acceleration _ acceleration - 500].! !

!Torpedo methodsFor: 'drawing' stamp: 'hlsf 12/20/2020 13:19:16'!
drawOn: canvas
	self drawOn: canvas polygon: self class vertices! !

!Torpedo methodsFor: 'initialization' stamp: 'hlsf 12/15/2020 21:12:29'!
initialize
	super initialize.
	lifeSpan _ 500.
	acceleration _ 3000! !

!Torpedo class methodsFor: 'as yet unclassified' stamp: 'hlsf 12/19/2020 23:21:22'!
initialize
&quot;Torpedo initialize&quot;
	vertices _ {0@-4 . -2@4 . 2@4}! !

!SpaceWar methodsFor: 'accessing' stamp: 'hlsf 9/16/2020 16:41:40'!
starMass
	^ centralStar mass! !

!SpaceWar methodsFor: 'actions' stamp: 'hlsf 9/21/2020 20:56:33'!
addTorpedo: aTorpedo
	torpedoes add: aTorpedo.
	self addMorph: aTorpedo ! !

!SpaceWar methodsFor: 'actions' stamp: 'hlsf 9/21/2020 21:10:33'!
destroyTorpedo: aTorpedo
	aTorpedo delete.
	torpedoes remove: aTorpedo ! !

!SpaceWar methodsFor: 'actions' stamp: 'hlsf 10/1/2020 17:29:37'!
teleport: aShip
&quot;Teleport a ship at a random location&quot;
	| area randomCoordinate |
	aShip resupply.
	area _ self morphLocalBounds insetBy: 20.
	randomCoordinate _ [(area left to: area right) atRandom].
	aShip 
		velocity: 0@0;
		morphPosition: randomCoordinate value @ randomCoordinate value! !

!SpaceWar methodsFor: 'collisions' stamp: 'hlsf 10/1/2020 15:04:27'!
collisions
	self collisionsShipsStar.
	self collisionsTorpedoesStar.
	self collisionsShipsTorpedoes.
	self collisionsShips ! !

!SpaceWar methodsFor: 'collisions' stamp: 'hlsf 2/16/2023 12:53:43'!
collisionsShips
	(ships first collides: ships second) ifTrue: [
		ships do: [:each |
			each flashWith: Color red.
			self teleport: each] ]! !

!SpaceWar methodsFor: 'collisions' stamp: 'hlsf 2/16/2023 12:28:09'!
collisionsShipsStar
	ships do: [ :aShip |
		(aShip collides: centralStar) ifTrue: [
			aShip flashWith: Color red.
			self teleport: aShip ]]! !

!SpaceWar methodsFor: 'collisions' stamp: 'hlsf 2/16/2023 12:30:08'!
collisionsShipsTorpedoes
	ships do: [:aShip | 
		torpedoes do: [:aTorpedo |
		(aShip collides: aTorpedo) ifTrue: [
			aShip flashWith: Color red.
			aTorpedo flashWith: Color orange.
			self destroyTorpedo: aTorpedo.
			self teleport: aShip]]
	]! !

!SpaceWar methodsFor: 'collisions' stamp: 'hlsf 2/16/2023 12:30:19'!
collisionsTorpedoesStar
	torpedoes do: [:each | 
		(each collides: centralStar) ifTrue: [
			each flashWith: Color orange.
			self destroyTorpedo: each]]! !

!SpaceWar methodsFor: 'drawing' stamp: 'hlsf 10/1/2020 15:45:54'!
drawOn: aCanvas
	aCanvas
		fillRectangle: self morphLocalBounds
		color: color! !

!SpaceWar methodsFor: 'event handling testing' stamp: 'hlsf 11/1/2020 10:03:57'!
handlesKeyboard
	^ true! !

!SpaceWar methodsFor: 'event handling testing' stamp: 'hlsf 11/1/2020 10:04:18'!
handlesMouseOver: event
	^ true! !

!SpaceWar methodsFor: 'events' stamp: 'hlsf 2/22/2023 21:31:48'!
keyStroke: event
	| key |
	event isArrowUp ifTrue: [^ ships first push].
	event isArrowRight ifTrue: [^ ships first right].
	event isArrowLeft ifTrue: [^ ships first left].
	event isArrowDown ifTrue: [^ ships first fireTorpedo].
	key _ event keyCharacter.
	key = $w ifTrue: [^ ships second push].
	key =$d ifTrue: [^ ships second right].
	key = $a ifTrue: [^ ships second left].
	key = $s ifTrue: [^ ships second fireTorpedo]! !

!SpaceWar methodsFor: 'events' stamp: 'hlsf 9/11/2020 10:07:17'!
mouseEnter: evt
	evt hand newKeyboardFocus: self.	
	self startStepping! !

!SpaceWar methodsFor: 'events' stamp: 'hlsf 9/11/2020 10:07:22'!
mouseLeave: evt
	evt hand releaseKeyboardFocus: self.
	self stopStepping! !

!SpaceWar methodsFor: 'focus handling' stamp: 'hlsf 9/10/2020 16:04:35'!
keyboardFocusChange: gotFocus
	gotFocus 
		ifTrue: [color _ self defaultColor ]
		ifFalse: [color _ self defaultColor alpha: 0.5].
	self redrawNeeded.! !

!SpaceWar methodsFor: 'geometry testing' stamp: 'hlsf 12/11/2020 13:00:49'!
clipsSubmorphs
	^ true! !

!SpaceWar methodsFor: 'initialization' stamp: 'hlsf 9/10/2020 15:21:22'!
defaultColor
	^ `Color black`! !

!SpaceWar methodsFor: 'initialization' stamp: 'hlsf 11/1/2020 10:04:39'!
initialize
&quot;We want to capture keyboard and mouse events, 
start the game loop(step) and initialize the actors.&quot; 
	super initialize.
	color _ self defaultColor.
	self startSteppingStepTime: self stepTime.
	self initializeActors.! !

!SpaceWar methodsFor: 'initialization' stamp: 'hlsf 8/23/2021 11:53:32'!
initializeActors
	centralStar _ CentralStar new.
	self addMorph: centralStar.
	centralStar morphPosition: 0@0.
	torpedoes _ OrderedCollection new.
	ships _ Array with: SpaceShip new with: SpaceShip new.
	self addAllMorphs: ships.
	ships first 
		morphPosition: 200 @ -200;
		color: Color green darker.
	ships second 
		morphPosition: -200 @ 200;
		color: Color red darker.! !

!SpaceWar methodsFor: 'stepping' stamp: 'hlsf 12/16/2020 19:45:30'!
stepAt: millisecondSinceLast
	ships do: [:each | each update: millisecondSinceLast / 1000 ].
	ships do: [:each | each unpush ].
	torpedoes do: [:each | each update: millisecondSinceLast / 1000 ].
	self collisions.
	self redrawNeeded 
! !

!SpaceWar methodsFor: 'stepping' stamp: 'hlsf 9/11/2020 13:19:07'!
stepTime
&quot;millisecond&quot;
	^ 20! !

!SpaceWar methodsFor: 'stepping' stamp: 'hlsf 9/10/2020 18:03:59'!
wantsSteps
	^ true! !

!SpaceWar methodsFor: 'geometry' stamp: 'hlsf 2/16/2023 11:38:27'!
morphLocalBounds

	^ -300 @ -300 extent: 600@600! !

!CentralStar methodsFor: 'accessing' stamp: 'hlsf 10/8/2020 22:20:17'!
mass
	^ 8000! !

!CentralStar methodsFor: 'accessing' stamp: 'hlsf 12/15/2020 21:04:13'!
morphExtent
	^ `30 @ 30`! !

!CentralStar methodsFor: 'drawing' stamp: 'KenD 2/15/2023 15:40:04'!
drawOn: canvas
	| radius |
	radius _ self morphExtent // 2.
	canvas ellipseCenter: 0 @ 0
		radius: (radius x + (2 atRandom - 1)) @ (radius y + (2 atRandom - 1))
		borderWidth: 3 
		borderColor: Color orange 
		fillColor: Color yellow ! !

!CentralStar methodsFor: 'geometry' stamp: 'jmv 10/28/2021 14:55:55'!
morphLocalBounds

	^Rectangle center: 0@0 extent: self morphExtent! !
SpaceShip initialize!
Torpedo initialize!
</screen><!-- Indexes -->
</appendix>
<appendix label="" id="Indexes">
<title>Conceptual index</title>
<index role="cp"></index>
<!--================================================================ -->
<!--: To be filled -->

<!--:END OF THE BOOK -->
</appendix>
</book>
