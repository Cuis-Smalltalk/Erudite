@node Top
@top PetitParser tutorial

@menu
* Introduction::
* Writing parsers with PetitParser::
* Composite grammars with PetitParser::
@end menu

@node Introduction
@chapter Introduction
@anchor{#introduction}
with the participation of:

@emph{Jan Kurs} @emph{(kurs@@iam.unibe.ch)}

@emph{Guillaume Larcheveque} @emph{(guillaume.larcheveque@@gmail.com)}

@emph{Lukas Renggli} @emph{(renggli@@gmail.com)}

Building parsers to analyze and transform data is a common task in
software development. In this chapter we present a powerful parser
framework called PetitParser. PetitParser combines many ideas from
various parsing technologies to model grammars and parsers as objects
that can be reconfigured dynamically. PetitParser was written by Lukas
Renggli as part of his work on the Helvetia system 1 but it can be used
as a standalone library.

@node Writing parsers with PetitParser
@chapter Writing parsers with PetitParser
@anchor{#writing-parsers-with-petitparser}
PetitParser is a parsing framework different from many other popular
parser generators. PetitParser makes it easy to define parsers with
Smalltalk code and to dynamically reuse, compose, transform and extend
grammars. We can reflect on the resulting grammars and modify them
on-the-fly. As such PetitParser fits better the dynamic nature of
Smalltalk.Furthermore, PetitParser is not based on tables such as SmaCC
and ANTLR. Instead it uses a combination of four alternative parser
methodologies: scannerless parsers, parser combinators, parsing
expression grammars and packrat parsers. As such PetitParser is more
powerful in what it can parse.

Let's have a quick look at these four parser methodologies:

@emph{Scannerless Parsers} combine what is usually done by two
independent tools (scanner and parser) into one. This makes writing a
grammar much simpler and avoids common problems when grammars are
composed.

@emph{Parser Combinators} are building blocks for parsers modeled as a
graph of composable objects; they are modular and maintainable, and can
be changed, recomposed, transformed and reflected upon.

@emph{Parsing Expression Grammars} (PEGs) provide the notion of ordered
choices. Unlike parser combinators, the ordered choice of PEGs always
follows the first matching alternative and ignores other alternatives.
Valid input always results in exactly one parse-tree, the result of a
parse is never ambiguous.

@emph{Packrat Parsers} give linear parse-time guarantees and avoid
common problems with left-recursion in PEGs.

@menu
* Writing a simple grammar::
* Parsing some input::
* Different kinds of parsers::
* Writing a more complicated grammar::
@end menu

@node Writing a simple grammar
@section Writing a simple grammar
@anchor{#writing-a-simple-grammar}
Writing grammars with PetitParser is as simple as writing Smalltalk
code. For example, to define a grammar that parses identifiers starting
with a letter followed by zero or more letters or digits is defined and
used as follows:

@verbatim
identifier := #letter asParser , #word asParser star.
identifier parse: 'a987jlkj'
@end verbatim

@node Parsing some input
@section Parsing some input
@anchor{#parsing-some-input}
To actually parse a string (or stream) we use the method
@uref{PPParser>>parse: ,PPParser>>parse:} as follows:

@verbatim
identifier parse: 'yeah'
@end verbatim

@verbatim
identifier parse: 'f123'
@end verbatim

While it seems odd to get these nested arrays with characters as a
return value, this is the default decomposition of the input into a
parse tree. We'll see in a while how that can be customized. If we try
to parse something invalid we get an instance of @url{PPFailure} as an
answer:

@verbatim
identifier parse: '123'
@end verbatim

This parsing results in a failure because the first character ( 1 ) is
not a letter. Instances of PPFailure are the only objects in the system
that answer with true when you send the message @url{isPetitFailure}.
Alternatively you can also use
@uref{PPParser>>parse:onError: ,PPParser>>parse:onError:} to throw an
exception in case of an error:

@verbatim
identifier
   parse: '123'
   onError: [ :msg :pos | self error: msg ] 
@end verbatim

If you are only interested if a given string (or stream) matches or not
you can use the following constructs:

@verbatim
identifier matches: 'foo'
@end verbatim

@verbatim
identifier matches: '123'
@end verbatim

@verbatim
identifier matches: 'foo()'
@end verbatim

The last result can be surprising: indeed, a parenthesis is neither a
digit nor a letter as was specified by the

@verbatim
#word asParser
@end verbatim

expression. In fact, the identifier parser matches

@verbatim
'foo'
@end verbatim

and this is enough for the @uref{PPParser>>matches: ,PPParser>>matches:}
call to return true . The result would be similar with the use of parse:
which would return

@verbatim
#($f #($o $o))
@end verbatim

.If you want to be sure that the complete input is matched, use the
message @uref{PPParser>>end ,PPParser>>end} as follows:

@verbatim
identifier end matches:'foo'
@end verbatim

The @uref{PPParser>>end ,PPParser>>end} message creates a new parser
that matches the end ofinput. To be able to compose parsers easily, it
is important that parsers do not match the end of input by default.
Because of this, you might be interested to find all the places that a
parser can match using the message
@uref{PPParser>>matchesSkipIn: ,PPParser>>matchesSkipIn:} and
@uref{PPParser>>matchesIn: ,PPParser>>matchesIn:}.

@verbatim
identifier matchesSkipIn: 'foo 123 bar12'
@end verbatim

@verbatim
identifier matchesIn: 'foo 123 bar12'
@end verbatim

The @uref{PPParser>>matchesSkipIn: ,PPParser>>matchesSkipIn:} method
returns a collection of arrays containing what has been matched. This
function avoids parsing the same character twice. The method
@uref{PPParser»matchesIn: ,PPParser»matchesIn:} does a similar job but
returns a collection with all possible sub-parsed elements: e.g.,
evaluating

@verbatim
identifier matchesIn: 'foo 123 bar12'
@end verbatim

returns a collection of 6 elements.

Similarly, to find all the matching ranges (index of first character
andindex of last character) in the given input one can use either
@uref{PPParser>>matchingSkipRangesIn: ,PPParser>>matchingSkipRangesIn:}
or @uref{PPParser>>matchingRangesIn: ,PPParser>>matchingRangesIn:} as
shown by the script below:

@verbatim
identifier matchingSkipRangesIn: 'foo 123 bar12'
@end verbatim

@verbatim
identifier matchingRangesIn: 'foo 123 bar12'
@end verbatim

@node Different kinds of parsers
@section Different kinds of parsers
@anchor{#different-kinds-of-parsers}
PetitParser provide a large set of ready-made parser that you can
compose to consume and transform arbitrarily complex languages. The
terminal parsers are the most simple ones. We've already seen a few of
those, some more are defined in the protocol Table 1.1.

The class side of @url{PPPredicateObjectParser} provides a lot of other
factory methods that can be used to build more complex terminal parsers.
To use them, send the message
@uref{PPParser>>asParser ,PPParser>>asParser} to a symbol containing the
name of the factory method (such as

@verbatim
#punctuation asParser
@end verbatim

).

The next set of parsers are used to combine other parsers together and
isdefined in the protocol:

@emph{Terminal Parsers}

@verbatim
$a asParser
@end verbatim

. Parses the character $a.

@verbatim
'abc' asParser
@end verbatim

. Parses the string 'abc'.

@verbatim
#any asParser
@end verbatim

. Parses any character.

@verbatim
#digit asParser
@end verbatim

. Parses one digit (0..9).

@verbatim
#letter asParser
@end verbatim

. Parses one letter (a..z and A..Z).

@verbatim
#word asParser
@end verbatim

. Parses a digit or letter.

@verbatim
#blank asParser
@end verbatim

. Parses a space or a tabulation.

@verbatim
#newline asParser
@end verbatim

. Parses the carriage return or line feed characters.

@verbatim
#space asParser
@end verbatim

. Parses any white space character including new line.

@verbatim
#tab asParser
@end verbatim

. Parses a tab character.

@verbatim
#lowercase asParser
@end verbatim

. Parses a lowercase character.

@verbatim
#uppercase asParser
@end verbatim

. Parses an uppercase character.

@verbatim
nil asParser
@end verbatim

. Parses nothing.

@emph{Parser Combinators}

@emph{p1 , p2}. Parses p1 followed by p2 (sequence).

@emph{p1 / p2}. Parses p1, if that doesn't work parses p2.

@emph{p star}. Parses zero or more p.

@emph{p plus}. Parses one or more p.

@emph{p optional}. Parses p if possible.

@emph{p and}. Parses p but does not consume its input.

@emph{p negate}. Parses p and succeeds when p fails.

@emph{p not}. Parses p and succeeds when p fails, but does not consume
its input.

@emph{p end}. Parses p and succeeds only at the end of the input.

@emph{p times: n}. Parses p exactly n times.

@emph{p min: n max: m}. Parses p at least n times up to m times

@emph{p starLazy: q}. Like star but stop consumming when q suc-ceeds

As a simple example of parser combination, the following definition of
the

@emph{identifier2 parser} is equivalent to our previous definition of
@emph{identifier}:

@verbatim
identifier2 := #letter asParser , (#letter asParser / #digit asParser) star
@end verbatim

To define an action or transformation on a parser we can use one of the
mes-sages @uref{PPParser>>==> ,PPParser>>==>},
@uref{PPParser>>flatten ,PPParser>>flatten},
@uref{PPParser>>token ,PPParser>>token} and
@uref{PPParser>>trim ,PPParser>>trim} defined in the protocol:

@emph{Action parsers}

@emph{p flatten}. Creates a string from the result of p.

@emph{p token}. Similar to flatten but returns a @url{PPToken} with
details.

@emph{p trim}. Trims white spaces before and after p.

@emph{p trim: trimParser}. Trims whatever trimParser can parse (e.g.,
comments).

@emph{p ==> aBlock}. Performs the transformation given in aBlock.

To return a string of the parsed identifier instead of getting an array
of matched elements, configure the parser by sending it the message
@uref{PPParser>>flatten ,PPParser>>flatten}.

@verbatim
|identifier|
identifier := (#letter asParser , (#letter asParser / #digit asParser) star).
identifier parse: ' ajka0 '
@end verbatim

@verbatim
|identifier|
identifier := (#letter asParser , (#letter asParser / #digit asParser) star).
identifier parse: 'ajka0'
@end verbatim

Sending the message trim is equivalent to calling
@uref{PPParser>>trim: ,PPParser>>trim:} with

@verbatim
#space asParser
@end verbatim

as a parameter. That means @emph{trim:} can be useful to ignore other
data from the input, source code comments for example:

@verbatim
| identifier comment ignorable line |
identifier := (#letter asParser , #word asParser star) flatten.
comment := '//' asParser, #newline asParser negate star.
ignorable := comment / #space asParser.
line := identifier trim: ignorable.
line parse: '// This is a comment
oneIdentifier // another comment'
@end verbatim

The message PPParser»==> lets you specify a block to be executed when
the parser matches an input. The next section presents several examples.
Here is a simple way to get a number from its string representation.

@verbatim
number := #digit asParser plus flatten
@end verbatim

@verbatim
number parse: '123'
@end verbatim

The table 1.3 shows the basic elements to build parsers. There are a few
more well documented and tested factory methods in the operators
protocols of PPParser . If you want to know more about these factory
methods, browse these protocols. An interesting one is separatedBy:
which answers a new parser that parses the input one or more times, with
separations specified by another parser.

@node Writing a more complicated grammar
@section Writing a more complicated grammar
@anchor{#writing-a-more-complicated-grammar}
We now write a more complicated grammar for evaluating simple arithmetic
expressions. With the grammar for a number (actually an integer) defined
above, the next step is to define the productions for addition and
multiplication in order of precedence. Note that we instantiate the
productions as PPDelegateParser upfront, because they recursively refer
to each other. The method #setParser: then resolves this recursion. The
following script defines three parsers for the addition, multiplication
and parenthesis (see Figure 1.4 for the related syntax diagram):

@verbatim
number := #digit asParser plus flatten ==> [:node | node asNumber].
term := PPDelegateParser new.
prod := PPDelegateParser new.
prim := PPDelegateParser new.
term setParser: (prod , $+ asParser trim , term ==> [ :nodes | nodes first  + nodes last  ])
/ prod.
prod setParser: (prim , $* asParser trim , prod ==> [ :nodes | nodes first  * nodes last  ])
/ prim.
prim setParser: ($( asParser trim , term , $) asParser trim ==> [ :nodes | nodes second ])
/ number.
@end verbatim

The term parser is defined as being either (1) a prod followed by '+',
followed by another term or (2) a prod. In case (1), an action block
asks the parser to compute the arithmetic addition of the value of the
first node (a prod) and the last node (a term). The prod parser is
similar to the term parser. The prim parser is interesting in that it
accepts left and right parenthesis before and after a term and has an
action block that simply ignores them.

To understand the precedence of productions, see Figure 1.5. The root of
the tree in this figure ( term ), is the production that is tried first.
A term is either a + or a prod . The term production comes first because
+ as the lowest priority in mathematics.

To make sure that our parser consumes all input we wrap it with the end
parser into the start production:

@verbatim
start := term end
@end verbatim

That's it, we can now test our parser:

@verbatim
start parse: '1 + 2 * 3'
@end verbatim

@verbatim
start parse: '(1 + 2) * 3'
@end verbatim

@node Composite grammars with PetitParser
@chapter Composite grammars with PetitParser
@anchor{#composite-grammars-with-petitparser}
In the previous section we saw the basic principles of PetitParser and
gave some introductory examples. In this section we are going to present
a way to define more complicated grammars. We continue where we left off
with the arithmetic expression rammar.Writing parsers as a script as we
did previously can be cumbersome, especially when grammar productions
are mutually recursive and refer to each other in complicated ways.
Furthermore a grammar specified in a single script makes it unnecessary
hard to reuse specific parts of that grammar.Luckily there is
@url{PPCompositeParser} to the rescue.

@menu
* Defining the grammar::
* Writing dependent grammars::
* Defining an evaluator::
* Defining a Pretty-Printer::
* Easy expressions with PPExpressionParser::
@end menu

@node Defining the grammar
@section Defining the grammar
@anchor{#defining-the-grammar}
As an example let's create a composite parser using the same expression
grammar we built in the last section but this time we define it inside a
class subclass of @uref{PPCompositeParser ,PPCompositeParser}.

@url{ExpressionGrammar}

Again we start with the grammar for an integer number. Define themethod
number as follows:

@uref{ExpressionGrammar>>number ,ExpressionGrammar>>number}

Every production in ExpressionGrammar is specified as a method that
returns its parser. Similarly, we define the productions term , prod ,
mul , and prim . Productions refer to each other by reading the
respective instance variable of the same name and PetitParser takes care
of initializing these instance variables for you automatically. We let
Smalltalk automatically add the necessary instance variables as we refer
to them for the first time. We obtain the following class definition:

@url{ExpressionGrammar}

Define more expression grammar parsers, this time with no associated
action:

@uref{ExpressionGrammar>>term ,ExpressionGrammar>>term}

@uref{ExpressionGrammar>>add ,ExpressionGrammar>>add}

@uref{ExpressionGrammar>>prod ,ExpressionGrammar>>prod}

@uref{ExpressionGrammar>>mul ,ExpressionGrammar>>mul}

@uref{ExpressionGrammar>>prim ,ExpressionGrammar>>prim}

@uref{ExpressionGrammar>>parens ,ExpressionGrammar>>parens}

Contrary to our previous implementation we do not define the production
actions yet (what we previously did by using PPParser»==> ); and we
factor out the parts for addition ( add ), multiplication ( mul ), and
parenthesis ( parens ) into separate productions. This will give us
better reusability later on. For example, a subclass may override such
methods to produce slightly different production output. Usually,
production methods are categorized in a protocol named grammar (which
can be refined into more specific protocol names when necessary such as
grammar - literals ).

Last but not least we define the starting point of the expression
grammar. This is done by overriding
@uref{PPCompositeParser>>start ,PPCompositeParser>>start} in the
ExpressionGrammar class:

@uref{ExpressionGrammar>>start ,ExpressionGrammar>>start}

Instantiating the ExpressionGrammar gives us an expression parser that
returns a default abstract-syntax tree:

@verbatim
parser := ExpressionGrammar new.
@end verbatim

@verbatim
parser parse: '1 + 2 * 3'
@end verbatim

@verbatim
parser parse: '(1 + 2) * 3'
@end verbatim

@node Writing dependent grammars
@section Writing dependent grammars
@anchor{#writing-dependent-grammars}
You can easily reuse parsers defined by other grammars. For example,
imag-ine you want to create a new grammar that reuses the definition of
number inthe ExpressionGrammar we have just defined. For this, you have
to declare adependency to ExpressionGrammar:

@verbatim
PPCompositeParser subclass: #MyNewGrammar
instanceVariableNames: 'number'
classVariableNames: ''
poolDictionaries: ''
category: 'PetitTutorial'

MyNewGrammar class>>dependencies
"Answer a collection of PPCompositeParser classes that this parser directly
dependends on."
^ {ExpressionGrammar}

MyNewGrammar>>number
"Answer the same parser as ExpressionGrammar>>number."
^ (self dependencyAt: ExpressionGrammar) number
@end verbatim

@node Defining an evaluator
@section Defining an evaluator
@anchor{#defining-an-evaluator}
Now that we have defined a grammar we can reuse this definition to
imple-ment an evaluator. To do this we create a subclass of
@url{ExpressionGrammar} called

@url{ExpressionEvaluator}:

@url{ExpressionEvaluator}

We then redefine the implementation of add , mul and parens with our
eval-uation semantics. This is accomplished by calling the super
implementationand adapting the returned parser as shown in the following
methods:

@uref{ExpressionEvaluator>>add ,ExpressionEvaluator>>add}

@uref{ExpressionEvaluator>>mul ,ExpressionEvaluator>>mul}

@uref{ExpressionEvaluator>>parens ,ExpressionEvaluator>>parens}

The evaluator is now ready to be tested:

@verbatim
parser := ExpressionEvaluator new.
@end verbatim

@verbatim
parser parse: '1 + 2 * 3'.
@end verbatim

@verbatim
parser parse: '(1 + 2) * 3'.
@end verbatim

@node Defining a Pretty-Printer
@section Defining a Pretty-Printer
@anchor{#defining-a-pretty-printer}
We can reuse the grammar for example to define a simple pretty printer.
Thisis as easy as subclassing ExpressionGrammar again!

@url{ExpressionPrinter}

@uref{ExpressionPrinter>>add ,ExpressionPrinter>>add}

@uref{ExpressionPrinter>>mul ,ExpressionPrinter>>mul}

@uref{ExpressionPrinter>>parens ,ExpressionPrinter>>parens}

This pretty printer can be tried out as shown by the following
expressions:

@verbatim
parser := ExpressionPrinter new.
@end verbatim

@verbatim
parser parse: '1+2 *3'.
@end verbatim

@verbatim
parser parse: '(1+ 2   )* 3'.
@end verbatim

@node Easy expressions with PPExpressionParser
@section Easy expressions with PPExpressionParser
@anchor{#easy-expressions-with-ppexpressionparser}
PetitParser proposes a powerful tool to create expressions;
PPExpressionParseris a parser to conveniently define an expression
grammar with prefix, postfix, and left- and right-associative infix
operators. The operator-groups are defined in descending precedence.

The ExpressionGrammar we previously defined can be implemented infew
lines:

@verbatim
| expression parens number |
expression := PPExpressionParser new.
parens := $( asParser token trim , expression , $) asParser token trim
==> [ :nodes | nodes second ].
number := #digit asParser plus flatten trim ==> [ :str | str asNumber ].
expression term: parens / number.
expression
	group: [ :g |
		g left: $* asParser token trim do: [ :a :op :b | a * b ].
		g left: $/ asParser token trim do: [ :a :op :b | a / b ] ];
	group: [ :g |
		g left: $+ asParser token trim do: [ :a :op :b | a + b ].
		g left: $ - asParser token trim do: [ :a :op :b | a - b ] ]. 
@end verbatim

Now our parser is also able to manage subtraction and division:

@verbatim
expression parse: '1 - 2/3'.
@end verbatim

How do you decide when to create a subclass of PPCompositeParser
orinstantiate PPExpressionParser ? On the one hand, you should
instantiate aPPExpressionParser if you want to do a small parser for a
small task. On theother hand, if you have a grammar that's composed of
many parsers, youshould subclass PPCompositeParser .
